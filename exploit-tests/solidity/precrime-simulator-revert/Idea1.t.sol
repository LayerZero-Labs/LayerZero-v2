// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Test} from "forge-std/Test.sol";
import {OAppPreCrimeSimulator} from "packages/layerzero-v2/evm/oapp/contracts/precrime/OAppPreCrimeSimulator.sol";
import {IPreCrime} from "packages/layerzero-v2/evm/oapp/contracts/precrime/interfaces/IPreCrime.sol";
import {IOAppPreCrimeSimulator} from "packages/layerzero-v2/evm/oapp/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol";
import {InboundPacket, Origin} from "packages/layerzero-v2/evm/oapp/contracts/precrime/interfaces/IOAppPreCrimeSimulator.sol";

/// @title Exploit test for PreCrime Simulator Revert Requirement
/// @invariant File:packages/layerzero-v2/evm/oapp/contracts/precrime/OAppPreCrimeSimulator.sol:41 - "PreCrime simulator MUST revert with simulation results"
/// @bounty_estimate $2500000
/// @attacker Off-chain verifier calling simulator
/// @impact If not reverted, simulation results can be ignored leading to bypass
contract Exploit_PrecrimeSimulatorRevert is Test {
    // minimal simulator implementation
    contract Sim is OAppPreCrimeSimulator {
        function _lzReceiveSimulate(
            Origin calldata,
            bytes32,
            bytes calldata,
            address,
            bytes calldata
        ) internal override {}

        function isPeer(uint32, bytes32) public pure override returns (bool) {
            return true;
        }
    }

    // caller implementing IPreCrime.buildSimulationResult()
    contract Caller is IPreCrime {
        Sim sim;
        constructor(Sim _sim) { sim = _sim; }

        function trigger() external {
            InboundPacket[] memory packets = new InboundPacket[](0);
            sim.lzReceiveAndRevert(packets);
        }

        function buildSimulationResult() external pure override returns (bytes memory) {
            return abi.encode("ok");
        }
    }

    function testExploit_precrime_simulator_revert_Idea1() public {
        Sim sim = new Sim();
        Caller caller = new Caller(sim);
        bytes memory result = abi.encode("ok");
        vm.expectRevert(abi.encodeWithSelector(IOAppPreCrimeSimulator.SimulationResult.selector, result));
        caller.trigger();
    }
}
