#include "./testMain.fc";
#include "../src/funC++/classlib.fc";
#include "../src/funC++/stringlib.fc";
#include "../src/funC++/utils.fc";

#include "../src/funC++/actions/event.fc";
#include "../src/funC++/actions/sendJettons.fc";
#include "../src/funC++/actions/call.fc";
#include "../src/funC++/actions/deploy.fc";
#include "../src/funC++/actions/dispatch.fc";
#include "../src/funC++/actions/payment.fc";
#include "../src/funC++/actions/RawCall.fc";

;;; ===============================INTERFACE FUNCTIONS===========================
int _callCheckPermissions(int op, cell $md) impure;

;;; ===============================BASE TEST INTERFACE IMPLEMENTATIONS===========================

;; authenticates and initializes a base storage for an LZ contract
() forceAuthenticate(int base_storage_idx) impure;

cell createInitializedStorage() impure;

cell baseTest::prepare(tuple args) impure {
    return createInitializedStorage();
}

;;; ===============================HELPER FUNCTIONS===========================
() spoofCaller(int address_hashpart) impure inline {
    setCaller(address_hashpart);
}

;;; ===============================TEST HANDLERS===============================
;; An empty test, when inserted at the top of a test list it allows initialization of storage
;; then returns success. Helps to avoid OOG for big contracts
(int, slice) initializeTestStorage(cell $storage) impure {
    return (TEST_SUCCESS, "");
}

;; int TEST_SUCCESS or TEST_FAILURE, slice (optional) error_message
(int, slice) test::handler::shouldPass((cell -> tuple) handler, cell $md, tuple expectedActions, cell $expectedStorage, tuple expectedTxnContext) impure {
    ;; Checkpoint the current gas meter
    int start = get_gas_consumed();

    ;; Run the actual handler
    tuple actions = handler($md);

    ;; Optionally profile gas
    if (do_profile) {
        ;; Should not inline gasConsumed because the string construction costs gas
        int gasConsumed = get_gas_consumed() - start;
        ~strdump(base_error_msg.str::concat(" consumed gas: ").str::concatInt(gasConsumed));
    }

    ;; Check the number of actions matches the expected
    int numActions = actions.tlen();
    if (numActions != expectedActions.tlen()) {
        return (
            TEST_FAILED,
            "action length incorrect:"
                .str::concatInt(actions.tlen())
                .str::concat(" !== ")
                .str::concatInt(expectedActions.tlen())
        );
    }

    if (actions.int_at(0) != expectedActions.int_at(0)) {
        return (TEST_FAILED, "action value outflow incorrect");
    }

    ;; Check that each action matches the expected action
    int index = 1;
    int terminalActionEncountered = false;
    tuple terminalIndices = empty_tuple();
    while (index < numActions) {
        tuple actualAction = actions.tuple_at(index);
        tuple expectedAction = expectedActions.tuple_at(index);
        if (actualAction.int_at(0) != expectedAction.int_at(0)) {
            test::throwError("action type incorrect: ".str::concatInt(index));
        }
        int actionType = actualAction.int_at(0);
        int equal = false;
        int isCurrentActionTerminal = false;

        if (actionType == action::deploy::NAME) {
            terminalIndices = terminalIndices.tpush(index);
            equal = action::deploy::equals(actualAction, expectedAction);
            isCurrentActionTerminal = true;
        } elseif (actionType == action::call::NAME) {
            terminalIndices = terminalIndices.tpush(index);
            equal = action::call::equals(actualAction, expectedAction);
            isCurrentActionTerminal = true;
        } elseif (actionType == action::dispatch::NAME) {
            equal = action::dispatch::equals(actualAction, expectedAction);
        } elseif (actionType == action::payment::NAME) {
            equal = action::payment::equals(actualAction, expectedAction);
        } elseif (actionType == action::event::NAME) {
            equal = action::event::equals(actualAction, expectedAction);
        } elseif (actionType == action::sendJettons::NAME) {
            equal = action::sendJettons::equals(actualAction, expectedAction);
            isCurrentActionTerminal = true;
        } elseif (actionType == action::rawCall::NAME) {
            equal = action::rawCall::equals(actualAction, expectedAction);
            isCurrentActionTerminal = true;
        }
        ifnot (equal) {
            test::throwError("action incorrect: ".str::concatInt(index));
        }
        if (terminalActionEncountered & (~ isCurrentActionTerminal)) { 
            test::throwError("terminal before non-terminal: ".str::concatInt(index));
        }
        index += 1;
        terminalActionEncountered = terminalActionEncountered | isCurrentActionTerminal;
    }
    if (terminalIndices.tlen() > 1) {
        test::throwError("Multiple terminal actions");
    }
    ;; Check that the storage after running the handler matches the expected storage
    if ($expectedStorage.cl::hash() != getContractStorage().cl::hash()) {
        ~strdump("Checking individual fields");
        int wrongField = compareObjectFields(getContractStorage(), $expectedStorage);
        if (wrongField == INVALID_CLASS_MEMBER) {
            return (
                TEST_FAILED,
                "Storage and expected storage not of the same type"
            );
        } elseif (wrongField != -1) {
            return (
                TEST_FAILED,
                "malformed field ".str::concatInt(wrongField)
            );
        }
    }

    if (expectedTxnContext.tlen() != txnContext.tlen()) {
        return (TEST_FAILED, "malformed txn context");
    }
    ;; check context
    int index = 0;
    while (index < txnContext.tlen()) {
        int mismatch = false;
        if (txnContext.at(index).is_int()) {
            mismatch = (txnContext.int_at(index) != expectedTxnContext.int_at(index));
        } elseif (txnContext.at(index).is_cell()) {
            mismatch = (txnContext.cell_at(index).cell_hash() != expectedTxnContext.cell_at(index).cell_hash());
        } elseif (txnContext.at(index).is_slice()) {
            mismatch = (~ txnContext.slice_at(index).equal_slice_bits(expectedTxnContext.slice_at(index)));
        } else {
            mismatch = (~ txnContext.cell_at(index).cl::hash() == expectedTxnContext.cell_at(index).cl::hash());
        }
        if (mismatch) {
            return (TEST_FAILED, "txn context mismatch at index".str::concatInt(index));
        }
        index += 1;
    }

    ;; If all checks pass, return success
    return (TEST_SUCCESS, "");
}

(int, slice) test::handler::shouldFail((cell -> tuple) fn, cell $md, int expected_error) impure {
    int failed = false;
    try {
        if (fn($md).tlen() >= 0) {
            failed = true;
            return (TEST_FAILED, "test::handler::shouldFail never throws");
        }
    } catch(x, n) {
        if (n != expected_error) {
            return (
                TEST_FAILED,
                "actual error: "
                    .str::concatInt(n)
                    .str::concat(" != expected: ")
                    .str::concatInt(expected_error)
            );
        }
    }

    return (TEST_SUCCESS, "");
}

(int, slice) test::permissions::shouldPass(int op, cell $md) impure {
    int failed = false;
    try {
        _callCheckPermissions(op, $md);
    } catch(x, n) {
        failed = true;
    }
    return failed ? (TEST_FAILED, "permissions check should not have thrown") : (TEST_SUCCESS, "");
}

(int, slice) test::permissions::shouldFail(int op, cell $md) impure {
    int failed = false;
    try {
        _callCheckPermissions(op, $md);
        failed = true;
    } catch(x, n) {
        ;; Catch is a function that executes in its own context
        ;; so if you try to return here, it will actually
        ;; return execution to the try block, not the caller of test::permissions::shouldFail
    }
    return failed ? (TEST_FAILED, "permissions check should have thrown") : (TEST_SUCCESS, "");
}
