#include "../src/funC++/constants.fc";
#include "../src/protocol/msglibs/ultralightnode/uln/interface.fc";
;;; =============addresses to be used in tests====================
const int CONTROLLER_ADDRESS = 1968;
const int ENDPOINT_ADDRESS = 1969;
const int CHANNEL_ADDRESS = 1970;
const int ULN_MANAGER_ADDRESS = 1971;
const int ULN_ADDRESS = 1972;
const int ULN_CONNECTION_ADDRESS = 1973;
const int ATTACKER_ADDRESS = 1974;
const int ARBITRARY_ADDRESS = 1975;
const int EXECUTOR = 1976;
const int ADMIN_ONE_ADDRESS = 1977;
const int ADMIN_TWO_ADDRESS = 1978;
const int TENTATIVE_OWNER_ADDRESS = 1979;

;; Can be used for both packet_send and packet_receive
const int PACKET_ADDRESS = 1980;
;; These are to be used agnostically of send vs receive
const int MSGLIB_MANAGER_ADDRESS = 1981;
const int MSGLIB_ADDRESS = 1982;
const int MSGLIB_CONNECTION_ADDRESS = 1983;
const int SEND_MSGLIB_MANAGER_ADDRESS = 1984;
const int SEND_MSGLIB_ADDRESS = 1985;
const int SEND_MSGLIB_CONNECTION_ADDRESS = 1986;
const int RECEIVE_MSGLIB_MANAGER_ADDRESS = 1987;
const int RECEIVE_MSGLIB_ADDRESS = 1988;
const int RECEIVE_MSGLIB_CONNECTION_ADDRESS = 1989;
const int TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS = 1990;
const int TIMEOUT_RECEIVE_MSGLIB_ADDRESS = 1991;
const int TIMEOUT_RECEIVE_MSGLIB_CONNECTION_ADDRESS = 1992;
const int PROTOCOL_ADMIN_ZRO_WALLET_ADDRESS = 1993;
const int NEW_CONTROLLER_OWNER_ADDRESS = 1994;
const int SRC_OAPP = 1995;
const int DST_OAPP = 1996;
const int PLANNER_ADDRESS = 1997;
const int NEW_WORKER_OWNER_ADDRESS = 1998;
const int PROXY_ADDRESS = 1999;

;;; =====================non-address constants to be used in tests====================
const int SRC_EID = 30101;
const int DST_EID = 30102;
const int DST_V1_EID = 102;
const int BAD_EID = 103;

const int QUORUM = 0;

const int COUNTER_ID = 104;

const int INITIAL_DEPOSIT = 10000;

const int NONCE = 42;
const int FIRST_UNEXECUTED_NONCE = 40;
const int LZ_RECEIVE_PREPARE_GAS = 500000;

const int MSG_TYPE = 1;

const int RESERVE_NANOS = 2059;
const int NATIVE_FEE = 100;
const int ZRO_FEE = 101;
const int RENT_SECONDS = 10 * 60;

const int OAPP_QUOTE_UUID = 122;

const int OP::RANDOM = 720;

const int NONCE_BYTE_OFFSET = 1;
const int NONCE_BYTES = 8;
const int GUID_BYTE_OFFSET = 81;
const int GUID_BYTES = 32;

const int SML_MANAGER_VERSION = 1;

const int WORKER_ADDRESS = 0xd00d;
const int ADMIN_WORKER_ADDRESS = 0xc001d00d;

const int MOCK_FEE = 100;

const int EXECUTION_VALUE_NANOS = 100000000;

const int NATIVE_DROP_MAX_TOTAL = 1000000;
const int NATIVE_DROP_AMOUNT = 101;

const int MOCK_ULN_TREASURY_CLAIM_AMOUNT = 2002;
const int MOCK_CLAIM_AMOUNT = 1003;

const int DEFAULT_MIN_COMMIT_PACKET_GAS = 1000 * 1000;
const int CUSTOM_MIN_COMMIT_PACKET_GAS = DEFAULT_MIN_COMMIT_PACKET_GAS * 2;
const int DEFAULT_WORKER_QUOTE_GAS_LIMIT = 100 * 1000;
const int CUSTOM_WORKER_QUOTE_GAS_LIMIT = DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2;
const int DEFAULT_CONFIRMATIONS = 20;
const int CUSTOM_CONFIRMATIONS = DEFAULT_CONFIRMATIONS * 2;
const int CUSTOM_MAX_MESSAGE_BYTES = 40;
const int DEFAULT_MAX_MESSAGE_BYTES = 4096;

;; MAX_U8 == (UlnReceiveConfig::CONST::NIL_DVN_COUNT + 1)
const int CUSTOM_REQUIRED_DVN0_ADDRESS = EXECUTOR + MAX_U8;
const int CUSTOM_OPTIONAL_DVN0_ADDRESS = CUSTOM_REQUIRED_DVN0_ADDRESS + MAX_U8;
const int CUSTOM_PRICE_FEED_ADDRESS = 42069;
const int DEFAULT_PRICE_FEED_ADDRESS = CUSTOM_PRICE_FEED_ADDRESS + 1;

const int DEFAULT_REQUIRED_DVN0_ADDRESS = CUSTOM_OPTIONAL_DVN0_ADDRESS + MAX_U8;
const int DEFAULT_OPTIONAL_DVN0_ADDRESS = DEFAULT_REQUIRED_DVN0_ADDRESS + MAX_U8;
const int NULL_DVN0_ADDRESS = NULLADDRESS;

const int DEFAULT_EXECUTOR = EXECUTOR + 1;
const int CUSTOM_EXECUTOR = EXECUTOR + 2;

const int DEFAULT_REQUIRED_DVNS = 2;
const int DEFAULT_OPTIONAL_DVNS = 0;
const int DEFAULT_OPTIONAL_DVN_THRESHOLD = DEFAULT_OPTIONAL_DVNS;

const int PACKET_HASH = 1234;

const int RENT_NANOS = 1055;

const int SEND_ID = 4321;

const int DEFAULT_PRICE_RATIO = 10;
const int DEFAULT_GAS_PRICE_IN_UNIT = 11;
const int DEFAULT_GAS_PER_BYTE = 12;
const int DEFAULT_NATIVE_PRICE_USD = 13;

const int TREASURY_FEE_BPS = 100;

const int CUSTOM_DVN_DEFAULT_FEELIB_NATIVE_FEE = 58823979;
const int CUSTOM_EXECUTOR_DEFAULT_FEELIB_NATIVE_FEE = 58823622;

const int CUSTOM_DVN_ARB_FEELIB_NATIVE_FEE = 58824172;
const int CUSTOM_EXECUTOR_ARB_FEELIB_NATIVE_FEE = 58823633;

const int CUSTOM_DVN_OP_FEELIB_NATIVE_FEE = 47619626;
const int CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE = 47619106;

const int CUSTOM_PRICE_RATIO = 1851851;
const int CUSTOM_GAS_PRICE_IN_UNIT = 36000000000;
const int CUSTOM_GAS_PER_BYTE = 1000;
const int CUSTOM_NATIVE_PRICE_USD = 17;

const int DEFAULT_ARB_GAS_PER_L2_TX = 171;
const int DEFAULT_ARB_GAS_PER_L1_CALL_DATA_BYTE = 700;

const int CUSTOM_ARB_GAS_PER_L2_TX = 156;
const int CUSTOM_ARB_GAS_PER_L1_CALL_DATA_BYTE = 913;

const int DEFAULT_OP_PRICE_RATIO = 111222;
const int DEFAULT_OP_GAS_PRICE_IN_UNIT = 1000050000;
const int DEFAULT_OP_GAS_PER_BYTE = 750;
const int DEFAULT_OP_NATIVE_PRICE_USD = 19;

const int CUSTOM_OP_PRICE_RATIO = 1951951;
const int CUSTOM_OP_GAS_PRICE_IN_UNIT = 12000000000;
const int CUSTOM_OP_GAS_PER_BYTE = 800;
const int CUSTOM_OP_NATIVE_PRICE_USD = 21;

const int EXECUTOR_FEELIB_LZ_RECEIVE_BASE_GAS = 100000;
const int EXECUTOR_FEELIB_MULTIPLIER_BPS = 1;
const int EXECUTOR_FEELIB_FLOOR_MARGIN_USD = 1;
const int EXECUTOR_FEELIB_NATIVE_CAP = 1000000000000;
const int EXECUTOR_FEELIB_LZ_COMPOSE_BASE_GAS = 1;