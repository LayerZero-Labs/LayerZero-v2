#include "../src/funC++/classlib.fc";
#include "../src/funC++/txnContext.fc";

global slice base_error_msg;
;; const int do_profile = -1; ;; doesn't compile with true
const int do_profile = 0; ;; doesn't compile with false

const int TEST_SUCCESS = -1;
const int TEST_FAILED = 0;

const int TEST_FN_IDX = 0;
const int TEST_NAME_IDX = 1;

;;; ===============================INTERFACE FUNCTIONS===========================
slice _testName();
tuple baseTest::getTests() impure;
cell baseTest::prepare(tuple testCase) impure inline;

;;; ===============================HELPER FUNCTIONS===========================
const int DONE = 1;
() emitDone() impure inline {
    var msg = begin_cell()
        .store_uint (12, 4) ;; ext_out_msg_info$11 src:MsgAddressInt ()
        .store_uint (1, 2)
        .store_uint (256, 9)
        .store_uint(DONE, 256)
        .store_uint(0, 64 + 32 + 2) ;; created_lt, created_at, init:Maybe, body:Either
        .end_cell();
    send_raw_message(msg, 0);
}

() test::throwError(slice msg) impure {
    ~strdump(_testName()
        .str::concat(": ")
        .str::concat(base_error_msg)
        .str::concat(": ")
        .str::concat(msg)
    );
    throwError(
        _testName()
            .str::concat(": ")
            .str::concat(base_error_msg)
            .str::concat(": ")
            .str::concat(msg)
    );
}

() test::throwErrorUnless(int condition, slice msg) impure {
    ifnot (condition) {
        test::throwError(msg);
    }
}

slice get_test_name(int index) impure method_id {
    tuple tests = baseTest::getTests();
    tuple testCase = tests.at(index);
    return testCase.slice_at(TEST_NAME_IDX);
}

;;; ===============================Txn Context Manipulation===========================

() setCaller(int caller) impure inline {
    txnContext~tset(_CALLER, caller);
}

() setContractBalance(int balance) impure inline {
    txnContext~tset(_BALANCE, balance);
}

;;; Returns the current value of `c7`.
tuple _get_c7() impure asm "c7 PUSH";

;;; Updates the current value of `c7`.
() _set_c7(tuple c) impure asm "c7 POP";

;; *Testing function only. Do not use in production code!*
() setNewTime(int newTime) impure {
    tuple c7 = _get_c7();
    _set_c7(
        c7.tset(0,
            c7.tuple_at(0)
                .tset(3, newTime)
        )
    );
}


;;; ===============================MAIN DRIVER FOR ALL TESTS===========================
() main(int myBalance, int msgValue, cell inMsgFull, slice inMsgBody) impure {
    ;; ignore empty messages
    if (inMsgBody.slice_empty?()) {
        return ();
    }

    initTxnContext(
        myBalance,
        msgValue,
        inMsgFull,
        inMsgBody
    );

    base_error_msg = "base_error_msg NOT set... ";

    int index = getOpcode();

    ;; Allow the test framework to prank arbitrary caller
    setCaller(getOrigin());

    tuple tests = baseTest::getTests();
    if (index >= tests.tlen()) {
        emitDone();
    } else {
        tuple testCase = tests.at(index);
        var test_fn = testCase.at(TEST_FN_IDX);
        base_error_msg = testCase.at(TEST_NAME_IDX);
        cell input = baseTest::prepare(testCase);
        cell $storage = getContractStorage();
        (int success, slice reason) = test_fn(input);
        setContractStorage($storage);
        test::throwErrorUnless(success == TEST_SUCCESS, reason);
    }
}

(int, slice) test::shouldBeTrue(int condition) impure {
    ifnot (condition) {
        return (TEST_FAILED, "test::shouldBeTrue");
    } else {
        return (TEST_SUCCESS, "");
    }
}

(int, slice) test::shouldBeFalse(int condition) impure {
    return test::shouldBeTrue(condition == false);
}
