#include "../../funC++/classlib.fc";

;; required storage name
const int md::MessagingReceipt::NAME = "MsgReceipt"u;

;; field names
const int md::MessagingReceipt::lzSend = 0;
const int md::MessagingReceipt::nativeFeeActual = 1;
const int md::MessagingReceipt::zroFeeActual = 2;
const int md::MessagingReceipt::errorCode = 3;

cell md::MessagingReceipt::New(cell $lzSend, int nativeFee, int zroFee, int errorCode) impure inline method_id {
    return cl::declare(
        md::MessagingReceipt::NAME,
        unsafeTuple([
            [cl::t::objRef, $lzSend],   ;; md::MessagingReceipt::lzSend
            [cl::t::coins, nativeFee],  ;; md::MessagingReceipt::nativeFeeActual
            [cl::t::coins, zroFee],     ;; md::MessagingReceipt::zroFeeActual
            [cl::t::uint16, errorCode]  ;; md::MessagingReceipt::errorCode
        ])
    );
}


;; ========================== Object Builders ==========================

const int md::MessagingReceipt::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 4);
const int md::MessagingReceipt::_headerFillerBits = _HEADER_WIDTH - md::MessagingReceipt::_headerInfoBits;
const int md::MessagingReceipt::_headerInfo = 1727210451775936897226519655289233983117527419;

cell md::MessagingReceipt::build(cell $lzSend, int nativeFee, int zroFee, int errorCode) impure inline {
    return begin_cell()
        .store_uint(md::MessagingReceipt::_headerInfo, md::MessagingReceipt::_headerInfoBits) ;; header info
        .store_ones(md::MessagingReceipt::_headerFillerBits)                                  ;; header filler
        .store_ref($lzSend)                                                                   ;; ref[0]
        .store_uint128(nativeFee)                                                             ;; coins[1]
        .store_uint128(zroFee)                                                                ;; coins[2]
        .store_uint16(errorCode)                                                              ;; uint16[3]
        .end_cell();
}

;; ========================== Object Accessors ==========================

const int md::MessagingReceipt::_nativeFeeOffset = _HEADER_WIDTH;
const int md::MessagingReceipt::_zroFeeOffset = _HEADER_WIDTH + 128;
const int md::MessagingReceipt::_errorCodeOffset = _HEADER_WIDTH + 256;

;; this function is unused by the protocol but will be used by OApps
(int, cell) md::MessagingReceipt::getErrorCodeAndLzSend(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadUint16At(md::MessagingReceipt::_errorCodeOffset),
        selfSlice.preloadRefAt(0)
    );
}