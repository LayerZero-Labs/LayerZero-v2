#include "../lz/Packet.fc";

;; required storage name
const int md::LzReceiveStatus::NAME = "LzRecvSts"u;

;; field names
const int md::LzReceiveStatus::success = 0;
const int md::LzReceiveStatus::nonce = 1;
const int md::LzReceiveStatus::value = 2;
const int md::LzReceiveStatus::extraData = 3;
const int md::LzReceiveStatus::reason = 4;
const int md::LzReceiveStatus::sender = 5;
const int md::LzReceiveStatus::packet = 6;
const int md::LzReceiveStatus::executionStatus = 7;

cell md::LzReceiveStatus::New(int success, int nonce) impure inline method_id {
    return cl::declare(
        md::LzReceiveStatus::NAME,
        unsafeTuple([
            [cl::t::bool, success],             ;; md::LzReceiveStatus::success
            [cl::t::uint64, nonce],             ;; md::LzReceiveStatus::nonce
            [cl::t::coins, 0],                  ;; md::LzReceiveAlert::value
            [cl::t::cellRef, empty_cell()],     ;; md::LzReceiveAlert::extraData
            [cl::t::cellRef, empty_cell()],     ;; md::LzReceiveAlert::reason
            [cl::t::address, NULLADDRESS],      ;; md::LzReceiveAlert::sender
            [cl::t::objRef, cl::nullObject()],  ;; md::LzReceiveAlert::packet
            [cl::t::uint8, 0]                   ;; md::LzReceiveAlert::executionStatus
        ])
    );
}

cell md::LzReceiveStatus::NewFull(
    int success,
    int nonce,
    int value,
    cell extraData,
    cell reason,
    int sender,
    cell $packet,
    int executionStatus
) impure inline method_id {
    lz::Packet::_assertValidLinkedList(extraData, lz::Packet::MAX_RECEIVE_MESSAGE_CELLS);
    lz::Packet::_assertValidLinkedList(reason, lz::Packet::MAX_RECEIVE_MESSAGE_CELLS);
    return cl::declare(
        md::LzReceiveStatus::NAME,
        unsafeTuple([
            [cl::t::bool, success],         ;; md::LzReceiveStatus::success
            [cl::t::uint64, nonce],         ;; md::LzReceiveStatus::nonce
            [cl::t::coins, value],          ;; md::LzReceiveAlert::sendRequestId
            [cl::t::cellRef, extraData],    ;; md::LzReceiveAlert::extraData
            [cl::t::cellRef, reason],       ;; md::LzReceiveAlert::reason
            [cl::t::address, sender],       ;; md::LzReceiveAlert::sender
            [cl::t::objRef, $packet],       ;; md::LzReceiveAlert::packet
            [cl::t::uint8, executionStatus] ;; md::LzReceiveAlert::executionStatus
        ])
    );
}

;; ====================== Object Builders =====================

const int md::LzReceiveStatus::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 8);
const int md::LzReceiveStatus::_headerFillerBits = _HEADER_WIDTH - md::LzReceiveStatus::_headerInfoBits;
const int md::LzReceiveStatus::_headerInfo = 31461150238884194531671275676859177915085721713836393515717807231;

;; this function is unused by the protocol but will be used by OApps
cell md::LzReceiveStatus::build(
    int success,
    int nonce
) impure inline method_id {
    return begin_cell()
        .store_uint(md::LzReceiveStatus::_headerInfo, md::LzReceiveStatus::_headerInfoBits) ;; header info
        .store_ones(md::LzReceiveStatus::_headerFillerBits)                                 ;; header filler
        .store_bool(success)                                                                 ;; bool[0]
        .store_uint64(nonce)                                                                 ;; uint64[1]
        .store_uint128(0)                                                                    ;; coins[2]
        .store_uint256(NULLADDRESS)                                                          ;; address[3]
        .store_uint8(0)                                                                      ;; uint8[4]
        .store_ref(cl::nullObject())                                                         ;; ref[0]
        .store_ref(cl::nullObject())                                                         ;; ref[1]
        .store_ref(
            begin_cell()
                .store_ref(cl::nullObject())                                                 ;; ref[2]
            .end_cell()
        )
        .end_cell();
}


;; ====================== Object Multi-Getters =====================

const int md::LzReceiveStatus::_successOffset = _HEADER_WIDTH;
const int md::LzReceiveStatus::_nonceOffset = md::LzReceiveStatus::_successOffset + 1;
const int md::LzReceiveStatus::_valueOffset = md::LzReceiveStatus::_nonceOffset + 64;
const int md::LzReceiveStatus::_senderOffset = md::LzReceiveStatus::_valueOffset + 128;
const int md::LzReceiveStatus::_executionStatusOffset = md::LzReceiveStatus::_senderOffset + 256;
const int md::LzReceiveStatus::_extraDataOffset = md::LzReceiveStatus::_executionStatusOffset + 8;

(int, int) md::LzReceiveStatus::getSuccessAndNonce(cell $self) impure inline {
    slice $selfSlice = $self.begin_parse(); 
    return (
        $selfSlice.preloadBoolAt(md::LzReceiveStatus::_successOffset),
        $selfSlice.preloadUint64At(md::LzReceiveStatus::_nonceOffset)
    );
}

;; ========================== Sanitize ==========================

cell md::LzReceiveStatus::NewFull::sanitize(cell $self) impure {
    int success = $self.cl::get<bool>(md::LzReceiveStatus::success);
    int nonce = $self.cl::get<uint64>(md::LzReceiveStatus::nonce);
    int value = $self.cl::get<coins>(md::LzReceiveStatus::value);
    cell extraData = $self.cl::get<cellRef>(md::LzReceiveStatus::extraData);
    cell reason = $self.cl::get<cellRef>(md::LzReceiveStatus::reason);
    int sender = $self.cl::get<address>(md::LzReceiveStatus::sender);
    cell $packet = $self.cl::get<objRef>(md::LzReceiveStatus::packet);
    int executionStatus = $self.cl::get<uint8>(md::LzReceiveStatus::executionStatus);

    return md::LzReceiveStatus::NewFull(
        success,
        nonce,
        value,
        extraData,
        reason,
        sender,
        $packet,
        executionStatus
    );
}