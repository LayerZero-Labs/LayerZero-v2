#include "../../funC++/classlib.fc";

;; required storage name
const int md::OptionsExtended::NAME = "OptionsExt"u;

;; field names
const int md::OptionsExtended::eid = 0;
const int md::OptionsExtended::msgType = 1;
const int md::OptionsExtended::options = 2;

cell md::OptionsExtended::New(int eid, int msgType, cell $options) impure inline method_id {
    return cl::declare(
        md::OptionsExtended::NAME,
        unsafeTuple([
            [cl::t::uint32, eid],       ;; md::OptionsExtended::eid
            [cl::t::uint32, msgType],   ;; md::OptionsExtended::msgType
            [cl::t::objRef, $options]   ;; md::OptionsExtended::options
        ])
    );
}

const int md::OptionsExtended::_eidOffset = _HEADER_WIDTH;
const int md::OptionsExtended::_msgTypeOffset = md::OptionsExtended::_eidOffset + 32;

(int, int, cell) md::OptionsExtended::deserialize(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadUint32At(md::OptionsExtended::_eidOffset),
        selfSlice.preloadUint32At(md::OptionsExtended::_msgTypeOffset),
        selfSlice.preloadRefAt(0)
    );
}