#include "../../funC++/classlib.fc";

;; required storage name
const int md::MdObj::NAME = "MdObj"u;

;; field names
const int md::MdObj::md = 0;
const int md::MdObj::obj = 1;

cell md::MdObj::New(cell $md, cell $obj) impure inline method_id {
    return cl::declare(
        md::MdObj::NAME,
        unsafeTuple([
            [cl::t::objRef, $md],   ;; md::MdObj::md
            [cl::t::objRef, $obj]   ;; md::MdObj::obj
        ])
    );
}


;; ========================== Object Builders ==========================
const int md::MdObj::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 2);
const int md::MdObj::_headerFillerBits = _HEADER_WIDTH - md::MdObj::_headerInfoBits;
const int md::MdObj::_headerInfo = 22842038364999638994941;

cell md::MdObj::build(cell $md, cell $obj) impure inline {
    return begin_cell()
        .store_uint(md::MdObj::_headerInfo, md::MdObj::_headerInfoBits) ;; header info
        .store_ones(md::MdObj::_headerFillerBits)                       ;; header filler
        .store_ref($md)                                                  ;; ref[0]
        .store_ref($obj)                                                 ;; ref[1]
        .end_cell();
} 

;; ========================== Object Multi-Getters ==========================

cell md::MdObj::getMd(cell $self) impure inline {
    return $self.cellPreloadRefAt(0);
}

cell md::MdObj::getObj(cell $self) impure inline {
    return $self.cellPreloadRefAt(1);
}

(cell, cell) md::MdObj::deserialize(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadRefAt(0),
        selfSlice.preloadRefAt(1)
    );
}

cell md::MdObj::sanitize(cell $mdObj) impure {
    cell $md = $mdObj.cl::get<objRef>(md::MdObj::md);
    cell $obj = $mdObj.cl::get<objRef>(md::MdObj::obj);

    return md::MdObj::New($md, $obj);
}