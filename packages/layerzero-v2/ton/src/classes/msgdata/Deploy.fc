#include "../../funC++/classlib.fc";

;; required storage name
const int md::Deploy::NAME = "deploy"u;

;; field names
const int md::Deploy::initialDeposit = 0;
const int md::Deploy::dstEid = 1;
const int md::Deploy::dstOApp = 2;
const int md::Deploy::extraInfo = 3;

cell md::Deploy::New(int initialDeposit, int dstEid, int dstOApp) impure inline method_id {
    return cl::declare(
        md::Deploy::NAME,
        unsafeTuple([
            [cl::t::coins, initialDeposit],    ;; md::Deploy::initialDeposit
            [cl::t::uint32, dstEid],           ;; md::Deploy::dstEid
            [cl::t::uint256, dstOApp],         ;; md::Deploy::dstOApp
            [cl::t::objRef, cl::nullObject()]  ;; md::Deploy::extraInfo
        ])
    );
}

cell md::Deploy::NewWithExtraInfo(
    int initialDeposit,
    int dstEid,
    int dstOApp,
    cell $extraInfo
) method_id {
    return md::Deploy::New(initialDeposit, dstEid, dstOApp)
        .cl::set(md::Deploy::extraInfo, $extraInfo);
}

;; ========================== Sanitize ==========================

cell md::Deploy::sanitize(cell $self) impure {
    int initialDeposit = $self.cl::get<coins>(md::Deploy::initialDeposit);
    int dstEid = $self.cl::get<uint32>(md::Deploy::dstEid);
    int dstOApp = $self.cl::get<uint256>(md::Deploy::dstOApp);

    return md::Deploy::New(initialDeposit, dstEid, dstOApp);
}

cell md::Deploy::NewWithExtraInfo::sanitize(cell $self) impure {
    int initialDeposit = $self.cl::get<coins>(md::Deploy::initialDeposit);
    int dstEid = $self.cl::get<uint32>(md::Deploy::dstEid);
    int dstOApp = $self.cl::get<uint256>(md::Deploy::dstOApp);
    cell $extraInfo = $self.cl::get<objRef>(md::Deploy::extraInfo);

    return md::Deploy::NewWithExtraInfo(initialDeposit, dstEid, dstOApp, $extraInfo);
}