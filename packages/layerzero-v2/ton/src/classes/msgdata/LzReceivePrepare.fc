#include "../../funC++/classlib.fc";

;; required storage name
const int md::LzReceivePrepare::NAME = "lzrecvprep"u;

;; field names
const int md::LzReceivePrepare::nonce = 0;
const int md::LzReceivePrepare::nanotons = 1;

cell md::LzReceivePrepare::New(int nonce, int nanotons) impure method_id {
    return cl::declare(
        md::LzReceivePrepare::NAME,
        unsafeTuple([
            [cl::t::uint64, nonce], ;; md::LzReceivePrepare::nonce
            [cl::t::coins, nanotons] ;; md::LzReceivePrepare::nanotons
        ])
    );
}

;; ====================== Object Getters =====================

const int md::LzReceivePrepare::_nonceOffset = _HEADER_WIDTH;
const int md::LzReceivePrepare::_nanotonsOffset = md::LzReceivePrepare::_nonceOffset + 64;

;; this function is unused by the protocol but will be used by OApps
int md::LzReceivePrepare::getNanotons(cell $self) impure inline {
    return $self.cellPreloadCoinsAt(md::LzReceivePrepare::_nanotonsOffset);
}

;; ====================== Object Multi-Getters =====================

(int, int) md::LzReceivePrepare::deserialize(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadUint64At(md::LzReceivePrepare::_nonceOffset),
        selfSlice.preloadCoinsAt(md::LzReceivePrepare::_nanotonsOffset)
    );
}
