#include "../../funC++/classlib.fc";

;; required storage name
const int md::MdAddress::NAME = "MdAddr"u;

;; field names
const int md::MdAddress::md = 0;
const int md::MdAddress::address = 1;

cell md::MdAddress::New(cell $md, int address) inline method_id {
    return cl::declare(
        md::MdAddress::NAME,
        unsafeTuple([
            [cl::t::objRef, $md],       ;; md::MdAddress::md
            [cl::t::address, address]   ;; md::MdAddress::address
        ])
    );
}

;; ========================== Object Builders ==========================

const int md::MdAddress::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 2);
const int md::MdAddress::_headerFillerBits = _HEADER_WIDTH - md::MdAddress::_headerInfoBits;
const int md::MdAddress::_headerInfo = 5847545689438192720283003;

cell md::MdAddress::build(cell $md, int address) impure inline method_id {
    return begin_cell()
        .store_uint(md::MdAddress::_headerInfo, md::MdAddress::_headerInfoBits) ;; header info
        .store_ones(md::MdAddress::_headerFillerBits)                          ;; header filler
        .store_uint256(address)                                                 ;; md::MdAddress::address
        .store_ref($md)                                                         ;; md::MdAddress::md = ref[0]
        .end_cell();
}

;; ========================== Object Getters ==========================

const int md::MdAddress::_addressOffset = _HEADER_WIDTH;

cell md::MdAddress::getMd(cell $self) impure inline {
    return $self.cellPreloadRefAt(0);
}

;; ========================== Object Multi-Getters ==========================

(cell, int) md::MdAddress::deserialize(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadRefAt(0),
        selfSlice.preloadAddressAt(md::MdAddress::_addressOffset)
    );
}

;; ========================== Sanitize ==========================

cell md::MdAddress::sanitize(cell $self) impure inline_ref {
    int address = $self.cl::get<uint256>(md::MdAddress::address);
    cell $md = $self.cl::get<objRef>(md::MdAddress::md);

    return md::MdAddress::New($md, address);
}