#include "../../funC++/classlib.fc";

;; required storage name
const int md::PacketSent::NAME = "pktSent"u;

;; field names
const int md::PacketSent::nativeFee = 0;
const int md::PacketSent::zroFee = 1;
const int md::PacketSent::extraOptions = 2;
const int md::PacketSent::enforcedOptions = 3;
const int md::PacketSent::packetEncoded = 4;
const int md::PacketSent::nonce = 5;
const int md::PacketSent::msglibAddress = 6;
const int md::PacketSent::msglibSendEvents = 7;

cell md::PacketSent::New(
    int nativeFee,
    int zroFee,
    cell $extraOptions,
    cell $enforcedOptions,
    cell packetEncoded,
    int nonce,
    int msglibAddress,
    cell $msglibSendEvents
) impure inline method_id {
    return cl::declare(
        md::PacketSent::NAME,
        unsafeTuple([
            [cl::t::coins, nativeFee],          ;; md::PacketSent::nativeFee
            [cl::t::coins, zroFee],             ;; md::PacketSent::zroFee
            [cl::t::objRef, $extraOptions],     ;; md::PacketSent::extraOptions
            [cl::t::objRef, $enforcedOptions],  ;; md::PacketSent::enforcedOptions
            [cl::t::cellRef, packetEncoded],    ;; md::PacketSent::packetEncoded
            [cl::t::uint64, nonce],             ;; md::PacketSent::nonce
            [cl::t::address, msglibAddress],    ;; md::PacketSent::msglibAddress
            [cl::t::objRef, $msglibSendEvents]  ;; md::PacketSent::msglibEvents
        ])
    );
}

;; ========================== Object Builders ==========================

const int md::PacketSent::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 8);
const int md::PacketSent::_headerFillerBits = _HEADER_WIDTH - md::PacketSent::_headerInfoBits;
const int md::PacketSent::_headerInfo = 705670168524170966093988960735291442056898952154447392698365;

cell md::PacketSent::build(
    int nativeFee,
    int zroFee,
    cell $extraOptions,
    cell $enforcedOptions,
    cell packetEncoded,
    int nonce,
    int msglibAddress,
    cell $msglibSendEvents
) impure inline {
    return begin_cell()
        .store_uint(md::PacketSent::_headerInfo, md::PacketSent::_headerInfoBits)
        .store_ones(md::PacketSent::_headerFillerBits)
        .store_uint128(nativeFee)
        .store_uint128(zroFee)
        .store_uint64(nonce)
        .store_uint256(msglibAddress)
        .store_ref($extraOptions)
        .store_ref($enforcedOptions)
        .store_ref(
            begin_cell()
            .store_ref(packetEncoded)
            .store_ref($msglibSendEvents)
            .end_cell()
        )
        .end_cell();
}
