#include "../AddMsglib.fc";
#include "../MdAddress.fc";
#include "../MdObj.fc";
#include "../LzSend.fc";
#include "../ChannelNonceInfo.fc";
#include "../Deploy.fc";
#include "../ExtendedMd.fc";
#include "../LzReceivePrepare.fc";
#include "../LzReceiveStatus.fc";
#include "../MdEid.fc";
#include "../MessagingReceipt.fc";
#include "../MsglibSendCallback.fc";
#include "../Nonce.fc";
#include "../OptionsV1.fc";
#include "../OptionsV2.fc";
#include "../PacketId.fc";
#include "../PacketSent.fc";
#include "../../../../tests/baseSerdeTest.fc";
#include "../../../../tests/mocks.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/stdlib.fc";
#include "../../../funC++/testutils.fc";
#include "../../../funC++/utils.fc";
#include "../../../../tests/consts.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Msgdata Serde"; }

;; AddMsglib: Has 1 sanitize
(int, slice) Serde::md::AddMsglib::sanitize(cell $unused) impure {
    cell $addMsglib = md::AddMsglib::New(SEND_MSGLIB_MANAGER_ADDRESS, DST_OAPP);

    cell $sanitizedAddMsglib = md::AddMsglib::sanitize(
        _dupWithGarbage($addMsglib)
    );

    return test::build::equal($addMsglib, $sanitizedAddMsglib);
}

;; ChannelNonceInfo: Has 1 multi-getter (deserializer)
(int, slice) Serde::md::ChannelNonceInfo::deserialize(cell $unused) impure {
    cell $storage = md::ChannelNonceInfo::New(NONCE, FIRST_UNEXECUTED_NONCE);

    (int nonce, int firstUnexecutedNonce) = md::ChannelNonceInfo::deserialize($storage);

    return test::multiget::equal(
        $storage,
        unsafeTuple([
            md::ChannelNonceInfo::nonce,
            md::ChannelNonceInfo::firstUnexecutedNonce
        ]),
        unsafeTuple([
            nonce,
            firstUnexecutedNonce
        ])
    );
}

;; CoinsAmount: Has 1 sanitize
(int, slice) Serde::md::CoinsAmount::sanitize(cell $unused) impure {
    cell $coinsAmount = md::CoinsAmount::New(NATIVE_FEE);

    cell $sanitizedCoinsAmount = md::CoinsAmount::sanitize(
        _dupWithGarbage($coinsAmount)
    );

    return test::build::equal($coinsAmount, $sanitizedCoinsAmount);
}

;; Deploy Has 2 sanitizes
(int, slice) Serde::md::Deploy::sanitize(cell $unused) impure {
    cell $deploy = md::Deploy::New(NATIVE_FEE, DST_EID, DST_OAPP);

    cell $sanitizedDeploy = md::Deploy::sanitize(
        _dupWithGarbage($deploy)
    );

    return test::build::equal($deploy, $sanitizedDeploy);
}

(int, slice) Serde::md::Deploy::NewWithExtraInfo::sanitize(cell $unused) impure {
    cell $deploy = md::Deploy::NewWithExtraInfo(
        NATIVE_FEE,
        DST_EID,
        DST_OAPP,
        begin_cell().store_uint(1, 256).end_cell()
    );

    cell $sanitizedDeploy = md::Deploy::NewWithExtraInfo::sanitize(
        _dupWithGarbage($deploy)
    );

    return test::build::equal($deploy, $sanitizedDeploy);
}

;; ExtendedMd: Has 1 builder,
;;             Has 1 getters
;;             Has 2 multi-getter (deserializer)
;;             Has 1 sanitize
(int, slice) Serde::md::ExtendedMd::build(cell $unused) impure {
    cell $expected = md::ExtendedMd::New(
        MOCK_LZ_SEND(),
        MOCK_EP_CONFIG(true),
        DST_OAPP
    );

    return test::build::equal(
        $expected,
        md::ExtendedMd::build(
            MOCK_LZ_SEND(),
            MOCK_EP_CONFIG(true),
            DST_OAPP
        )
    );
}

(int, slice) Serde::md::ExtendedMd::getObj(cell $unused) impure {
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_LZ_SEND(),
        MOCK_EP_CONFIG(true),
        DST_OAPP
    );

    return test::getRef::equal(
        $mdExtended,
        md::ExtendedMd::getObj,
        md::ExtendedMd::obj
    );
}

(int, slice) Serde::md::ExtendedMd::getMdAndForwardingAddress(cell $unused) impure {
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_LZ_SEND(),
        MOCK_EP_CONFIG(true),
        DST_OAPP
    );

    (cell $md, int forwardingAddress) = md::ExtendedMd::getMdAndForwardingAddress($mdExtended);

    return test::multiget::equal(
        $mdExtended,
        unsafeTuple([md::ExtendedMd::md, md::ExtendedMd::forwardingAddress]),
        unsafeTuple([$md, forwardingAddress])
    );
}

(int, slice) Serde::md::ExtendedMd::deserialize(cell $unused) impure {
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_LZ_SEND(),
        MOCK_EP_CONFIG(true),
        DST_OAPP
    );

    (
        cell $md,
        cell $obj,
        int forwardingAddress
    ) = md::ExtendedMd::deserialize($mdExtended);

    return test::multiget::equal(
        $mdExtended,
        unsafeTuple([
            md::ExtendedMd::md,
            md::ExtendedMd::obj,
            md::ExtendedMd::forwardingAddress
        ]),
        unsafeTuple([
            $md,
            $obj,
            forwardingAddress
        ])
    );
}

(int, slice) Serde::md::ExtendedMd::sanitize(cell $unused) impure {
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_LZ_SEND(),
        MOCK_EP_CONFIG(true),
        DST_OAPP
    );

    cell $sanitizedMdExtended = md::ExtendedMd::sanitize(
        _dupWithGarbage($mdExtended)
    );

    return test::build::equal($mdExtended, $sanitizedMdExtended);
}

;; LzReceivePrepare: Has 1 getter
;;                   Has 1 multi-getter (deserializer)
(int, slice) Serde::md::LzReceivePrepare::getNanotons(cell $unused) impure {
    cell $lzReceivePrepare = md::LzReceivePrepare::New(NONCE, RESERVE_NANOS);

    return test::getData::equal(
        $lzReceivePrepare,
        md::LzReceivePrepare::getNanotons,
        md::LzReceivePrepare::nanotons
    );
}

(int, slice) Serde::md::LzReceivePrepare::deserialize(cell $unused) impure {
    cell $lzReceivePrepare = md::LzReceivePrepare::New(NONCE, RESERVE_NANOS);

    (
        int nonce,
        int nanotons
    ) = md::LzReceivePrepare::deserialize($lzReceivePrepare);

    return test::multiget::equal(
        $lzReceivePrepare,
        unsafeTuple([
            md::LzReceivePrepare::nonce,
            md::LzReceivePrepare::nanotons
        ]),
        unsafeTuple([
            nonce,
            nanotons
        ])
    );
}

;; LzReceiveStatus: Has 2 builders,
;;                  Has 1 multi-getter
;;                  Has 1 sanitize
(int, slice) Serde::md::LzReceiveStatus::build::withFalse(cell $unused) impure {
    return test::build::equal(
        md::LzReceiveStatus::New(false, NONCE),
        md::LzReceiveStatus::build(false, NONCE)
    );
}

(int, slice) Serde::md::LzReceiveStatus::build::withTrue(cell $unused) impure {
    return test::build::equal(
        md::LzReceiveStatus::New(true, NONCE),
        md::LzReceiveStatus::build(true, NONCE)
    );
}

(int, slice) Serde::md::LzReceiveStatus::getSuccessAndNonce(cell $unused) impure {
    cell $storage = md::LzReceiveStatus::New(false, NONCE);

    (int actualSuccess, int actualNonce) = md::LzReceiveStatus::getSuccessAndNonce($storage);

    return test::multiget::equal(
        $storage,
        unsafeTuple([md::LzReceiveStatus::success, md::LzReceiveStatus::nonce]),
        unsafeTuple([actualSuccess, actualNonce])
    );
}

(int, slice) Serde::md::LzReceiveStatus::NewFull::sanitize(cell $unused) impure {
    cell $lzReceiveStatus = md::LzReceiveStatus::New(true, NONCE);

    cell $sanitizedLzReceiveStatus = md::LzReceiveStatus::NewFull::sanitize(
        _dupWithGarbage($lzReceiveStatus)
    );

    return test::build::equal($lzReceiveStatus, $sanitizedLzReceiveStatus);
}

;; LzSend: Has 1 builder,
;;         Has 3 getters,
;;         Has 2 multi-getter (deserializer)
;;         Has 2 low-level optimized setters
(int, slice) Serde::md::LzSend::build(cell $unused) impure {
    return test::build::equal(
        md::LzSend::New(
            NATIVE_FEE,
            ZRO_FEE,
            MOCK_EXTRA_OPTIONS_V1(),
            MOCK_ENFORCED_OPTIONS_V1(),
            MOCK_NONCELESS_PACKET(),
            MOCK_CALLBACK_DATA()
        ),
        md::LzSend::build(
            NATIVE_FEE,
            ZRO_FEE,
            MOCK_EXTRA_OPTIONS_V1(),
            MOCK_ENFORCED_OPTIONS_V1(),
            MOCK_NONCELESS_PACKET(),
            MOCK_CALLBACK_DATA()
        )
    );
}

(int, slice) Serde::md::LzSend::getSendRequestId(cell $unused) impure {
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(5678);

    return test::getData::equal(
        $lzSend,
        md::LzSend::getSendRequestId,
        md::LzSend::sendRequestId
    );
}

(int, slice) Serde::md::LzSend::getSendMsglib(cell $unused) impure {
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(NONCE);

    return test::getData::equal(
        $lzSend,
        md::LzSend::getSendMsglib,
        md::LzSend::sendMsglib
    );
}

(int, slice) Serde::md::LzSend::getPacket(cell $unused) impure {
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(NONCE);

    return test::getRef::equal(
        $lzSend,
        md::LzSend::getPacket,
        md::LzSend::packet
    );
}

(int, slice) Serde::md::LzSend::getPath(cell $unused) impure {
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(NONCE);

    cell $packet = $lzSend.cl::get<cellRef>(md::LzSend::packet);
    cell $path = $packet.cl::get<cellRef>(lz::Packet::path);

    return test::build::equal(
        $path,
        md::LzSend::getPath($lzSend)
    );
}

(int, slice) Serde::md::LzSend::deserializeSendCallback(cell $unused) impure {
    cell $storage = MOCK_LZ_SEND_WITH_ID(NONCE);

    (
        int requestId,
        int nativeFee,
        int zroFee,
        cell $extraOptions,
        cell $enforcedOptions,
        int sendMsglibManager
    ) = md::LzSend::deserializeSendCallback($storage);

    return test::multiget::equal(
        $storage,
        unsafeTuple([
            md::LzSend::sendRequestId,
            md::LzSend::nativeFee,
            md::LzSend::zroFee,
            md::LzSend::extraOptions,
            md::LzSend::enforcedOptions,
            md::LzSend::sendMsglibManager
        ]),
        unsafeTuple([requestId, nativeFee, zroFee, $extraOptions, $enforcedOptions, sendMsglibManager])
    );
}

(int, slice) Serde::md::LzSend::getQuoteInformation(cell $unused) impure {
    cell $storage = MOCK_LZ_SEND_WITH_ID(NONCE);

    (
        cell $packet,
        cell $extraOptions,
        cell $enforcedOptions
    ) = md::LzSend::getQuoteInformation($storage);

    return test::multiget::equal(
        $storage,
        unsafeTuple([
            md::LzSend::packet,
            md::LzSend::extraOptions,
            md::LzSend::enforcedOptions
        ]),
        unsafeTuple([$packet, $extraOptions, $enforcedOptions])
    );
}

(int, slice) Serde::md::LzSend::getPacketAndCallbackData(cell $unused) impure {
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(NONCE);

    (cell $packet, cell callbackData) = md::LzSend::getPacketAndCallbackData($lzSend);

    return test::multiget::equal(
        $lzSend,
        unsafeTuple([md::LzSend::packet, md::LzSend::callbackData]),
        unsafeTuple([$packet, callbackData])
    );
}

(int, slice) Serde::md::LzSend::fillRequestInfo(cell $unused) impure {
    cell $initLzSend = MOCK_LZ_SEND_WITH_ID(NONCE);

    (
        int newRequestId,
        int newSendMsglibManager,
        int newSendMsglib,
        int newSendMsglibConnection
    ) = (5501, SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS, SEND_MSGLIB_CONNECTION_ADDRESS);

    cell $expectedLzSend = $initLzSend
        .cl::set(md::LzSend::sendRequestId, newRequestId)
        .cl::set(md::LzSend::sendMsglibManager, newSendMsglibManager)
        .cl::set(md::LzSend::sendMsglib, newSendMsglib)
        .cl::set(md::LzSend::sendMsglibConnection, newSendMsglibConnection);

    cell $lzSend = $initLzSend.md::LzSend::fillRequestInfo(
        newRequestId,
        newSendMsglibManager,
        newSendMsglib,
        newSendMsglibConnection
    );

    return test::build::equal(
        $expectedLzSend,
        $lzSend
    );
}

(int, slice) Serde::md::LzSend::fillRequestInfoWithGarbage(cell $unused) impure {
    cell $initLzSend = MOCK_LZ_SEND_WITH_ID(NONCE);

    (
        int newRequestId,
        int newSendMsglibManager,
        int newSendMsglib,
        int newSendMsglibConnection
    ) = (5501, SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS, SEND_MSGLIB_CONNECTION_ADDRESS);

    cell $expectedLzSend = $initLzSend
        .cl::set(md::LzSend::sendRequestId, newRequestId)
        .cl::set(md::LzSend::sendMsglibManager, newSendMsglibManager)
        .cl::set(md::LzSend::sendMsglib, newSendMsglib)
        .cl::set(md::LzSend::sendMsglibConnection, newSendMsglibConnection);

    cell $garbageInitLzSend = begin_cell()
        .store_uint("garbage"u, 256)
        .store_slice($initLzSend.begin_parse().sskipfirst(256, 0))
        .end_cell();

    cell $lzSend = $garbageInitLzSend.md::LzSend::fillRequestInfo(
        newRequestId,
        newSendMsglibManager,
        newSendMsglib,
        newSendMsglibConnection
    );

    return test::build::equal(
        $expectedLzSend,
        $lzSend
    );
}

(int, slice) Serde::md::LzSend::setPacketNonceAndGuid(cell $unused) impure {
   cell $initLzSend = MOCK_LZ_SEND_WITH_ID(NONCE);

    int packetNonce = 12387;
    int packetGuid = 543208;

    cell $expectedLzSend = $initLzSend.cl::set(
        md::LzSend::packet,
        $initLzSend.cl::get<cellRef>(md::LzSend::packet)
                    .cl::set(lz::Packet::nonce, packetNonce)
                    .cl::set(lz::Packet::guid, packetGuid)
    );

    cell $optimizedLzSend = $initLzSend.md::LzSend::setPacketNonceAndGuid(packetNonce, packetGuid);

    return test::set::equal($expectedLzSend, $optimizedLzSend);
}

;; MdAddress: Has 1 builder,
;;            Has 1 getter,
;;            Has 1 multi-getter (deserializer)
;;            Has 1 sanitize
(int, slice) Serde::md::MdAddress::build(cell $unused) impure {
    return test::build::equal(
        md::MdAddress::New(MOCK_LZ_SEND(), DST_OAPP),
        md::MdAddress::build(MOCK_LZ_SEND(), DST_OAPP)
    );
}

(int, slice) Serde::md::MdAddress::getMd(cell $unused) impure {
    cell $storage = md::MdAddress::New(MOCK_LZ_SEND(), DST_OAPP);

    return test::getRef::equal(
        $storage,
        md::MdAddress::getMd,
        md::MdAddress::md
    );
}

(int, slice) Serde::md::MdAddress::deserialize(cell $unused) impure {
    cell $mdAddress = md::MdAddress::New(MOCK_LZ_SEND(), DST_OAPP);

    cell expectedMd = $mdAddress.cl::get<cellRef>(md::MdAddress::md);
    int expectedAddress = $mdAddress.cl::get<address>(md::MdAddress::address);

    (cell md, int address) = md::MdAddress::deserialize($mdAddress);

    return test::multiget::equal(
        $mdAddress,
        unsafeTuple([md::MdAddress::md, md::MdAddress::address]),
        unsafeTuple([md, address])
    );
}

(int, slice) Serde::md::MdAddress::sanitize(cell $unused) impure {
    cell $mdAddress = md::MdAddress::New(MOCK_LZ_SEND(), DST_OAPP);

    cell $sanitizedMdAddress = md::MdAddress::sanitize(
        _dupWithGarbage($mdAddress)
    );

    return test::build::equal($mdAddress, $sanitizedMdAddress);
}

;; MdEid: Has 1 sanitize
(int, slice) Serde::md::MdEid::sanitize(cell $unused) impure {
    cell $mdEid = md::MdEid::New(MOCK_LZ_SEND(), DST_EID);

    cell $sanitizedMdEid = md::MdEid::sanitize(
        _dupWithGarbage($mdEid)
    );

    return test::build::equal($mdEid, $sanitizedMdEid);
}

;; MdObj: Has 1 builder,
;;        Has 2 getters,
;;        Has 1 multi-getter (deserializer)
;;        Has 1 sanitize

(int, slice) Serde::md::MdObj::build(cell $unused) impure {
    return test::build::equal(
        md::MdObj::New(MOCK_LZ_SEND(), MOCK_ADMIN_WORKER_LIST()),
        md::MdObj::build(MOCK_LZ_SEND(), MOCK_ADMIN_WORKER_LIST())
    );
}

(int, slice) Serde::md::MdObj::getMd(cell $unused) impure {
    cell $storage = md::MdObj::New(MOCK_LZ_SEND(), MOCK_ADMIN_WORKER_LIST());

    return test::getRef::equal(
        $storage,
        md::MdObj::getMd,
        md::MdObj::md
    );
}

(int, slice) Serde::md::MdObj::getObj(cell $unused) impure {
    cell $storage = md::MdObj::New(MOCK_LZ_SEND(), MOCK_ADMIN_WORKER_LIST());

    return test::getRef::equal(
        $storage,
        md::MdObj::getObj,
        md::MdObj::obj
    );
}

(int, slice) Serde::md::MdObj::deserialize(cell $unused) impure {
    cell $mdObj = md::MdObj::New(MOCK_LZ_SEND(), MOCK_ADMIN_WORKER_LIST());

    cell expectedMd = $mdObj.cl::get<cellRef>(md::MdObj::md);
    cell expectedObj = $mdObj.cl::get<objRef>(md::MdObj::obj);

    (cell md, cell obj) = md::MdObj::deserialize($mdObj);

    return test::multiget::equal(
        $mdObj,
        unsafeTuple([md::MdObj::md, md::MdObj::obj]),
        unsafeTuple([expectedMd, expectedObj])
    );
}

(int, slice) Serde::md::MdObj::sanitize(cell $unused) impure {
    cell $mdObj = md::MdObj::New(MOCK_LZ_SEND(), MOCK_ADMIN_WORKER_LIST());

    cell $sanitizedMdObj = md::MdObj::sanitize(
        _dupWithGarbage($mdObj)
    );

    return test::build::equal($mdObj, $sanitizedMdObj);
}

;; MessagingReceipt: Has 1 builder,
;;                   Has 1 multi-getter (deserializer)
(int, slice) Serde::md::MessagingReceipt::build(cell $unused) impure {
    return test::build::equal(
        md::MessagingReceipt::New(MOCK_LZ_SEND(), NATIVE_FEE, ZRO_FEE, 5),
        md::MessagingReceipt::build(MOCK_LZ_SEND(), NATIVE_FEE, ZRO_FEE, 5)
    );
}

(int, slice) Serde::md::MessagingReceipt::getErrorCodeAndLzSend(cell $unused) impure {
    cell $messagingReceipt = md::MessagingReceipt::New(MOCK_LZ_SEND(), NATIVE_FEE, ZRO_FEE, 0);

    int expectedErrorCode = $messagingReceipt.cl::get<uint16>(md::MessagingReceipt::errorCode);
    cell $expectedLzSend = $messagingReceipt.cl::get<objRef>(md::MessagingReceipt::lzSend);

    (
        int actualErrorCode, 
        cell actualLzSend
    ) = md::MessagingReceipt::getErrorCodeAndLzSend($messagingReceipt);

    return test::multiget::equal(
        $messagingReceipt,
        unsafeTuple([md::MessagingReceipt::errorCode, md::MessagingReceipt::lzSend]),
        unsafeTuple([actualErrorCode, actualLzSend])
    );
}

;; MsglibSendCallback: Has 1 builder,
;;                     Has 1 getter,
;;                     Has 1 multi-getter (deserializer)
(int, slice) Serde::md::MsglibSendCallback::build(cell $unused) impure {
    return test::build::equal(
        md::MsglibSendCallback::New(
            NATIVE_FEE,
            ZRO_FEE,
            MOCK_LZ_SEND(),
            MOCK_SEND_PACKET(),
            serializePayees(MOCK_PAYEES(3)),
            NONCE_BYTE_OFFSET,
            NONCE_BYTES,
            GUID_BYTE_OFFSET,
            GUID_BYTES,
            lz::SmlJobAssigned::New(MOCK_FEE),
            Channel::NO_ERROR
        ),
        md::MsglibSendCallback::build(
            NATIVE_FEE,
            ZRO_FEE,
            MOCK_LZ_SEND(),
            MOCK_SEND_PACKET(),
            serializePayees(MOCK_PAYEES(3)),
            NONCE_BYTE_OFFSET,
            NONCE_BYTES,
            GUID_BYTE_OFFSET,
            GUID_BYTES,
            lz::SmlJobAssigned::New(MOCK_FEE),
            Channel::NO_ERROR
        )
    );
}

(int, slice) Serde::md::MsglibSendCallback::getLzSend(cell $unused) impure {
    cell $msglibSendCallback = MOCK_MSGLIB_SEND_CALLBACK_WITH_LZSEND_AND_PAYEES(
        MOCK_LZ_SEND(), 
        MOCK_PAYEES(3)
    );

    return test::getRef::equal(
        $msglibSendCallback,
        md::MsglibSendCallback::getLzSend,
        md::MsglibSendCallback::lzSend
    );
}

(int, slice) Serde::md::MsglibSendCallback::deserialize(cell $unused) impure {
    cell $msglibSendCallback = MOCK_MSGLIB_SEND_CALLBACK_WITH_LZSEND_AND_PAYEES(
        MOCK_LZ_SEND(), 
        MOCK_PAYEES(3)
    );

    (
        int errorCode,
        int nativeFee,
        int zroFee,
        cell $lzSend,
        cell $payees,
        cell encodedPacket,
        int nonceByteOffset, 
        int nonceBytes, 
        int guidByteOffset, 
        int guidBytes,
        cell $msglibSendEvents
    ) = md::MsglibSendCallback::deserialize($msglibSendCallback);

    return test::multiget::equal(
        $msglibSendCallback,
        unsafeTuple([
            md::MsglibSendCallback::errorCode,
            md::MsglibSendCallback::nativeFee,
            md::MsglibSendCallback::zroFee,
            md::MsglibSendCallback::lzSend,
            md::MsglibSendCallback::payees,
            md::MsglibSendCallback::packetEncoded,
            md::MsglibSendCallback::nonceByteOffset,
            md::MsglibSendCallback::nonceBytes,
            md::MsglibSendCallback::guidByteOffset,
            md::MsglibSendCallback::guidBytes,
            md::MsglibSendCallback::msglibSendEvents
        ]),
        unsafeTuple([
            errorCode, 
            nativeFee, 
            zroFee, 
            $lzSend, 
            $payees, 
            encodedPacket, 
            nonceByteOffset, 
            nonceBytes, 
            guidByteOffset, 
            guidBytes, 
            $msglibSendEvents
        ])
    );
}

;; Nonce: Has 1 builder,
;;        Has 1 getter,
;;        Has 1 sanitize
(int, slice) Serde::md::Nonce::build(cell $unused) impure {
    cell $storage = md::Nonce::New(NONCE + 87);

    return test::build::equal(
        $storage,
        md::Nonce::build(NONCE + 87)
    );
}

(int, slice) Serde::md::Nonce::getNonce(cell $unused) impure {
    cell $storage = md::Nonce::New(NONCE + 54);

    return test::getData::equal(
        $storage,
        md::Nonce::getNonce,
        md::Nonce::nonce
    );
}

(int, slice) Serde::md::Nonce::sanitize(cell $unused) impure {
    cell $nonce = md::Nonce::New(NONCE + 54);

    cell $sanitizedNonce = md::Nonce::sanitize(
        _dupWithGarbage($nonce)
    );

    return test::build::equal($nonce, $sanitizedNonce);
}

;; OptionsV1: Has 1 getter,
;;            Has 1 multi-getter (deserializer)
(int, slice) Serde::md::OptionsV1::getLzReceiveGas(cell $unused) impure {
    cell $options = MOCK_EXTRA_OPTIONS_V1();

    return test::getData::equal(
        $options,
        md::OptionsV1::getLzReceiveGas,
        md::OptionsV1::lzReceiveGas
    );
}

(int, slice) Serde::md::OptionsV1::decodeCoins(cell $unused) impure {
    cell $options = MOCK_EXTRA_OPTIONS_V1();

    (
        int lzReceiveGas,
        int lzReceiveValue,
        int nativeDropAmount
    ) = md::OptionsV1::decodeCoins($options);

    return test::multiget::equal(
        $options,
        unsafeTuple([
            md::OptionsV1::lzReceiveGas,
            md::OptionsV1::lzReceiveValue,
            md::OptionsV1::nativeDropAmount
        ]),
        unsafeTuple([lzReceiveGas, lzReceiveValue, nativeDropAmount])
    );
}

;; OptionsV2: Has 1 multi-getter (deserializer)
(int, slice) Serde::md::OptionsV2::decodeCoins(cell $unused) impure {
    cell $options = MOCK_EXTRA_OPTIONS_V2();

    (
        int lzComposeGas,
        int lzComposeValue,
        int lzReceiveGas,
        int lzReceiveValue,
        int nativeDropAmount
    ) = md::OptionsV2::decodeCoins($options);

    return test::multiget::equal(
        $options,
        unsafeTuple([
            md::OptionsV2::lzComposeGas,
            md::OptionsV2::lzComposeValue,
            md::OptionsV2::lzReceiveGas,
            md::OptionsV2::lzReceiveValue,
            md::OptionsV2::nativeDropAmount
        ]),
        unsafeTuple([lzComposeGas, lzComposeValue, lzReceiveGas, lzReceiveValue, nativeDropAmount])
    );
}

;; OptionsExtended: Has 1 Multi-getter (deserializer)
(int, slice) Serde::md::OptionsExtended::deserialize(cell $unused) impure {
    cell $optionsExtended = MOCK_OPTIONS_EXTENDED();

    (int eid, int msgType, cell $options) = md::OptionsExtended::deserialize($optionsExtended);

    return test::multiget::equal(
        $optionsExtended,
        unsafeTuple([md::OptionsExtended::eid, md::OptionsExtended::msgType, md::OptionsExtended::options]),
        unsafeTuple([eid, msgType, $options])
    );
}

;; PacketSent: Has 1 builder
(int, slice) Serde::md::PacketSent::build(cell $unused) impure {
    return test::build::equal(
        md::PacketSent::New(
            NATIVE_FEE,
            ZRO_FEE,
            MOCK_ENFORCED_OPTIONS_V1(),
            MOCK_EXTRA_OPTIONS_V2(),
            BytesEncoder::build<PacketV1>(MOCK_SEND_PACKET()).BytesEncoder::serialize(),
            NONCE,
            SEND_MSGLIB_ADDRESS,
            lz::SmlJobAssigned::New(MOCK_FEE)
        ),
        md::PacketSent::build(
            NATIVE_FEE,
            ZRO_FEE,
            MOCK_ENFORCED_OPTIONS_V1(),
            MOCK_EXTRA_OPTIONS_V2(),
            BytesEncoder::build<PacketV1>(MOCK_SEND_PACKET()).BytesEncoder::serialize(),
            NONCE,
            SEND_MSGLIB_ADDRESS,
            lz::SmlJobAssigned::New(MOCK_FEE)
        )
    );
}

;; PacketId: Has 1 builder
;;           Has 1 sanitize
(int, slice) Serde::md::PacketId::build(cell $unused) impure {
    return test::build::equal(
        md::PacketId::New(MOCK_SEND_PATH(), NONCE),
        md::PacketId::build(MOCK_SEND_PATH(), NONCE)
    );
}

(int, slice) Serde::md::PacketId::sanitize(cell $unused) impure {
    cell $packetId = md::PacketId::New(MOCK_SEND_PATH(), NONCE);

    cell $sanitizedPacketId = md::PacketId::sanitize(
        _dupWithGarbage($packetId)
    );

    return test::build::equal($packetId, $sanitizedPacketId);
}

;; SetAddress: Has 1 sanitize
(int, slice) Serde::md::SetAddress::sanitize(cell $unused) impure {
    cell $setAddress = md::SetAddress::New(DST_OAPP);

    cell $sanitizedSetAddress = md::SetAddress::sanitize(
        _dupWithGarbage($setAddress)
    );

    return test::build::equal($setAddress, $sanitizedSetAddress);
}


;; SetEpConfig: Has 1 sanitize
(int, slice) Serde::md::SetEpConfig::sanitize(cell $unused) impure {
    cell $setEpConfig = MOCK_SET_EP_CONFIG_MD(true);

    cell $sanitizedSetEpConfig = md::SetEpConfig::sanitize(
        _dupWithGarbage($setEpConfig)
    );

    return test::build::equal($setEpConfig, $sanitizedSetEpConfig);
}

;;; ===============================TESTS=========================================
tuple baseTest::getTests() impure {
    return empty_tuple()
    ;; -- AddMsgLib
        .tpush([Serde::md::AddMsglib::sanitize, "Serde::md::AddMsglib::sanitize"])
    ;; -- ChannelNonceInfo
        .tpush([Serde::md::ChannelNonceInfo::deserialize, "Serde::md::ChannelNonceInfo::deserialize"])
    ;; -- CoinsAmount
        .tpush([Serde::md::CoinsAmount::sanitize, "Serde::md::CoinsAmount::sanitize"])
    ;; -- Deploy
        .tpush([Serde::md::Deploy::sanitize, "Serde::md::Deploy::sanitize"])
        .tpush([Serde::md::Deploy::NewWithExtraInfo::sanitize, "Serde::md::Deploy::NewWithExtraInfo::sanitize"])
    ;; -- ExtendedMd
        .tpush([Serde::md::ExtendedMd::build, "Serde::md::ExtendedMd::build"])
        .tpush([Serde::md::ExtendedMd::getObj, "Serde::md::ExtendedMd::getObj"])
        .tpush([Serde::md::ExtendedMd::getMdAndForwardingAddress, "Serde::md::ExtendedMd::getMdAndForwardingAddress"])
        .tpush([Serde::md::ExtendedMd::deserialize, "Serde::md::ExtendedMd::deserialize"])
        .tpush([Serde::md::ExtendedMd::sanitize, "Serde::md::ExtendedMd::sanitize"])
    ;; -- LzReceivePrepare
        .tpush([Serde::md::LzReceivePrepare::getNanotons, "Serde::md::LzReceivePrepare::getNanotons"])
        .tpush([Serde::md::LzReceivePrepare::deserialize, "Serde::md::LzReceivePrepare::deserialize"])
    ;; -- LzReceiveStatus
        .tpush([Serde::md::LzReceiveStatus::build::withFalse, "Serde::md::LzReceiveStatus::build::withFalse"])
        .tpush([Serde::md::LzReceiveStatus::build::withTrue, "Serde::md::LzReceiveStatus::build::withTrue"])
        .tpush([Serde::md::LzReceiveStatus::getSuccessAndNonce, "Serde::md::LzReceiveStatus::getSuccessAndNonce"])
        .tpush([Serde::md::LzReceiveStatus::NewFull::sanitize, "Serde::md::LzReceiveStatus::NewFull::sanitize"])
    ;; -- LzSend
        .tpush([Serde::md::LzSend::build, "Serde::md::LzSend::build"])
        .tpush([Serde::md::LzSend::getSendRequestId, "Serde::md::LzSend::getSendRequestId"])
        .tpush([Serde::md::LzSend::getPacket, "Serde::md::LzSend::getPacket"])
        .tpush([Serde::md::LzSend::getSendMsglib, "Serde::md::LzSend::getSendMsglib"])
        .tpush([Serde::md::LzSend::getPath, "Serde::md::LzSend::getPath"])
        .tpush([Serde::md::LzSend::deserializeSendCallback, "Serde::md::LzSend::deserializeSendCallback"])
        .tpush([Serde::md::LzSend::getPacketAndCallbackData, "Serde::md::LzSend::getPacketAndCallbackData"])
        .tpush([Serde::md::LzSend::getQuoteInformation, "Serde::md::LzSend::getQuoteInformation"])
        .tpush([Serde::md::LzSend::fillRequestInfo, "Serde::md::LzSend::fillRequestInfo"])
        .tpush([Serde::md::LzSend::fillRequestInfoWithGarbage, "Serde::md::LzSend::fillRequestInfoWithGarbage"])
        .tpush([Serde::md::LzSend::setPacketNonceAndGuid, "Serde::md::LzSend::setPacketNonceAndGuid"])
    ;; -- MdAddress
        .tpush([Serde::md::MdAddress::build, "Serde::md::MdAddress::build"])
        .tpush([Serde::md::MdAddress::getMd, "Serde::md::MdAddress::getMd"])
        .tpush([Serde::md::MdAddress::deserialize, "Serde::md::MdAddress::deserialize"])
        .tpush([Serde::md::MdAddress::sanitize, "Serde::md::MdAddress::sanitize"])
    ;; -- MdEid
        .tpush([Serde::md::MdEid::sanitize, "Serde::md::MdEid::sanitize"])
    ;; -- MdObj
        .tpush([Serde::md::MdObj::build, "Serde::md::MdObj::build"])
        .tpush([Serde::md::MdObj::getMd, "Serde::md::MdObj::getMd"])
        .tpush([Serde::md::MdObj::getObj, "Serde::md::MdObj::getObj"])
        .tpush([Serde::md::MdObj::deserialize, "Serde::md::MdObj::deserialize"])
        .tpush([Serde::md::MdObj::sanitize, "Serde::md::MdObj::sanitize"])
    ;; -- MessagingReceipt
        .tpush([Serde::md::MessagingReceipt::build, "Serde::md::MessagingReceipt::build"])
        .tpush([Serde::md::MessagingReceipt::getErrorCodeAndLzSend, "Serde::md::MessagingReceipt::getErrorCodeAndLzSend"])
    ;; -- MsglibSendCallback
        .tpush([Serde::md::MsglibSendCallback::build, "Serde::md::MsglibSendCallback::build"])
        .tpush([Serde::md::MsglibSendCallback::getLzSend, "Serde::md::MsglibSendCallback::getLzSend"])
        .tpush([Serde::md::MsglibSendCallback::deserialize, "Serde::md::MsglibSendCallback::deserialize"])
    ;; -- Nonce
        .tpush([Serde::md::Nonce::build, "Serde::md::Nonce::build"])
        .tpush([Serde::md::Nonce::getNonce, "Serde::md::Nonce::getNonce"])
        .tpush([Serde::md::Nonce::sanitize, "Serde::md::Nonce::sanitize"])
    ;; -- OptionsV1
        .tpush([Serde::md::OptionsV1::getLzReceiveGas, "Serde::md::OptionsV1::getLzReceiveGas"])
        .tpush([Serde::md::OptionsV1::decodeCoins, "Serde::md::OptionsV1::decodeCoins"])
    ;; -- OptionsV2
        .tpush([Serde::md::OptionsV2::decodeCoins, "Serde::md::OptionsV2::decodeCoins"])
    ;; -- OptionsExtended
        .tpush([Serde::md::OptionsExtended::deserialize, "Serde::md::OptionsExtended::deserialize"])
    ;; -- PacketSent
        .tpush([Serde::md::PacketSent::build, "Serde::md::PacketSent::build"])
    ;; -- PacketId
        .tpush([Serde::md::PacketId::build, "Serde::md::PacketId::build"])
        .tpush([Serde::md::PacketId::sanitize, "Serde::md::PacketId::sanitize"])
    ;; -- SetAddress
        .tpush([Serde::md::SetAddress::sanitize, "Serde::md::SetAddress::sanitize"])
    ;; -- SetEpConfig
        .tpush([Serde::md::SetEpConfig::sanitize, "Serde::md::SetEpConfig::sanitize"])
    ;
}
