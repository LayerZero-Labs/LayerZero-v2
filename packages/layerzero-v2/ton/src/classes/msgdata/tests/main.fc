#include "../LzSend.fc";
#include "../../../../tests/testMain.fc";
#include "../../../../tests/mocks.fc";
#include "../../../funC++/classlib.fc";
#include "../MdObj.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "MsgData"; }

cell baseTest::prepare(tuple args) impure {
    return cl::nullObject();
}

;;; ===============================TESTS=========================================

(int, slice) LzSend::fillSendInfo(cell $storage) impure {
    cell $lzSend = MOCK_LZ_SEND();

    cell $manualSet = $lzSend
        .cl::set(md::LzSend::sendRequestId, 1)
        .cl::set(md::LzSend::sendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
        .cl::set(md::LzSend::sendMsglib, SEND_MSGLIB_ADDRESS)
        .cl::set(md::LzSend::sendMsglibConnection, SEND_MSGLIB_CONNECTION_ADDRESS);

    cell $helperSet = md::LzSend::fillRequestInfo(
        $lzSend,
        1,
        SEND_MSGLIB_MANAGER_ADDRESS,
        SEND_MSGLIB_ADDRESS,
        SEND_MSGLIB_CONNECTION_ADDRESS
    );

    return test::shouldBeTrue(
        $manualSet.cl::hash() == $helperSet.cl::hash()
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([LzSend::fillSendInfo, "LzSend::fillSendInfo"])
    );
}