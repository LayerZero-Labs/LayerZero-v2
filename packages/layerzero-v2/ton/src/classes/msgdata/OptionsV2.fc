#include "../../funC++/classlib.fc";

;; required storage name
const int md::OptionsV2::NAME = "OptionsV2"u;

;; field names
const int md::OptionsV2::lzReceiveGas = 0;
const int md::OptionsV2::lzReceiveValue = 1;
const int md::OptionsV2::lzComposeGas = 2;
const int md::OptionsV2::lzComposeValue = 3;
const int md::OptionsV2::nativeDropAddress = 4;
const int md::OptionsV2::nativeDropAmount = 5;

;; This is used to demonstrate that we are capable of having different options objects
;; This is not finalized and the 'V2' shouldnt be considered a 'valid' options type in the protocol YET
;; This is used for testing purposes currently

cell md::OptionsV2::New(
    int lzReceiveGas,
    int lzReceiveValue,
    int lzComposeGas,
    int lzComposeValue,
    int nativeDropAddress,
    int nativeDropAmount
) impure inline method_id {
    return cl::declare(
        md::OptionsV2::NAME,
        unsafeTuple([
            [cl::t::uint256, lzReceiveGas],          ;; md::OptionsV2::lzReceiveGas
            [cl::t::uint256, lzReceiveValue],        ;; md::OptionsV2::lzReceiveValue
            [cl::t::uint256, lzComposeGas],          ;; md::OptionsV2::lzComposeGas
            [cl::t::uint256, lzComposeValue],        ;; md::OptionsV2::lzComposeValue
            [cl::t::address, nativeDropAddress],     ;; md::OptionsV2::nativeDropAddress
            [cl::t::uint256, nativeDropAmount]       ;; md::OptionsV2::nativeDropAmount
        ])
    );
}

;; ========================== Object Multi-Getters ==========================

const int md::OptionsV2::_lzReceiveGasOffset = _HEADER_WIDTH;
const int md::OptionsV2::_lzReceiveValueOffset = md::OptionsV2::_lzReceiveGasOffset + 256;

const int md::OptionsV2::_lzComposeGasOffset = 0;
const int md::OptionsV2::_lzComposeValueOffset = md::OptionsV2::_lzComposeGasOffset + 256;
const int md::OptionsV2::_nativeDropAddressOffset = md::OptionsV2::_lzComposeValueOffset + 256;

const int md::OptionsV2::_nativeDropAmountOffset = 0;

;; (lzComposeGas, lzComposeValue, lzReceiveGas, lzReceiveValue, nativeDropAmount)
(int, int, int, int, int) md::OptionsV2::decodeCoins(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();

    slice ref2 = selfSlice.preloadRefSliceAt(2);
    slice ref3 = selfSlice.preloadRefSliceAt(3);

    return (
        ref2.preloadUint256At(md::OptionsV2::_lzComposeGasOffset),
        ref2.preloadUint256At(md::OptionsV2::_lzComposeValueOffset),
        selfSlice.preloadUint256At(md::OptionsV2::_lzReceiveGasOffset),
        selfSlice.preloadUint256At(md::OptionsV2::_lzReceiveValueOffset),
        ref3.preloadUint256At(md::OptionsV2::_nativeDropAmountOffset)
    );
}