#include "../../funC++/classlib.fc";

;; required storage name
const int lz::Path::NAME = "path"u;

;; field names
const int lz::Path::srcEid = 0;
const int lz::Path::srcOApp = 1;
const int lz::Path::dstEid = 2;
const int lz::Path::dstOApp = 3;

;; In all blockchains with atomic cross-contract call, we can use src/dst/srcOApp/dstOApp
;; because the send channel doesn't exist (it's just a nonce).
;; In TON, we need both send/receive channels, so we use srcOApp/dstOApp to provide
;; a context-free way to refer to the two ends of the channel.
;; The direction is inferred by the context of the contract (send vs receive).
;; The srcOApp is the 256-bit hashpart of a standard address.
cell lz::Path::New(int srcEid, int srcOApp, int dstEid, int dstOApp) impure inline method_id {
    return cl::declare(
        lz::Path::NAME,
        unsafeTuple([
            [cl::t::uint32, srcEid],    ;; lz::Path::srcEid
            [cl::t::address, srcOApp],  ;; lz::Path::srcOApp
            [cl::t::uint32, dstEid],    ;; lz::Path::dstEid
            [cl::t::address, dstOApp]   ;; lz::Path::dstOApp
        ])
    );
}

const int lz::Path::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 4);
const int lz::Path::_headerFillerBits = _HEADER_WIDTH - lz::Path::_headerInfoBits;
const int lz::Path::_headerInfo = 8903714975572488637007080065659;

;; this function is unused by the protocol but will be used by OApps
cell lz::Path::build(int srcEid, int srcOApp, int dstEid, int dstOApp) impure inline {
    return begin_cell()
        .store_uint(lz::Path::_headerInfo, lz::Path::_headerInfoBits)    ;; header info
        .store_ones(lz::Path::_headerFillerBits)                         ;; header filler
        .store_uint32(srcEid)
        .store_uint256(srcOApp)
        .store_uint32(dstEid)
        .store_uint256(dstOApp)
        .end_cell();
}

cell lz::Path::endpointPath(int srcEid, int dstEid) impure inline {
    return lz::Path::New(srcEid, NULLADDRESS, dstEid, NULLADDRESS);
}

cell lz::Path::reverse(cell $path) inline {
    int srcEid = $path.cl::get<uint32>(lz::Path::srcEid);
    int srcOapp = $path.cl::get<address>(lz::Path::srcOApp);
    int dstEid = $path.cl::get<uint32>(lz::Path::dstEid);
    int dstOapp = $path.cl::get<address>(lz::Path::dstOApp);
    return lz::Path::New(dstEid, dstOapp, srcEid, srcOapp);
}

;; ====================== Object Getters =====================

const int lz::Path::_srcEidOffset = _HEADER_WIDTH;
const int lz::Path::_srcOAppOffset = lz::Path::_srcEidOffset + 32;
const int lz::Path::_dstEidOffset = lz::Path::_srcOAppOffset + 256;
const int lz::Path::_dstOAppOffset = lz::Path::_dstEidOffset + 32;

int lz::Path::getSrcOApp(cell $self) impure inline {
    return $self.cellPreloadAddressAt(lz::Path::_srcOAppOffset);
}

;; ====================== Storage Composite Accessors =====================

int lz::Path::getDstEid(cell $self) impure inline {
    return $self.cellPreloadUint32At(lz::Path::_dstEidOffset);
}

;; (srcEid, dstEid)
(int, int) lz::Path::getEidAndDstEid(cell $self) impure inline {
    slice $selfSlice = $self.begin_parse();
    return (
        $selfSlice.preloadUint32At(lz::Path::_srcEidOffset),
        $selfSlice.preloadUint32At(lz::Path::_dstEidOffset)
    );
}

;; (srcEid, srcOApp, dstEid, dstOApp)
(int, int, int, int) lz::Path::deserialize(cell $self) impure inline {
    slice $selfSlice = $self.begin_parse();
    return (
        $selfSlice.preloadUint32At(lz::Path::_srcEidOffset),
        $selfSlice.preloadAddressAt(lz::Path::_srcOAppOffset),
        $selfSlice.preloadUint32At(lz::Path::_dstEidOffset),
        $selfSlice.preloadAddressAt(lz::Path::_dstOAppOffset)
    );
}

;; ====================== Object Mutators =====================

;; low-level optimized version
;; original: 12k gas
;; optimized: 1k gas
cell lz::Path::optimizedReverse(cell $path) impure inline {
    slice pathSlice = $path.begin_parse();
    return begin_cell()
        .store_slice(pathSlice.scutfirst(_HEADER_WIDTH, 0))
        .store_slice(pathSlice.preload_bits_offset(lz::Path::_dstEidOffset, 288)) ;; 32 + 256
        .store_slice(pathSlice.preload_bits_offset(lz::Path::_srcEidOffset, 288)) ;; eid + address
        .end_cell();
}

cell lz::Path::sanitize(cell $path) impure {
    return lz::Path::New(
        $path.cl::get<uint32>(lz::Path::srcEid),
        $path.cl::get<address>(lz::Path::srcOApp),
        $path.cl::get<uint32>(lz::Path::dstEid),
        $path.cl::get<address>(lz::Path::dstOApp)
    );
}
