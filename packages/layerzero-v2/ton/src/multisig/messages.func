#include "imports/stdlib.fc";
#include "types.func";

;; @see stdlib.fc#746

;; https://github.com/ton-blockchain/ton/blob/8a9ff339927b22b72819c5125428b70c406da631/crypto/block/block.tlb#L155
;;
;;message$_ {X:Type} info:CommonMsgInfoRelaxed
;;  init:(Maybe (Either StateInit ^StateInit))
;;  body:(Either X ^X) = MessageRelaxed X;
;;
;;_ (Message Any) = MessageAny;

() send_message_with_only_body(slice to_address, int amount, builder body, int msg_flags, int send_mode) impure inline_ref {

    builder msg = begin_cell()
            .store_msg_flags_and_address_none(msg_flags)
            .store_slice(to_address)
            .store_coins(amount);
    try {
        ;; store body in slice, may overflow
        msg = msg
                .store_prefix_only_body()
                .store_builder(body);
    } catch (_, _) {
        ;; overflowed, lets store in ref
        msg = msg
                .store_only_body_ref(begin_cell().store_builder(body).end_cell());
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() send_message_with_state_init_and_body(slice to_address, int amount, cell state_init, builder body, int msg_flags, int send_mode) impure inline_ref {

    builder msg = begin_cell()
            .store_msg_flags_and_address_none(msg_flags)
            .store_slice(to_address)
            .store_coins(amount);

    try {
        ;; store body in slice, may overflow
        msg = msg
                .store_uint(MSG_HAVE_STATE_INIT + MSG_STATE_INIT_IN_REF, MSG_WITH_STATE_INIT_AND_BODY_SIZE)
                .store_ref(state_init)
                .store_builder(body);
    } catch (_, _) {
        ;; overflowed, lets store in ref
        msg = msg
                .store_statinit_ref_and_body_ref(state_init, begin_cell().store_builder(body).end_cell());
    }

    send_raw_message(msg.end_cell(), send_mode);
}
