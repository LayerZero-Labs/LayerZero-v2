#include "../../protocol/msglibs/BytesEncoder.fc";
#include "../../protocol/msglibs/BytesDecoder.fc";
#include "../../protocol/controller/storage.fc";
#include "../../protocol/endpoint/storage.fc";
#include "../../protocol/channel/storage.fc";
#include "../../protocol/msglibs/simpleMsglib/smlManager/storage.fc";
#include "../../protocol/msglibs/simpleMsglib/smlConnection/storage.fc";
#include "../../protocol/msglibs/ultralightnode/uln/tests/computeSizeGasTest/storage.fc";
#include "../../protocol/msglibs/ultralightnode/uln/storage.fc";
#include "../../protocol/msglibs/ultralightnode/ulnConnection/storage.fc";
#include "../../protocol/msglibs/ultralightnode/ulnManager/storage.fc";
#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/executorFeeLib/storage.fc";
#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/dvnFeeLib/storage.fc";
#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/priceFeedFeeLib/storage.fc";

#include "../../protocol/msglibs/ultralightnode/uln/tests/computeSizeGasTest/storage.fc";
#include "../../protocol/msglibs/ultralightnode/uln/storage.fc";
#include "../../protocol/msglibs/ultralightnode/ulnManager/storage.fc";
#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/executorFeeLib/storage.fc";
#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/dvnFeeLib/storage.fc";
#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/priceFeedFeeLib/storage.fc";

#include "../../workers/core/workerCoreStorage.fc";
#include "../../workers/dvn/storage.fc";
#include "../../workers/executor/storage.fc";
#include "../../workers/priceFeedCache/storage.fc";
#include "../../workers/proxy/storage.fc";

#include "../../workers/msgdata/ExecuteParams.fc";
#include "../../workers/msgdata/NativeDrop.fc";
#include "../../workers/msgdata/SetDict.fc";
#include "../../workers/msgdata/SetQuorum.fc";
#include "../../workers/msgdata/SignedRequest.fc";
#include "../../workers/msgdata/ClaimTon.fc";
#include "../../funC++/actions/utils.fc";
#include "../counter/storage.fc";
#include "./class_autoload.fc";

;;; =========================== All Storages ===================================
    ;; this contract is purely for convenience during unit testing and deployment
    ;; to expose view functions

(cell, tuple) _initialize(cell $md) impure inline {
    return (getContractStorage(), emptyActions());
}

int getCellBits(cell input) method_id {
    (_, int bits, _) = compute_data_size(input, MAX_U16);
    return bits;
}

() main() impure { }

;; integration helper function returns lz::Packet
cell decodeAndOverrideNonce<PacketV1>(cell encodedPacket, int newNonce) inline method_id {
    slice parsingPacket = encodedPacket.begin_parse();
    (parsingPacket, int packetVersion) = BytesDecoder::loadBytes(parsingPacket, 1);
    (parsingPacket, int nonce) = BytesDecoder::loadBytes(parsingPacket, 8);
    (parsingPacket, int srcEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int srcOapp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int dstEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int dstOapp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int guid) = BytesDecoder::loadBytes(parsingPacket, 32);

    return lz::Packet::New(
        lz::Path::New(srcEid, srcOapp, dstEid, dstOapp),
        BytesDecoder::compactRemainder(parsingPacket),
        newNonce
    );
}

;; integration helper function returns lz::Packet
cell decodeAndOverrideNonceAndGuid<PacketV1>(cell encodedPacket, int newNonce) inline method_id {
    slice parsingPacket = encodedPacket.begin_parse();
    (parsingPacket, int packetVersion) = BytesDecoder::loadBytes(parsingPacket, 1);
    (parsingPacket, int nonce) = BytesDecoder::loadBytes(parsingPacket, 8);
    (parsingPacket, int srcEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int srcOapp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int dstEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int dstOapp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int guid) = BytesDecoder::loadBytes(parsingPacket, 32);

    cell path = lz::Path::New(srcEid, srcOapp, dstEid, dstOapp);
    return lz::Packet::New(
        path,
        BytesDecoder::compactRemainder(parsingPacket),
        newNonce
    ).cl::set(
        lz::Packet::guid,
        lz::Packet::calculateGuid(path, newNonce)
    );
}

;; integration helper function returns lz::Packet
cell decodeAndOverrideNonceAndGuidSerialized<PacketV1>(cell encodedPacket, int newNonce) inline method_id {
    slice parsingPacket = encodedPacket.begin_parse();
    (parsingPacket, int packetVersion) = BytesDecoder::loadBytes(parsingPacket, 1);
    (parsingPacket, int nonce) = BytesDecoder::loadBytes(parsingPacket, 8);
    (parsingPacket, int srcEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int srcOapp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int dstEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int dstOapp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int guid) = BytesDecoder::loadBytes(parsingPacket, 32);

    cell path = lz::Path::New(srcEid, srcOapp, dstEid, dstOapp);
    return BytesEncoder::build<PacketV1>(
        lz::Packet::New(
            path,
            BytesDecoder::compactRemainder(parsingPacket),
            newNonce
        ).cl::set(
            lz::Packet::guid,
            lz::Packet::calculateGuid(path, newNonce)
        )
    ).BytesEncoder::serialize();
}