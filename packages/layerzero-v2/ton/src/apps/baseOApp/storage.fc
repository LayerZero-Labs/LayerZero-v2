#include "../../protocol/core/baseStorage.fc";
#include "../../funC++/constants.fc";
#include "../../classes/lz/Path.fc";
#include "../../protocol/channel/storage.fc";
#include "../../protocol/endpoint/storage.fc";

;; WARNING: This is a mock OApp, and is not fully functioning, use for testing purposes only.

const int BASE_LZ_RECEIVE_GAS = 100000;
;; required object name
const int BaseOApp::NAME = "baseOApp"u;

;; field names
const int BaseOApp::controllerAddress = 0;
const int BaseOApp::eid = 1;
const int BaseOApp::maxReceivedNonce = 2;
const int BaseOApp::baseLzReceiveGas = 3;
const int BaseOApp::peers = 4;
const int BaseOApp::enforcedOptions = 5;
const int BaseOApp::tentativeOwner = 6;
const int BaseOApp::endpointCode = 7;
const int BaseOApp::channelCode = 8;
const int BaseOApp::endpointInitStorage = 9;

;; @owner oApp owner EOA
cell BaseOApp::New(int controllerAddress, int eid, cell endpointCode, cell channelCode) inline method_id {
    return cl::declare(
        BaseOApp::NAME,
        unsafeTuple([
            [cl::t::address, controllerAddress], ;; BaseOApp::controllerAddress
            [cl::t::uint32, eid], ;; BaseOApp::eid
            [cl::t::dict256, cl::dict256::New()], ;; BaseOApp::maxReceivedNonce
            [cl::t::coins, BASE_LZ_RECEIVE_GAS], ;; BaseOApp::baseLzReceiveGas
            [cl::t::dict256, cl::dict256::New()], ;; BaseOApp::peers
            [cl::t::dict256, cl::dict256::New()], ;; BaseOApp::enforcedOptions
            [cl::t::address, NULLADDRESS], ;; BaseOApp::tentativeOwner
            [cl::t::cellRef, endpointCode], ;; BaseOApp::endpointCode
            [cl::t::cellRef, channelCode], ;; BaseOApp::channelCode
            [cl::t::objRef, Endpoint::New(
                eid,
                0,
                controllerAddress
            )] ;; BaseOApp::endpointInitStorage
        ])
    );
}
