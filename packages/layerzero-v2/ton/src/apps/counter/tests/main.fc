#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../classes/lz/Path.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/PacketId.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../../funC++/classlib.fc";
#include "../../../protocol/channel/interface.fc";
#include "../../baseOApp/handler.fc";
#include "../../baseOApp/interface.fc";
#include "../../../funC++/stdlib.fc";
#include "../../../funC++/txnContext.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/msgdata/MdObj.fc";
#include "../../../classes/msgdata/OptionsExtended.fc";
#include "../../../classes/msgdata/OptionsV2.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "counter"; }

cell createContractStorage() impure {
    setContractStorage(
        Counter::New(
            getCaller(),
            CONTROLLER_ADDRESS,
            SRC_EID,
            COUNTER_ID,
            MOCK_ENDPOINT_CODE(),
            MOCK_CHANNEL_CODE()
        )
    );

    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(cl::nullObject());
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================HELPER FUNCTIONS===============================

const int COUNTER_NONCE = 1;

cell abIncrementPacket() impure {
    return begin_cell().store_uint8(Counter::increment::ab)
                       .store_uint32(SRC_EID)
                       .store_uint32(2)
                       .end_cell();
}

cell _getCounterSendPath() impure {
    return lz::Path::New(
        SRC_EID,
        getContractAddress(),
        DST_EID,
        DST_OAPP
    );
}

cell _getCounterReceivePath() impure {
    return lz::Path::New(
        DST_EID,
        DST_OAPP,
        SRC_EID,
        getContractAddress()
    );
}

cell _setAndGetPeer(cell $storage, int dstEid, int dstOApp) {
    return $storage.setBaseOAppStorage(
        getBaseOAppStorage().cl::nestedDict256::set(
            BaseOApp::peers,
            dstEid,
            dstOApp
        )
    );
}

;;; ===============================TESTS=========================================

(int, slice) lzReceivePrepare::success::basic(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    cell $packet = lz::Packet::nonceless(
        _getCounterReceivePath(),
        abIncrementPacket()
    );

    return test::handler::shouldPass(
        lzReceivePrepare,
        $packet,
        unsafeTuple([
            0,
            _newAction<call>(
                getCaller(),
                Channel::OP::LZ_RECEIVE_LOCK,
                md::Nonce::New($packet.cl::get<uint64>(lz::Packet::nonce))
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) lzReceivePrepare::revert::notEnoughGas(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) lzReceiveExecute::success::ab(cell $storage) impure {
    cell $packet = lz::Packet::nonceless(
        _getCounterSendPath(),
        abIncrementPacket()
    );
    
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
            getInitialStorage(),
            NULLADDRESS
    );

    ;; determine the expected storage
    cell $expectedStorage = $storage.cl::nestedDict256::set(
        Counter::inboundCount,
        ;; the remoteEid in lzReceive is the path's srcEid
        SRC_EID,
        1
    );

    return test::handler::shouldPass(
        lzReceiveExecute,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<call>(
                getCaller(),
                Channel::OP::LZ_RECEIVE_EXECUTE_CALLBACK,
                md::LzReceiveStatus::New(
                    true, 
                    $packet.cl::get<uint64>(lz::Packet::nonce)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) lzReceiveExecute::success::abExistingCount(cell $storage) impure {
    ;; arbitrarily set to non zero
    int inboundCount = 9;

    ;; store the inbound count
    $storage = $storage.cl::nestedDict256::set(
        Counter::inboundCount,
        ;; the remoteEid in lzReceive is the path's srcEid
        SRC_EID,
        inboundCount
    );
    setContractStorage($storage);

    cell $packet = lz::Packet::nonceless(
        _getCounterSendPath(),
        abIncrementPacket()
    );

    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        getInitialStorage(),
        NULLADDRESS
    );

    cell $expectedStorage = $storage.cl::nestedDict256::set(
        Counter::inboundCount,
        ;; the remoteEid in lzReceive is the path's srcEid
        SRC_EID,
        (inboundCount + 1)
    );

    return test::handler::shouldPass(
        lzReceiveExecute,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<call>(
                getCaller(),
                Channel::OP::LZ_RECEIVE_EXECUTE_CALLBACK,
                md::LzReceiveStatus::New(
                    true, 
                    $packet.cl::get<uint64>(lz::Packet::nonce)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) lzReceiveExecute::success::aba(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) lzReceiveExecute::success::abaExistingCount(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) increment::revert::peerNotSet(cell $storage) impure {
    return test::handler::shouldFail(
        increment,
        md::CounterIncrement::New(
            DST_EID,
            Counter::increment::ab,
            MOCK_EXTRA_OPTIONS_V1(),
            NATIVE_FEE,
            ZRO_FEE
        ),
        ERROR::PeerNotSet
    );
}

(int, slice) increment::success::basic(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    ;; Set some enforced options
    setEnforcedOptions(MOCK_OPTIONS_EXTENDED());

    cell $emptyPacket = lz::Packet::nonceless(
        _getCounterSendPath(),
        abIncrementPacket()
    );

    cell $expectedLzSendMd = md::LzSend::New(
        NATIVE_FEE,
        ZRO_FEE,
        MOCK_EXTRA_OPTIONS_V1(),
        MOCK_ENFORCED_OPTIONS_V1(),
        $emptyPacket,
        empty_cell()
    );

    int endpointAddress = _getEndpointAddress(DST_EID);

    return test::handler::shouldPass(
        increment,
        md::CounterIncrement::New(
            DST_EID,
            Counter::increment::ab,
            MOCK_EXTRA_OPTIONS_V1(),
            NATIVE_FEE,
            ZRO_FEE
        ),
        unsafeTuple([
            0,
            _newAction<call>(
                endpointAddress,
                Endpoint::OP::ENDPOINT_SEND,
                $expectedLzSendMd
            )
        ]),
        getContractStorage()
            .cl::nestedDict256::set(Counter::outboundCount, DST_EID, 1),
        txnContext
    );
}

(int, slice) increment::revert::invalidExtraOptions(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    ;; create an invalid extraOptions
    cell $invalidExtraOptions = MOCK_OPTIONS_EXTENDED().cl::set(
        md::OptionsExtended::options,
        MOCK_OPTIONS_EXTENDED()
    );

    return test::handler::shouldFail(
        increment,
        md::CounterIncrement::New(
            DST_EID,
            Counter::increment::ab,
            $invalidExtraOptions,
            NATIVE_FEE,
            ZRO_FEE
        ),
        ERROR::InvalidExtraOptions
    );
}

(int, slice) increment::revert::differentOptionTypesV1(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    ;; set some enforced options v2
    cell $enforcedOptionsExtended = md::OptionsExtended::New(
        DST_EID,
        MSG_TYPE,
        MOCK_EXTRA_OPTIONS_V2()
    );
    setEnforcedOptions($enforcedOptionsExtended);


    ;; extra options v1
    cell $extraOptions = md::OptionsExtended::New(
        DST_EID,
        MSG_TYPE,
        MOCK_EXTRA_OPTIONS_V1()
    );

    return test::handler::shouldFail(
        increment,
        md::CounterIncrement::New(
            DST_EID,
            Counter::increment::ab,
            $extraOptions,
            NATIVE_FEE,
            ZRO_FEE
        ),
        ERROR::InvalidExtraOptionsVersion
    );
}

(int, slice) increment::revert::differentOptionTypesV2(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    ;; set some enforced options v1
    cell $enforcedOptionsExtended = md::OptionsExtended::New(
        DST_EID,
        MSG_TYPE,
        MOCK_EXTRA_OPTIONS_V1()
    );
    setEnforcedOptions($enforcedOptionsExtended);


    ;; extra options v2
    cell $extraOptions = md::OptionsExtended::New(
        DST_EID,
        MSG_TYPE,
        MOCK_EXTRA_OPTIONS_V2()
    );

    return test::handler::shouldFail(
        increment,
        md::CounterIncrement::New(
            DST_EID,
            Counter::increment::ab,
            $extraOptions,
            NATIVE_FEE,
            ZRO_FEE
        ),
        ERROR::InvalidExtraOptionsVersion
    );
}

(int, slice) burn::success::basic(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    cell $path = _getCounterReceivePath();
    cell $packetId = md::PacketId::New($path, NONCE);
    int channelAddress = _getChannelAddress($path);

    return test::handler::shouldPass(
        burn,
        $packetId,
        unsafeTuple([
            0,
            _newAction<call>(
                channelAddress,
                Channel::OP::BURN,
                md::Nonce::New(NONCE)
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) burn::revert::invalidPath(cell $storage) impure {
    ;; disable the path to trigger a invalidPath
    ;; setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    cell $path = _getCounterReceivePath();
    cell $packetId = md::PacketId::New($path, NONCE);

    return test::handler::shouldFail(
        burn,
        $packetId,
        ERROR::PeerNotSet
    );
}

(int, slice) nilify::success::basic(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    cell $path = _getCounterReceivePath();
    cell $packetId = md::PacketId::New($path, NONCE);

   return test::handler::shouldPass(
       nilify,
       $packetId,
       unsafeTuple([
           0,
           _newAction<call>(
               _getChannelAddress($path),
               Channel::OP::NILIFY,
               $packetId
           )
       ]),
       getContractStorage(),
       txnContext
    );
}

(int, slice) nilify::revert::invalidPath(cell $storage) impure {
    ;; disable the path to trigger a invalidPath
    ;; setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    cell $path = _getCounterReceivePath();
    cell $packetId = md::PacketId::New($path, NONCE);

    return test::handler::shouldFail(
        nilify,
        $packetId,
        ERROR::PeerNotSet
    );
}

(int, slice) forceAbort::success::basic(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    cell $path = _getCounterSendPath();
    cell $packetId = md::PacketId::New($path, NONCE);
    cell $lzSendMd = md::LzSend::New(
        NATIVE_FEE,
        ZRO_FEE,
        MOCK_EXTRA_OPTIONS_V1(),
        MOCK_ENFORCED_OPTIONS_V1(),
        $packetId,
        empty_cell()
    );

    return test::handler::shouldPass(
        forceAbort,
        $lzSendMd,
        unsafeTuple([
            0,
            _newAction<call>(
                _getChannelAddress($path),
                Channel::OP::FORCE_ABORT,
                $lzSendMd
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) forceAbort::revert::invalidPath(cell $storage) impure {
    ;; disable the path to trigger a invalidPath
    ;; setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    cell $path = _getCounterSendPath();
    cell $packetId = md::PacketId::New($path, NONCE);
    cell $lzSendMd = md::LzSend::New(
        NATIVE_FEE,
        ZRO_FEE,
        MOCK_EXTRA_OPTIONS_V1(),
        MOCK_ENFORCED_OPTIONS_V1(),
        $packetId,
        empty_cell()
    );

    return test::handler::shouldFail(
        forceAbort,
        $lzSendMd,
        ERROR::PeerNotSet
    );
}

;; tested via setLzConfig
(int, slice) verifyPath::revert::peerNotSet(cell $storage) impure {
    ;; Do not set the peer, this is commented out on purpose
    ;; setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    ;; This can arbitrarily set configs, we are just picking rnadom potential address ie. 'Controller'
    cell $path = _getCounterSendPath();
    cell $epConfig = MOCK_EP_CONFIG(true);
    cell $configMd = lz::Config::New($path, CONTROLLER_ADDRESS, OP::RANDOM, $epConfig);

    ;; We only need to trigger a single error from in here to validate that this hooks into the verifyPath
    return test::handler::shouldFail(
        setLzConfig,
        $configMd,
        ERROR::PeerNotSet
    );
}

;; tested via setLzConfig
(int, slice) verifyPath::revert::wrongSrcOApp(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    ;; This can arbitrarily set configs, we are just picking rnadom potential address ie. 'Controller'
    cell $path = _getCounterSendPath();
    ;; set an invalid srcOApp in the path
    $path = $path.cl::set(lz::Path::srcOApp, ATTACKER_ADDRESS);

    cell $epConfig = MOCK_EP_CONFIG(true);
    cell $configMd = lz::Config::New($path, CONTROLLER_ADDRESS, OP::RANDOM, $epConfig);

    ;; We only need to trigger a single error from in here to validate that this hooks into the verifyPath
    return test::handler::shouldFail(
        setLzConfig,
        $configMd,
        ERROR::WrongSrcOApp
    );
}

;; tested via setLzConfig
(int, slice) verifyPath::revert::wrongPeer(cell $storage) impure {
    setContractStorage($storage._setAndGetPeer(DST_EID, DST_OAPP));

    ;; This can arbitrarily set configs, we are just picking rnadom potential address ie. 'Controller'
    cell $path = _getCounterSendPath();
    ;; set an invalid srcOApp in the path
    $path = $path.cl::set(lz::Path::dstOApp, ATTACKER_ADDRESS);

    cell $epConfig = MOCK_EP_CONFIG(true);
    cell $configMd = lz::Config::New($path, CONTROLLER_ADDRESS, OP::RANDOM, $epConfig);

    ;; We only need to trigger a single error from in here to validate that this hooks into the verifyPath
    return test::handler::shouldFail(
        setLzConfig,
        $configMd,
        ERROR::WrongPeer
    );
}

(int, slice) channelSendCallback::success::noError(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

;; Doesnt really revert, but it does revert some state
(int, slice) channelSendCallback::revert::error(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) deployChannel::success::basic(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) deployConnection::success::basic(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) lzSend::success::noCallNanos(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) lzSend::success::callNanos(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) lzSend::revert::noPeer(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

(int, slice) lzSend::revert::invalidExtraOptions(cell $storage) impure {
    return (TEST_SUCCESS, "implement me");
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([lzReceivePrepare::success::basic, "lzReceivePrepare::success::basic"])
            .tpush([lzReceivePrepare::revert::notEnoughGas, "lzReceivePrepare::revert::notEnoughGas"])
            .tpush([lzReceiveExecute::success::ab, "lzReceiveExecute::success::ab"])
            .tpush([lzReceiveExecute::success::abExistingCount, "lzReceiveExecuteExistingCount::success::abExistingCount"])
            .tpush([lzReceiveExecute::success::aba, "lzReceiveExecute::success::aba"])
            .tpush([lzReceiveExecute::success::abaExistingCount, "lzReceiveExecute::success::abaExistingCount"])
            .tpush([increment::revert::peerNotSet, "increment::revert::peerNotSet"])
            .tpush([nilify::success::basic, "nilify::success::basic"])
            .tpush([nilify::revert::invalidPath, "nilify::revert::invalidPath"])
            .tpush([forceAbort::success::basic, "forceAbort::success::basic"])
            .tpush([forceAbort::revert::invalidPath, "forceAbort::revert::invalidPath"])
            .tpush([increment::success::basic, "increment::success::basic"])
            .tpush([increment::revert::invalidExtraOptions, "increment::revert::invalidExtraOptions"])
            .tpush([increment::revert::differentOptionTypesV1, "increment::revert::differentOptionTypesV1"])
            .tpush([increment::revert::differentOptionTypesV2, "increment::revert::differentOptionTypesV2"])
            .tpush([burn::success::basic, "burn::success::basic"])
            .tpush([burn::revert::invalidPath, "burn::revert::invalidPath"])
            .tpush([verifyPath::revert::peerNotSet, "verifyPath::revert::peerNotSet"])
            .tpush([verifyPath::revert::wrongSrcOApp, "verifyPath::revert::wrongSrcOApp"])
            .tpush([verifyPath::revert::wrongPeer, "verifyPath::revert::wrongPeer"])
            .tpush([channelSendCallback::success::noError, "channelSendCallback::success::noError"])
            .tpush([channelSendCallback::revert::error, "channelSendCallback::revert::error"])
            .tpush([deployChannel::success::basic, "deployChannel::success::basic"])
            .tpush([deployConnection::success::basic, "deployConnection::success::basic"])
            .tpush([lzSend::success::noCallNanos, "lzSend::success::noCallNanos"])
            .tpush([lzSend::success::callNanos, "lzSend::success::callNanos"])
            .tpush([lzSend::revert::noPeer, "lzSend::revert::noPeer"])
            .tpush([lzSend::revert::invalidExtraOptions, "lzSend::revert::invalidExtraOptions"])
    );
}
