;; https://github.com/LayerZero-Labs/monorepo/blob/main/packages/layerzero-v2/evm/oapp/contracts/oapp/examples/OmniCounterAbstract.sol
#include "../../classes/lz/Packet.fc";
#include "../../classes/lz/Path.fc";
#include "../../classes/msgdata/CounterIncrement.fc";
#include "../../classes/msgdata/ExtendedMd.fc";
#include "../../classes/msgdata/Nonce.fc";
#include "../../classes/msgdata/OptionsV1.fc";
#include "../../classes/msgdata/PacketId.fc";
#include "../../classes/msgdata/SetAddress.fc";
#include "../../classes/msgdata/SetPeer.fc";
#include "../../funC++/handlerCore.fc";
#include "../../funC++/baseInterface.fc";
#include "../../protocol/channel/interface.fc";
#include "../../protocol/interfaces.fc";
#include "../../protocol/msglibs/BytesEncoder.fc";
#include "../../classes/msgdata/LzSend.fc";

#include "interface.fc";
#include "storage.fc";

#include "../baseOApp/handler.fc";
#include "../../funC++/classlib.fc";
#include "../../protocol/core/abstract/protocolHandler.fc";
#include "../../protocol/msglibs/BytesDecoder.fc";

;;; ================STORAGE FUNCTIONS=====================
cell getBaseOAppStorage() impure method_id {
    return getContractStorage().cl::get<objRef>(Counter::baseOAppStorage);
}

cell setBaseOAppStorage(cell $storage, cell $newBaseOAppStorage) {
    return $storage.cl::set(Counter::baseOAppStorage, $newBaseOAppStorage);
}

;;; ================INTERFACE FUNCTIONS=====================

(cell, tuple) _initialize(cell $md) impure inline {
    return preamble();
}

int lzReceiveGas(cell $packet) impure inline method_id {
    return 10 * 1000;
}

int lzSendGas(int opcode, cell $input) impure method_id {
    return 10 * 1000;
}

;;; ================PERMISSION FUNCTIONS=====================

() _checkPermissions(int op, cell $md) impure inline {
    ;; Check for custom ops first, then *must* call the baseOAppCheckPermissions
    if (
        (op == Counter::OP::INCREMENT)
        | (op == Counter::OP::FAIL_NEXT_LZ_RECEIVE)
        | (op == OP::ForceAbort)
    ) {
        return ();
    } else {
        return _oAppCheckPermissions(op, $md);
    }
}

;;; ==========================HANDLERS=====================================

;;; =============== Send flow handlers ==============

;; counter increment
;; in: external from user
;; out: endpoint/handler.fc/send
;; @out_md lzSend
tuple increment(cell $md) impure inline {
    (cell $storage, tuple actions) = preamble();

    int incrementType = $md.cl::get<uint8>(md::CounterIncrement::incrementType);
    int srcEid = getBaseOAppStorage().cl::get<uint32>(BaseOApp::eid);

    tuple message = BytesEncoder::New()
        .BytesEncoder::feed<uint8>(incrementType)
        .BytesEncoder::feed<uint32>(srcEid);
    if (incrementType == Counter::increment::ab) {
        cell extraOptions = $md.cl::get<objRef>(md::CounterIncrement::extraOptions);
        ifnot (extraOptions.cell_is_empty()) {
            int receiveValue = extraOptions.cl::get<uint256>(md::OptionsV1::lzReceiveValue);
            message = message.BytesEncoder::feed<uint32>(receiveValue);
        }
    } elseif (incrementType == Counter::increment::aba) {
        message = message
            .BytesEncoder::feed<coins>($md.cl::get<coins>(md::CounterIncrement::nativeFee))
            .BytesEncoder::feed<coins>($md.cl::get<coins>(md::CounterIncrement::zroFee))
        ;
    } else {
        throw(Counter::ERROR::invalidIncrementType);
    }

    int dstEid = $md.cl::get<uint32>(md::CounterIncrement::dstEid);

    actions = _lzSend(
        dstEid,
        incrementType,
        $md.cl::get<coins>(md::CounterIncrement::nativeFee),
        $md.cl::get<coins>(md::CounterIncrement::zroFee),
        $md.cl::get<objRef>(md::CounterIncrement::extraOptions),
        message.BytesEncoder::serialize(),
        0,
        empty_cell(),
        actions
    );

    ;; pull the counter dict
    (int existingCount, int found) = $storage
        .cl::nestedDict256::get<uint256>(Counter::outboundCount, dstEid);
    int count = (~ found) ? 1 : existingCount + 1;

    ;; store the state
    setContractStorage(
        $storage.cl::nestedDict256::set(Counter::outboundCount, dstEid, count)
    );

    return actions;
}

;;; ============== Custom inside handlers ====================

(cell, tuple) _sendCallback(cell $storage, tuple actions, cell $messagingReceipt) impure inline {
    int errorCode = $messagingReceipt.cl::get<uint16>(md::MessagingReceipt::errorCode);
    if (errorCode != Channel::NO_ERROR) {
        cell $lzSend = $messagingReceipt.cl::get<objRef>(md::MessagingReceipt::lzSend);
        cell $packet = $lzSend.cl::get<objRef>(md::LzSend::packet);
        int remoteEid = $packet
            .cl::get<objRef>(lz::Packet::path)
            .cl::get<uint32>(lz::Path::dstEid);
        (int existingCount, int found) = $storage
            .cl::nestedDict256::get<uint256>(Counter::outboundCount, remoteEid);
        if (found) {
            $storage = $storage
                .cl::nestedDict256::set(
                    Counter::outboundCount,
                    remoteEid,
                    existingCount - 1
                );
        }
    }

    return ($storage, actions);
}

int _lzReceiveGas(cell $packet) impure inline method_id {
    return 100; ;; this should the amount of gas required to execute the packet
}

tuple _lzReceivePrepare(cell $storage, tuple actions, cell $packet) impure inline method_id {
    return actions;
}

(cell, tuple, int) _lzReceiveExecute(cell $storage, tuple actions, cell $packet) impure inline {
    int remoteEid = $packet
        .cl::get<objRef>(lz::Packet::path)
        .cl::get<uint32>(lz::Path::srcEid);

    slice message_s = $packet.cl::get<cellRef>(lz::Packet::message).begin_parse();

    int messageType = message_s~load_uint8();
    int successOrFail = true;
    if ($storage.cl::get<bool>(Counter::failNextLzReceive)) {
        $storage = $storage.cl::set(Counter::failNextLzReceive, false);
        successOrFail = false;
        return ($storage, actions, successOrFail);
    } elseif (messageType == Counter::increment::ab) {
        ;; do nothing
    } elseif (messageType == Counter::increment::aba) {
        var [balance, _] = get_balance();
        (message_s, int nativeFee) = BytesDecoder::loadBytes(message_s, 16);
        (message_s, int zroFee) = BytesDecoder::loadBytes(message_s, 16);
        actions = _lzSend(
            remoteEid,
            Counter::increment::ab, ;; get enforced options for B->A, which is a ab incrementat this point
            nativeFee,
            ;; 100,
            zroFee,
            cl::nullObject(), ;; todo: non-empty options for ABA
            begin_cell().store_uint8(Counter::increment::ab).end_cell(),
            ;; todo: this should be passed in via options and not hardcoded
            250000000, ;; send with 0.25 ton
            empty_cell(),
            actions
        );
        ;; pull the counter dict
        (int existingCount, int found) = $storage
            .cl::nestedDict256::get<uint256>(Counter::outboundCount, remoteEid);
        int count = (~ found) ? 1 : existingCount + 1;

        ;; store the state
        $storage = $storage
            .cl::nestedDict256::set(
                Counter::outboundCount,
                remoteEid,
                count
            );
    }

    ;; pull the counter dict
    (int existingCount, int found) = $storage
        .cl::nestedDict256::get<uint256>(Counter::inboundCount, remoteEid);
    int count = (~ found) ? 1 : existingCount + 1;

    return (
        $storage
            .cl::nestedDict256::set(Counter::inboundCount, remoteEid, count),
        actions,
        successOrFail
    );
}

tuple failNextLzReceive() impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    setContractStorage($storage.cl::set(Counter::failNextLzReceive, true));
    return actions;
}
