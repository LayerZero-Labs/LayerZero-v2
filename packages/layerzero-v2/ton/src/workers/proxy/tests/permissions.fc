#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../workers/core/tests/workerStorageTestUtils.fc";
#include "../../../../tests/mocks.fc";

#include "../../../funC++/baseInterface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/txnContext.fc";
#include "../../../funC++/constants.fc";
#include "../../../funC++/handlerCore.fc";

#include "../../../../tests/consts.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Proxy::Permissions"; }

cell createContractStorage() impure {
    setContractStorage(
        Proxy::New(
            AddressList::serialize(unsafeTuple(
                [ADMIN_ONE_ADDRESS, ADMIN_TWO_ADDRESS]
            )),
            0
        )
    );
    
    return getContractStorage();
}

() _createInitializedStorage() impure { }

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================


(int, slice) checkPermissions::callContract::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Proxy::OP::CALL_CONTRACT,
        MOCK_DEFAULT_PRICE_FEED_STORAGE()
    );
}

(int, slice) checkPermissions::callContract::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Proxy::OP::CALL_CONTRACT,
        MOCK_DEFAULT_PRICE_FEED_STORAGE()
    );
}

(int, slice) checkPermissions::callContract::notRegistered(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Proxy::OP::CALL_CONTRACT,
        MOCK_DEFAULT_PRICE_FEED_STORAGE()
    );
}

(int, slice) checkPermissions::claimTon::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::CLAIM_TON,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTon::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::CLAIM_TON,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTon::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Worker::OP::CLAIM_TON,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setAdmins::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::SET_ADMINS,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setAdmins::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::SET_ADMINS,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setAdmins::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Worker::OP::SET_ADMINS,
        cl::nullObject()
    );
}


(int, slice) checkPermissions::callback::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        OP::RANDOM,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::toggleCallback::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Proxy::OP::TOGGLE_CALLBACK,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::toggleCallback::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Proxy::OP::TOGGLE_CALLBACK,
        cl::nullObject()
    );
}


(int, slice) checkPermissions::toggleCallback::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Proxy::OP::TOGGLE_CALLBACK,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::emitEvent::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Proxy::OP::EMIT_EVENT,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::emitEvent::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Proxy::OP::EMIT_EVENT,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::emitEvent::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Proxy::OP::EMIT_EVENT,
        cl::nullObject()
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([checkPermissions::callContract::success::admin1, "checkPermissions::callContract::success::admin1"])
            .tpush([checkPermissions::callContract::success::admin2, "checkPermissions::callContract::success::admin2"])
            .tpush([checkPermissions::callContract::notRegistered, "checkPermissions::callContract::notRegistered"])
            .tpush([checkPermissions::claimTon::success::admin1, "checkPermissions::claimTON::success::admin1"])
            .tpush([checkPermissions::claimTon::success::admin2, "checkPermissions::claimTON::success::admin2"])
            .tpush([checkPermissions::claimTon::revert::notAdmin, "checkPermissions::claimTON::revert::notAdmin"])
            .tpush([checkPermissions::setAdmins::success::admin1, "checkPermissions::setAdmins::success::admin1"])
            .tpush([checkPermissions::setAdmins::success::admin2, "checkPermissions::setAdmins::success::admin2"])
            .tpush([checkPermissions::setAdmins::revert::notAdmin, "checkPermissions::setAdmins::revert::notAdmin"])
            .tpush([checkPermissions::callback::success::basic, "checkPermissions::callback::success::basic"])
            .tpush([checkPermissions::toggleCallback::success::admin1, "checkPermissions::toggleCallback::success::admin1"])
            .tpush([checkPermissions::toggleCallback::success::admin2, "checkPermissions::toggleCallback::success::admin2"])
            .tpush([checkPermissions::toggleCallback::revert::notAdmin, "checkPermissions::toggleCallback::revert::notAdmin"])
            .tpush([checkPermissions::emitEvent::success::admin1, "checkPermissions::emitEvent::success::admin1"])
            .tpush([checkPermissions::emitEvent::success::admin2, "checkPermissions::emitEvent::success::admin2"])
            .tpush([checkPermissions::emitEvent::revert::notAdmin, "checkPermissions::emitEvent::revert::notAdmin"])
    );
}