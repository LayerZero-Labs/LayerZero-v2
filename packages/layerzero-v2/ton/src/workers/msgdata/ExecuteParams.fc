#include "../../funC++/classlib.fc";

;; required storage name
const int md::ExecuteParams::NAME = "execParams"u;

;; struct ExecuteParam {
;;     uint32 vid; // no vid?
;;     address target;
;;     bytes callData;
;;     uint256 expiration;
;; }

;; field names
const int md::ExecuteParams::target = 0;
const int md::ExecuteParams::callData = 1;
const int md::ExecuteParams::expiration = 2;
const int md::ExecuteParams::opcode = 3;
const int md::ExecuteParams::forwardingAddress = 4;

cell md::ExecuteParams::New(
    int target,
    cell callData,
    int expiration,
    int opcode,
    int forwardingAddress
) impure inline method_id {
    return cl::declare(
        md::ExecuteParams::NAME,
        unsafeTuple([
            [cl::t::address, target],              ;; md::ExecuteParams::target
            [cl::t::objRef, callData],             ;; md::ExecuteParams::callData
            [cl::t::uint64, expiration],           ;; md::ExecuteParams::expiration
            [cl::t::uint32, opcode],               ;; md::ExecuteParams::opcode
            [cl::t::address, forwardingAddress]    ;; md::ExecuteParams::forwardingAddress
        ])
    );
}

;; ========================== Object Builders===========================w==========

const int md::ExecuteParams::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 5);
const int md::ExecuteParams::_headerFillerBits = _HEADER_WIDTH - md::ExecuteParams::_headerInfoBits;

cell md::ExecuteParams::build(
    int target,
    cell callData,
    int expiration,
    int opcode,
    int forwardingAddress
) impure inline {
    return begin_cell()
        .store_uint(593196021158614130743421175296147950525415477349115, md::ExecuteParams::_headerInfoBits)
        .store_ones(md::ExecuteParams::_headerFillerBits)
        .store_uint256(target)
        .store_ref(callData)
        .store_uint64(expiration)
        .store_uint32(opcode)
        .store_uint256(forwardingAddress)
        .end_cell();
}

;; ========================== Object Getters=====================================

const int md::ExecuteParams::_targetOffset = _HEADER_WIDTH;
const int md::ExecuteParams::_expirationOffset = md::ExecuteParams::_targetOffset + 256;
const int md::ExecuteParams::_opcodeOffset = md::ExecuteParams::_expirationOffset + 64;
const int md::ExecuteParams::_forwardingAddressOffset = md::ExecuteParams::_opcodeOffset + 32;

int md::ExecuteParams::getOpcode(cell $self) impure inline {
    return $self.cellPreloadUint32At(md::ExecuteParams::_opcodeOffset);
}

;; (expiration, target, opcode, forwardingAddress)
(int, int, int, int) md::ExecuteParams::deserialize(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadUint64At(md::ExecuteParams::_expirationOffset),
        selfSlice.preloadAddressAt(md::ExecuteParams::_targetOffset),
        selfSlice.preloadUint32At(md::ExecuteParams::_opcodeOffset),
        selfSlice.preloadAddressAt(md::ExecuteParams::_forwardingAddressOffset)
    );
}

;; (target, opcode, callData)
(int, int, cell) md::ExecuteParams::getActionArgs(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadAddressAt(md::ExecuteParams::_targetOffset),
        selfSlice.preloadUint32At(md::ExecuteParams::_opcodeOffset),
        selfSlice.preload_ref_at(0)
    );
}
