#include "../../../../tests/baseContractTest.fc";
#include "workerStorageTestUtils.fc";
#include "../../../../tests/mocks.fc";

#include "../../../funC++/baseInterface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/txnContext.fc";
#include "../../../funC++/constants.fc";
#include "../../../funC++/handlerCore.fc";

#include "../../../../tests/consts.fc";

#include "../interface.fc";
#include "../abstract/workerHandler.fc";
#include "../workerCoreStorage.fc";

#include "../../../classes/msgdata/MdAddress.fc";

#include "dummyHandler.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "workCore"; }

;; A mock storage to allow testing the abstract worker core contract
cell MockWorker::New() impure {
    cell admins = AddressList::serialize(
        unsafeTuple([ADMIN_ONE_ADDRESS, ADMIN_TWO_ADDRESS])
    );

    return cl::declare(
        "MockWorker"u,
        unsafeTuple([
            [cl::t::objRef, WorkerCoreStorage::New(admins, PROXY_ADDRESS, 0)]
        ])
    );
}

cell createContractStorage() impure {
    setContractStorage(MockWorker::New());
    return getContractStorage();
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) claimTon::success::basic() impure {
    return test::handler::shouldPass(
        claimTon,
        md::ClaimTon::New(MOCK_CLAIM_AMOUNT, ARBITRARY_ADDRESS),
        unsafeTuple([
            MOCK_CLAIM_AMOUNT,
            _newAction<payment>(
                ARBITRARY_ADDRESS,
                MOCK_CLAIM_AMOUNT,
                MOCK_CLAIM_AMOUNT
            ),
            _newAction<event>(
                Worker::event::CLAIMED_TON,
                md::ClaimTon::New(MOCK_CLAIM_AMOUNT, ARBITRARY_ADDRESS)
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) claimTon::revert::lessThanOneTonRemaining() impure {
    int claimAmount = getInitialContractBalance() - ONE_TON + 1;
    return test::handler::shouldFail(
        claimTon,
        md::ClaimTon::New(claimAmount, ARBITRARY_ADDRESS),
        Worker::ERROR::insufficientBalance
    );
}

(int, slice) claimTonFromProxy::success::basic() impure {
    cell $claimTon = md::ClaimTon::New(MOCK_CLAIM_AMOUNT, ARBITRARY_ADDRESS);
    return test::handler::shouldPass(
        claimTonFromProxy,
        $claimTon,
        unsafeTuple([
            0,
            _newAction<event>(
                Worker::event::CLAIMED_TON_FROM_PROXY,
                $claimTon
            ),
            _newAction<call>(
                PROXY_ADDRESS,
                Worker::OP::CLAIM_TON,
                $claimTon
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) setAdmins::success::basic() impure {
    cell $admins = AddressList::serialize(unsafeTuple(
        [getCaller(), ARBITRARY_ADDRESS]
    ));

    return test::handler::shouldPass(
        setAdmins,
        $admins,
        unsafeTuple([
            0,
            _newAction<event>(
                Worker::event::ADMINS_SET,
                $admins
            )
        ]),
        getContractStorage().setCoreStorage(
            getCoreStorage().cl::set(
                WorkerCoreStorage::admins,
                $admins
            )
        ),
        txnContext
    );
}

(int, slice) setProxyAddress:success::basic() impure {
    return test::handler::shouldPass(
        setProxyAddress,
        md::SetAddress::New(PROXY_ADDRESS),
        emptyActions(),
        getContractStorage().setCoreStorage(
            getCoreStorage().cl::set(WorkerCoreStorage::proxy, PROXY_ADDRESS)
        ),
        txnContext
    );
}

(int, slice) callViaProxy::success::setWorkerFeelibStorage() impure {
    cell $executeParams = md::ExecuteParams::New(
        ARBITRARY_ADDRESS,
        MOCK_EXTRA_DATA(),
        0,
        Uln::OP::SET_WORKER_FEELIB_STORAGE,
        NULLADDRESS
    );

    return test::handler::shouldPass(
        callViaProxy,
        $executeParams,
        unsafeTuple([
            0,
            _newAction<call>(
                PROXY_ADDRESS,
                Proxy::OP::CALL_CONTRACT,
                $executeParams
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) callViaProxy::success::deregisterWorkerFeeLib() impure {
    cell $executeParams = md::ExecuteParams::New(
        ARBITRARY_ADDRESS,
        MOCK_EXTRA_DATA(),
        0,
        Uln::OP::DEREGISTER_WORKER_FEELIB,
        NULLADDRESS
    );

    return test::handler::shouldPass(
        callViaProxy,
        $executeParams,
        unsafeTuple([
            0,
            _newAction<call>(
                PROXY_ADDRESS,
                Proxy::OP::CALL_CONTRACT,
                $executeParams
            )
        ]),
        getContractStorage(),
        txnContext
    );
}


(int, slice) callViaProxy::fail::randomOpcode() impure {
    cell $executeParams = md::ExecuteParams::New(
        ARBITRARY_ADDRESS,
        MOCK_EXTRA_DATA(),
        0,
        OP::RANDOM,
        NULLADDRESS
    );

    return test::handler::shouldFail(
        callViaProxy,
        $executeParams,
        Worker::ERROR::invalidSignedOpcode
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([initializeTestStorage, "initializeTestStorage"])
            .tpush([claimTon::success::basic, "claimTon::success::basic"])
            .tpush([claimTon::revert::lessThanOneTonRemaining, "claimTon::revert::lessThanOneTonRemaining"])
            .tpush([claimTonFromProxy::success::basic, "claimTonFromProxy::success::basic"])
            .tpush([setAdmins::success::basic, "setAdmins::success::basic"])
            .tpush([setProxyAddress:success::basic, "setProxyAddress:success::basic"])
            .tpush([callViaProxy::success::setWorkerFeelibStorage, "callViaProxy::success::setWorkerFeelibStorage"])
            .tpush([callViaProxy::success::deregisterWorkerFeeLib, "callViaProxy::success::deregisterWorkerFeeLib"])
            .tpush([callViaProxy::fail::randomOpcode, "callViaProxy::fail::randomOpcode"])
    );
}