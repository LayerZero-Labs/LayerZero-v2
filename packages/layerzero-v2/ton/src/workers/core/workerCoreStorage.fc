#include "../../funC++/classlib.fc";

#include "interface.fc";

;; !!! If you put this storage anywhere other than index 0 of your custom contract storage,
;; you are gunna have a bad time
const int WORKER_CORE_STORAGE_IDX = 0;

;; required object name
const int WorkerCoreStorage::NAME = "wrkCorStor"u;

;; field names
const int WorkerCoreStorage::admins = 0;
const int WorkerCoreStorage::proxy = 1;
const int WorkerCoreStorage::version = 2;

;; In all blockchains with atomic cross-contract call, we can use src/dst/sender/receiver
;; because the send channel doesn't exist (it's just a nonce).
;; In TON, we need both send/receive channels, so we use local/remote to provide
;; a context-free way to refer to the two ends of the channel.
;; The direction is inferred by the context of the contract (send vs receive).
;; The srcOApp is the 256-bit hashpart of a standard address.
cell WorkerCoreStorage::New(cell admins, int proxy, int version) impure inline method_id {
    return cl::declare(
        WorkerCoreStorage::NAME,
        unsafeTuple([
            [cl::t::addressList, admins],   ;; WorkerCoreStorage::admins
            [cl::t::address, proxy],        ;; WorkerCoreStorage::proxy
            [cl::t::uint256, version]       ;; WorkerCoreStorage::version
        ])
    );
}

cell getCoreStorage() impure inline {
    return getContractStorage().cl::get<objRef>(WORKER_CORE_STORAGE_IDX);
}

cell setCoreStorage(cell $storage, cell $newCoreStorage) impure inline {
    return $storage.cl::set(WORKER_CORE_STORAGE_IDX, $newCoreStorage);
}

const int WorkerCoreStorage::_proxyOffset = _HEADER_WIDTH;
const int WorkerCoreStorage::_versionOffset = WorkerCoreStorage::_proxyOffset + 256;

cell WorkerCoreStorage::getAdmins(cell $self) impure inline {
    return $self.cellPreloadRefAt(0);
}

int WorkerCoreStorage::getProxy(cell $self) impure inline {
    return $self.cellPreloadAddressAt(WorkerCoreStorage::_proxyOffset);
}

int getProxyAddress() impure inline {
    return getCoreStorage().WorkerCoreStorage::getProxy();
}

cell getAdmins() impure inline {
    return getCoreStorage().WorkerCoreStorage::getAdmins();
}
