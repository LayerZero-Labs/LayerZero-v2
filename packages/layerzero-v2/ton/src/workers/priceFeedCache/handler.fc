#include "../core/abstract/workerHandler.fc";

#include "../core/interface.fc";

#include "../../funC++/handlerCore.fc";

#include "../../classes/msgdata/MdAddress.fc";

#include "../msgdata/ExecuteParams.fc";

#include "../proxy/interface.fc";
#include "../../protocol/channel/interface.fc";
#include "../../protocol/msglibs/ultralightnode/uln/interface.fc";

#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/priceFeedFeeLib/storage.fc";

#include "interface.fc";
#include "storage.fc";

;;; ==========================PERMISSION FUNCTIONS=================================

;; any of the admins can update the priceFeed cache -> priceFeedFeeLib
;; but only the owner can call "callContract" from the priceFeedCache
() _checkPermissions(int op, cell $md) impure inline {
    if (op == Proxy::OP::HANDLE_CALLBACK) {
        return ();
    }
    return assertAdmin();
}

;;; ==========================HANDLERS=====================================

tuple claimTon(cell $coinsAmount) impure inline {
    return _claimTon(emptyActions(), $coinsAmount);
}

tuple updatePrice(cell $mdAddress) impure inline {
    (cell $storage, tuple actions) = preamble(); 

    (cell $ulnPriceFeed, int targetAddress) = $mdAddress.md::MdAddress::deserialize();
    (
        int priceRatio,
        int gasPriceInUnit,
        int gasPerByte
    ) = PriceFeedFeelib::utils::getFirstThreeFields($ulnPriceFeed);

    cell $newPfStorage = $storage
        .PriceFeedCache::getPriceFeedFeeLibStorage()
        .PriceFeedFeelib::setFirstThreeFields(priceRatio, gasPriceInUnit, gasPerByte);

    setContractStorage(
        $storage.PriceFeedCache::setPriceFeedFeeLibStorage($newPfStorage)
    );

    ;; call into the proxy to update the priceFeedFeeLib
    return _callViaProxy(
        actions,
        md::ExecuteParams::build(
            targetAddress, ;; usually the uln
            $newPfStorage, ;; new priceFeedFeeLib storage
            0,
            Uln::OP::SET_WORKER_FEELIB_STORAGE,
            NULLADDRESS
        )
    );
}

tuple updateNativePrice(cell $mdAddress) impure inline {
    (cell $storage, tuple actions) = preamble();

    (cell $ulnPriceFeed, int targetAddress) = $mdAddress.md::MdAddress::deserialize();
    int nativePriceUsd = $ulnPriceFeed.PriceFeedFeelib::getNativePriceUsd();

    cell $newPfStorage = $storage
        .PriceFeedCache::getPriceFeedFeeLibStorage()
        .PriceFeedFeelib::setNativePriceUsd(nativePriceUsd);

    setContractStorage(
        $storage.PriceFeedCache::setPriceFeedFeeLibStorage($newPfStorage)
    );

    ;; call into the proxy to update the priceFeedFeeLib
    return _callViaProxy(
        actions,
        md::ExecuteParams::build(
            targetAddress, ;; usually the uln
            $newPfStorage, ;; new priceFeedFeeLib storage
            0,
            Uln::OP::SET_WORKER_FEELIB_STORAGE,
            NULLADDRESS
        )
    );
}

;; ------- custom handlers for op/arb price feed caches -------

;; update base price and op price
tuple updateOpPrices(cell $mdAddress) impure inline {
    (cell $storage, tuple actions) = preamble(); 

    cell $oldPfStorage = $storage.PriceFeedCache::getPriceFeedFeeLibStorage();
    cell $oldOpExtension = $oldPfStorage.PriceFeedFeelib::getOptimismExtension();

    (cell $ulnPriceFeed, int targetAddress) = $mdAddress.md::MdAddress::deserialize();
    (
        int priceRatio,
        int gasPriceInUnit,
        int gasPerByte
    ) = PriceFeedFeelib::utils::getFirstThreeFields($ulnPriceFeed);

    cell $incomingOpExtension = $ulnPriceFeed.PriceFeedFeelib::getOptimismExtension();
    (
        int opPriceRatio,
        int opGasPriceInUnit,
        int opGasPerByte
    ) = PriceFeedFeelib::utils::getFirstThreeFields($incomingOpExtension);

    cell $newOpExtension = $oldOpExtension.PriceFeedFeelib::setFirstThreeFields(
        opPriceRatio,
        opGasPriceInUnit,
        opGasPerByte
    );

    cell $newPfStorage = $oldPfStorage
        .PriceFeedFeelib::setPricesAndOptimismExtension(
            priceRatio,
            gasPriceInUnit,
            gasPerByte,
            $newOpExtension
        );

    setContractStorage(
        $storage.PriceFeedCache::setPriceFeedFeeLibStorage($newPfStorage)
    );

    ;; call into the proxy to update the priceFeedFeeLib
    return _callViaProxy(
        actions,
        md::ExecuteParams::build(
            targetAddress, ;; usually the uln
            $newPfStorage, ;; new priceFeedFeeLib storage
            0,
            Uln::OP::SET_WORKER_FEELIB_STORAGE,
            NULLADDRESS
        )
    );
}

;; update base native price and op native price
tuple updateOpNativePrices(cell $mdAddress) impure inline {
    (cell $storage, tuple actions) = preamble();

    cell $oldPfStorage = $storage.PriceFeedCache::getPriceFeedFeeLibStorage();
    cell $oldOpExtension = $oldPfStorage.PriceFeedFeelib::getOptimismExtension();

    (cell $ulnPriceFeed, int targetAddress) = $mdAddress.md::MdAddress::deserialize();

    int nativePriceUsd = $ulnPriceFeed.PriceFeedFeelib::getNativePriceUsd();
    cell $incomingOpExtension = $ulnPriceFeed.PriceFeedFeelib::getOptimismExtension();

    int opNativePriceUsd = $incomingOpExtension.PriceFeedFeelib::getNativePriceUsd();
    cell $newOpExtension = $oldOpExtension.PriceFeedFeelib::setNativePriceUsd(opNativePriceUsd);

    cell $newPfStorage = $oldPfStorage
        .PriceFeedFeelib::setNativePriceUsdAndOptimismExtension(
            nativePriceUsd,
            $newOpExtension
        );

    setContractStorage(
        $storage.PriceFeedCache::setPriceFeedFeeLibStorage($newPfStorage)
    );

    ;; call into the proxy to update the priceFeedFeeLib
    return _callViaProxy(
        actions,
        md::ExecuteParams::build(
            targetAddress, ;; usually the uln
            $newPfStorage, ;; new priceFeedFeeLib storage
            0,
            Uln::OP::SET_WORKER_FEELIB_STORAGE,
            NULLADDRESS
        )
    );
}

;; update arb extension
tuple updateArbExtension(cell $mdAddress) impure inline {
    (cell $storage, tuple actions) = preamble();

    (cell $ulnPriceFeed, int targetAddress) = $mdAddress.md::MdAddress::deserialize();
    cell $arbExtension = $ulnPriceFeed.PriceFeedFeelib::getArbitrumExtension();

    cell $newPfStorage = $storage
        .PriceFeedCache::getPriceFeedFeeLibStorage()
        .PriceFeedFeelib::setArbitrumExtension($arbExtension);

    setContractStorage(
        $storage.PriceFeedCache::setPriceFeedFeeLibStorage($newPfStorage)
    );

    ;; call into the proxy to update the priceFeedFeeLib
    return _callViaProxy(
        actions,
        md::ExecuteParams::build(
            targetAddress, ;; usually the uln
            $newPfStorage, ;; new priceFeedFeeLib storage
            0,
            Uln::OP::SET_WORKER_FEELIB_STORAGE,
            NULLADDRESS
        )
    );
}

tuple callViaProxy(cell $executeParams) impure inline {
    return _callViaProxy(emptyActions(), $executeParams);
}

tuple setAdmins(cell $addressList) impure inline {
    return _setAdmins(emptyActions(), $addressList);
}

tuple setProxy(cell $setAddress) impure inline {
    return _setProxyAddress(
        emptyActions(),
        $setAddress.cl::get<address>(md::SetAddress::address)
    );
}