    #include "../../funC++/classlib.fc";

#include "../core/workerCoreStorage.fc";

#include "../../protocol/msglibs/ultralightnode/workerFeeLibs/priceFeedFeeLib/storage.fc";

;; required object name
const int PriceFeedCache::NAME = "pfCache"u;

;; field names
const int PriceFeedCache::workerCoreStorage = 0;
const int PriceFeedCache::priceFeedFeeLibStorage = 1;
const int PriceFeedCache::dstEid = 2; ;; sharding key, unused in actual logic

;; @owner manager
cell PriceFeedCache::New(cell admins, int version, cell $priceFeedFeeLib, int dstEid) impure inline method_id {
    return cl::declare(
        PriceFeedCache::NAME,
        unsafeTuple([
            [cl::t::objRef, WorkerCoreStorage::New(admins, NULLADDRESS, version)],  ;; PriceFeedCache::workerCoreStorage
            [cl::t::objRef, $priceFeedFeeLib],                                      ;; PriceFeedCache::priceFeedFeeLibStorage
            [cl::t::uint32, dstEid]                                                 ;; PriceFeedCache::dstEid
        ])
    );
}

cell PriceFeedCache::getPriceFeedFeeLibStorage(cell $self) impure inline {
    return $self.cellPreloadRefAt(1);
}

cell PriceFeedCache::setPriceFeedFeeLibStorage(cell $self, cell $priceFeedFeeLibStorage) impure inline {
    slice selfSlice = $self.begin_parse();
    return begin_cell()
        .store_slice(selfSlice.scutfirst(_HEADER_WIDTH, 1)) ;; header + refs[0]
        .store_ref($priceFeedFeeLibStorage)                 ;; new refs[1]
        .store_uint32(selfSlice.preloadUint32At(_HEADER_WIDTH)) ;; dstEid
        .end_cell();
}
