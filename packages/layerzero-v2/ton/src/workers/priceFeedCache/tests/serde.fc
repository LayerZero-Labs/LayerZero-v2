#include "../storage.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/utils.fc";

#include "../../../../tests/baseSerdeTest.fc";
#include "../../../../tests/consts.fc";
#include "../../../../tests/mocks.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "PriceFeedCache Serde"; }

;; PriceFeedCache: Has 1 getter
;;                 Has 1 setter
(int, slice) Serde::PriceFeedCache::getPriceFeedFeeLibStorage(cell $self) impure {
    int version = 1;
    cell $priceFeedCache = PriceFeedCache::New(
        MOCK_ADMIN_WORKER_LIST(),
        version,
        MOCK_DEFAULT_PRICE_FEED_STORAGE(),
        DST_EID
    );

    return test::getRef::equal(
        $priceFeedCache,
        PriceFeedCache::getPriceFeedFeeLibStorage,
        PriceFeedCache::priceFeedFeeLibStorage
    );
}

(int, slice) Serde::PriceFeedCache::setPriceFeedFeeLibStorage(cell $unused) impure {
    int version = 1;
    
    cell $priceFeedCache = PriceFeedCache::New(
        MOCK_ADMIN_WORKER_LIST(),
        version,
        MOCK_DEFAULT_PRICE_FEED_STORAGE(),
        DST_EID
    );

    cell $actualPriceFeedFeeLibStorage = $priceFeedCache.PriceFeedCache::setPriceFeedFeeLibStorage(
        MOCK_CUSTOM_PRICE_FEED_STORAGE_DEFAULT()
    );

    cell $expectedPriceFeedCache = $priceFeedCache.cl::set(
        PriceFeedCache::priceFeedFeeLibStorage,
        MOCK_CUSTOM_PRICE_FEED_STORAGE_DEFAULT()
    );

    return test::set::equal($expectedPriceFeedCache, $actualPriceFeedFeeLibStorage);
}


tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([Serde::PriceFeedCache::getPriceFeedFeeLibStorage, "Serde::PriceFeedCache::getPriceFeedFeeLibStorage"])
        .tpush([Serde::PriceFeedCache::setPriceFeedFeeLibStorage, "Serde::PriceFeedCache::setPriceFeedFeeLibStorage"])
    ;
}