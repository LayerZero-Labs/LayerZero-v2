#include "../core/abstract/workerHandler.fc";
#include "../core/interface.fc";

#include "../../classes/msgdata/MdAddress.fc";
#include "../../classes/msgdata/MdObj.fc";
#include "../../classes/msgdata/MsglibSendCallback.fc";
#include "../../classes/msgdata/Nonce.fc";

#include "../../protocol/msglibs/interface.fc";
#include "../../protocol/msglibs/ultralightnode/uln/interface.fc";
#include "../../protocol/channel/interface.fc";
#include "../proxy/interface.fc";

#include "../msgdata/NativeDrop.fc";

#include "interface.fc";
#include "storage.fc";

;;; ================PERMISSION FUNCTIONS=====================

() _checkPermissions(int op, cell $md) impure inline {
    if (op == Proxy::OP::HANDLE_CALLBACK) {
        return ();
    }
    return assertAdmin();
}

;;; ==========================HANDLERS=====================================

tuple _executorNativeDrop(tuple actions, cell $mdNativeDrop) impure inline {
    cell $storage = getContractStorage();

    int totalAmount = 0;
    tuple payees = deserializePayees($mdNativeDrop.md::NativeDrop::getPayees());

    int numPayees = payees.tlen();

    repeat (numPayees) {
        [int payeeAddress, int nativeAmount] = payees~tpopPayee();
        
        actions~pushAction<payment>(
            payeeAddress,
            nativeAmount,
            0
        );

        totalAmount += nativeAmount;
    }

    if (numPayees > 0) {
        actions = actions._emitViaProxy(
            Executor::event::NATIVE_DROP,
            $mdNativeDrop
        );
    }

    throw_if(
        Executor::ERROR::nativeDropTotalCapExceeded,
        totalAmount > $storage.Executor::getNativeDropTotalCap()
    );

    return actions;
}

tuple _executorLzReceivePrepare(tuple actions, cell $executeParams) impure inline {
    int opcode = $executeParams.md::ExecuteParams::getOpcode();
    throw_unless(
        Worker::ERROR::invalidOpcode,
        opcode == Channel::OP::LZ_RECEIVE_PREPARE
    );

    return _callContract(actions, $executeParams);
}

tuple executorCommitPacket(cell $executeParams) impure inline {
    tuple actions = emptyActions();
    int opcode = $executeParams.md::ExecuteParams::getOpcode();

    throw_unless(
        Worker::ERROR::invalidOpcode,
        opcode == Uln::OP::ULN_COMMIT_PACKET
    );

    return _callContract(actions, $executeParams);
}

tuple executorNativeDrop(cell $mdNativeDrop) impure inline {
    return _executorNativeDrop(emptyActions(), $mdNativeDrop);
}

tuple executorLzReceivePrepare(cell $executeParams) impure inline {
    return _executorLzReceivePrepare(emptyActions(), $executeParams);
}

;; md: $mdNativeDrop
;; obj: $executeParams for lzReceivePrepare
tuple executorNativeDropAndLzReceivePrepare(cell $mdObj) impure inline {
    (
        cell $executeParams,
        cell $nativeDropMd
    ) = $mdObj.md::MdObj::deserialize();
    
    return emptyActions()
        ._executorNativeDrop($nativeDropMd)
        ._executorLzReceivePrepare($executeParams);
}

tuple executorLzReceiveAlert(cell $executeParams) impure inline {
    tuple actions = emptyActions();

    int opcode = $executeParams.md::ExecuteParams::getOpcode();
    throw_unless(
        Worker::ERROR::invalidOpcode,
        opcode == Channel::OP::EMIT_LZ_RECEIVE_ALERT
    );

    return _callContract(actions, $executeParams);
}

tuple setAdmins(cell $addressList) impure inline {
    return _setAdmins(emptyActions(), $addressList);
}

tuple claimTon(cell $claimTon) impure inline {
    return _claimTon(emptyActions(), $claimTon);
}

tuple claimTonFromProxy(cell $claimTon) impure inline {
    return _claimTonFromProxy(emptyActions(), $claimTon);
}

tuple setProxy(cell $setAddress) impure inline {
    return _setProxyAddress(
        emptyActions(),
        $setAddress.cl::get<address>(md::SetAddress::address)
    );
}

tuple callViaProxy(cell $executeParams) impure inline {
    return _callViaProxy(emptyActions(), $executeParams);
}

tuple setNativeDropTotalCap(cell $coinsAmount) impure inline {
    (cell $storage, tuple actions) = preamble();
    $coinsAmount = $coinsAmount.md::CoinsAmount::sanitize();

    setContractStorage(
        $storage.cl::set(
            Executor::nativeDropTotalCap,
            $coinsAmount.cl::get<coins>(md::CoinsAmount::amount)
        )
    );

    actions = actions._emitViaProxy(
        Executor::event::NATIVE_DROP_TOTAL_CAP_SET,
        $coinsAmount
    );

    return actions;
}