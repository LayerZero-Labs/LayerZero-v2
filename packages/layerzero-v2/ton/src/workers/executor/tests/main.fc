#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "../../core/interface.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../workers/core/tests/workerStorageTestUtils.fc";
#include "../../../../tests/mocks.fc";
#include "../../../../tests/consts.fc";

#include "../../../funC++/baseInterface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/txnContext.fc";
#include "../../../funC++/constants.fc";

#include "../../../classes/msgdata/SetAddress.fc";
#include "../../../classes/msgdata/MdAddress.fc";
#include "../../../classes/msgdata/MsglibSendCallback.fc";
#include "../../../classes/msgdata/LzReceivePrepare.fc";
#include "../../msgdata/NativeDrop.fc";
#include "../../../funC++/utils.fc";
#include "../../../funC++/actions/dispatch.fc";

#include "../../../protocol/channel/interface.fc";
#include "../../../protocol/msglibs/ultralightnode/uln/interface.fc";


;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "executor"; }

cell createContractStorage() impure {
    setContractStorage(
        Executor::New(
            AddressList::serialize(unsafeTuple([ADMIN_ONE_ADDRESS, ADMIN_TWO_ADDRESS])),
            0,
            NATIVE_DROP_MAX_TOTAL
        )
    );
    setProxy(
        md::SetAddress::New(
            PROXY_ADDRESS
        )
    );
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(
        md::MdObj::build(
            cl::dict256::New(),
            cl::dict256::New()
        )
    );
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) executorLzReceivePrepare::success::basic() impure {
    cell $lzReceivePrepareMd = md::LzReceivePrepare::New(1, 0);

    cell $executeParams = md::ExecuteParams::New(
        CHANNEL_ADDRESS,
        $lzReceivePrepareMd,
        0,
        Channel::OP::LZ_RECEIVE_PREPARE,
        NULLADDRESS
    );

    return test::handler::shouldPass(
        executorLzReceivePrepare,
        $executeParams,
        unsafeTuple([
            0,
            _newAction<call>(
                CHANNEL_ADDRESS,
                Channel::OP::LZ_RECEIVE_PREPARE,
                $lzReceivePrepareMd
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorLzReceivePrepare::fail::invalidOpcode() impure {
    cell $lzReceivePrepareMd = md::LzReceivePrepare::New(1, 0);
    
    cell $executeParams = md::ExecuteParams::New(
        CHANNEL_ADDRESS,
        $lzReceivePrepareMd,
        0,
        OP::RANDOM,
        NULLADDRESS
    );

    return test::handler::shouldFail(
        executorLzReceivePrepare,
        $executeParams,
        Worker::ERROR::invalidOpcode
    );
}

(int, slice) executorCommitPacket::success::basic() impure {
    cell calldata = MOCK_PACKET_WITH_MESSAGE(MOCK_MESSAGE());

    cell $executeParams = md::ExecuteParams::New(
        ULN_ADDRESS,
        calldata,
        0,
        Uln::OP::ULN_COMMIT_PACKET,
        NULLADDRESS
    );

    return test::handler::shouldPass(
        executorCommitPacket,
        $executeParams,
        unsafeTuple([
            0,
            _newAction<call>(
                ULN_ADDRESS,
                Uln::OP::ULN_COMMIT_PACKET,
                calldata
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorCommitPacket::fail::invalidOpcode() impure {
    cell $executeParams = md::ExecuteParams::New(
        ULN_ADDRESS,
        MOCK_PACKET_WITH_MESSAGE(MOCK_MESSAGE()),
        0,
        OP::RANDOM,
        NULLADDRESS
    );

    return test::handler::shouldFail(
        executorCommitPacket,
        $executeParams,
        Worker::ERROR::invalidOpcode
    );
}


(int, slice) executorNativeDrop::success::noDrops() impure {
    return test::handler::shouldPass(
        executorNativeDrop,
        md::NativeDrop::New(empty_cell(), MOCK_PACKET_ID(), MSGLIB_MANAGER_ADDRESS),
        emptyActions(),
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorNativeDrop::success::oneDrop() impure {
    int dropAmount = 1;
    cell $md = md::NativeDrop::New(
        serializePayees(
            unsafeTuple([
                [ARBITRARY_ADDRESS, dropAmount]
            ])
        ),
        MOCK_PACKET_ID(),
        MSGLIB_MANAGER_ADDRESS
    );
    return test::handler::shouldPass(
        executorNativeDrop,
        $md,
        unsafeTuple([
            0,
            _newAction<payment>(
                ARBITRARY_ADDRESS,
                dropAmount,
                0
            ),
            _newAction<dispatch>(
                PROXY_ADDRESS,
                Proxy::OP::EMIT_EVENT,
                action::event::New(
                    Executor::event::NATIVE_DROP,
                    $md,
                    cl::nullObject()
                ),
                _gasToNanoton(PROXY_CALL_DEFAULT_GAS)
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorNativeDrop::success::maxSingleDrop() impure {
    cell $md = md::NativeDrop::New(
        serializePayees(
            unsafeTuple([
                [ARBITRARY_ADDRESS, NATIVE_DROP_MAX_TOTAL]
            ])
        ),
        MOCK_PACKET_ID(),
        MSGLIB_MANAGER_ADDRESS
    );

    return test::handler::shouldPass(
        executorNativeDrop,
        $md,
        unsafeTuple([
            0,
            _newAction<payment>(
                ARBITRARY_ADDRESS,
                NATIVE_DROP_MAX_TOTAL,
                0
            ),
            _newAction<dispatch>(
                PROXY_ADDRESS,
                Proxy::OP::EMIT_EVENT,
                action::event::New(
                    Executor::event::NATIVE_DROP,
                    $md,
                    cl::nullObject()
                ),
                _gasToNanoton(PROXY_CALL_DEFAULT_GAS)
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorNativeDrop::success::maxMultiDrop() impure {
    int firstDropAmount = NATIVE_DROP_MAX_TOTAL / 2;
    int secondDropAmount = NATIVE_DROP_MAX_TOTAL - firstDropAmount;
    cell $md = md::NativeDrop::New(
        serializePayees(
            unsafeTuple([
                [ARBITRARY_ADDRESS, firstDropAmount],
                [ARBITRARY_ADDRESS + 1, secondDropAmount]
            ])
        ),
        MOCK_PACKET_ID(),
        MSGLIB_MANAGER_ADDRESS
    );

    return test::handler::shouldPass(
        executorNativeDrop,
        $md,
        unsafeTuple([
            0,
            _newAction<payment>(ARBITRARY_ADDRESS, firstDropAmount, 0),
            _newAction<payment>(ARBITRARY_ADDRESS + 1, secondDropAmount, 0),
            _newAction<dispatch>(
                PROXY_ADDRESS,
                Proxy::OP::EMIT_EVENT,
                action::event::New(
                    Executor::event::NATIVE_DROP,
                    $md,
                    cl::nullObject()
                ),
                _gasToNanoton(PROXY_CALL_DEFAULT_GAS)
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorNativeDrop::success::multipleDrops() impure {
    tuple payees = unsafeTuple([
        [ARBITRARY_ADDRESS, NATIVE_DROP_AMOUNT],
        [ARBITRARY_ADDRESS + 1, NATIVE_DROP_AMOUNT + 1],
        [ARBITRARY_ADDRESS + 2, NATIVE_DROP_AMOUNT + 2],
        [ARBITRARY_ADDRESS + 3, NATIVE_DROP_AMOUNT + 3],
        [ARBITRARY_ADDRESS + 4, NATIVE_DROP_AMOUNT + 4],
        [ARBITRARY_ADDRESS + 5, NATIVE_DROP_AMOUNT + 5],
        [ARBITRARY_ADDRESS + 6, NATIVE_DROP_AMOUNT + 6]
    ]);
    cell $md = md::NativeDrop::New(
        serializePayees(payees),
        MOCK_PACKET_ID(),
        MSGLIB_MANAGER_ADDRESS
    );

    tuple expectedActions = emptyActions()
        .tpush(_newAction<payment>(ARBITRARY_ADDRESS + 5, NATIVE_DROP_AMOUNT + 5, 0))
        .tpush(_newAction<payment>(ARBITRARY_ADDRESS + 6, NATIVE_DROP_AMOUNT + 6, 0))
        .tpush(_newAction<payment>(ARBITRARY_ADDRESS + 2, NATIVE_DROP_AMOUNT + 2, 0))
        .tpush(_newAction<payment>(ARBITRARY_ADDRESS + 3, NATIVE_DROP_AMOUNT + 3, 0))
        .tpush(_newAction<payment>(ARBITRARY_ADDRESS + 4, NATIVE_DROP_AMOUNT + 4, 0))
        .tpush(_newAction<payment>(ARBITRARY_ADDRESS, NATIVE_DROP_AMOUNT, 0))
        .tpush(_newAction<payment>(ARBITRARY_ADDRESS + 1, NATIVE_DROP_AMOUNT + 1, 0))
        .tpush(_newAction<dispatch>(
            PROXY_ADDRESS,
            Proxy::OP::EMIT_EVENT,
            action::event::New(
                Executor::event::NATIVE_DROP,
                $md,
                cl::nullObject()
            ),
            _gasToNanoton(PROXY_CALL_DEFAULT_GAS)
        ));

    return test::handler::shouldPass(
        executorNativeDrop,
        $md,
        expectedActions,
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorNativeDrop::fail::totalCapExceededSingleDrop() impure {
    int dropAmount = getContractStorage().cl::get<coins>(Executor::nativeDropTotalCap) + 1;
    return test::handler::shouldFail(
        executorNativeDrop,
        md::NativeDrop::New(
            serializePayees(
                unsafeTuple([
                    [ARBITRARY_ADDRESS, dropAmount]
                ])
            ),
            MOCK_PACKET_ID(),
            MSGLIB_MANAGER_ADDRESS
        ),
        Executor::ERROR::nativeDropTotalCapExceeded
    );
}

(int, slice) executorNativeDrop::fail::totalCapExceededMultipleDrops() impure {
    int dropAmount = getContractStorage().cl::get<coins>(Executor::nativeDropTotalCap) + 1;

    tuple payees = unsafeTuple([
        [ARBITRARY_ADDRESS, NATIVE_DROP_MAX_TOTAL],
        [ARBITRARY_ADDRESS + 1, dropAmount]
    ]);

    return test::handler::shouldFail(
        executorNativeDrop,
        md::NativeDrop::New(
            serializePayees(payees),
            MOCK_PACKET_ID(),
            MSGLIB_MANAGER_ADDRESS
        ),
        Executor::ERROR::nativeDropTotalCapExceeded
    );
}

(int, slice) executorLzReceiveAlert::success::basic() impure {
    cell $executeParams = md::ExecuteParams::New(
        ARBITRARY_ADDRESS,
        cl::nullObject(),
        0,
        Channel::OP::EMIT_LZ_RECEIVE_ALERT,
        NULLADDRESS
    );
    return test::handler::shouldPass(
        executorLzReceiveAlert,
        $executeParams,
        unsafeTuple([
            0,
            _newAction<call>(
                ARBITRARY_ADDRESS,
                Channel::OP::EMIT_LZ_RECEIVE_ALERT,
                cl::nullObject()
            )
        ]),
        getContractStorage(),
        txnContext
    );
}


(int, slice) executorNativeDropAndLzReceivePrepare::success::basic() impure {
    cell $executeParams = md::ExecuteParams::New(
        ARBITRARY_ADDRESS,
        cl::nullObject(),
        0,
        Channel::OP::LZ_RECEIVE_PREPARE,
        NULLADDRESS
    );

    cell $nativeDrop = md::NativeDrop::New(
        empty_cell(),
        MOCK_PACKET_ID(),
        MSGLIB_MANAGER_ADDRESS
    );
    cell $mdObj = md::MdObj::build(
        $executeParams,
        $nativeDrop
    );

    return test::handler::shouldPass(
        executorNativeDropAndLzReceivePrepare,
        $mdObj,
        unsafeTuple([
            0,
            _newAction<call>(
                ARBITRARY_ADDRESS,
                Channel::OP::LZ_RECEIVE_PREPARE,
                cl::nullObject()
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) executorNativeDropAndLzReceivePrepare::fail::invalidOpcode() impure {
    cell $executeParams = md::ExecuteParams::New(
        ARBITRARY_ADDRESS,
        cl::nullObject(),
        0,
        OP::RANDOM,
        NULLADDRESS
    );

    cell $nativeDrop = md::NativeDrop::New(
        empty_cell(),
        MOCK_PACKET_ID(),
        MSGLIB_MANAGER_ADDRESS
    );

    cell $mdObj = md::MdObj::build(
        $executeParams,
        $nativeDrop
    );

    return test::handler::shouldFail(
        executorNativeDropAndLzReceivePrepare,
        $mdObj,
        Worker::ERROR::invalidOpcode
    );
}

(int, slice) setNativeDropTotalCap::success::basic() impure {
    cell $coinsAmount = md::CoinsAmount::New(NATIVE_DROP_MAX_TOTAL / 2);
    return test::handler::shouldPass(
        setNativeDropTotalCap,
        $coinsAmount,
        unsafeTuple([
            0,
            _newAction<dispatch>(
                PROXY_ADDRESS,
                Proxy::OP::EMIT_EVENT,
                action::event::New(
                    Executor::event::NATIVE_DROP_TOTAL_CAP_SET,
                    $coinsAmount,
                    cl::nullObject()
                ),
                _gasToNanoton(PROXY_CALL_DEFAULT_GAS)
            )
        ]),
        getContractStorage().cl::set(
            Executor::nativeDropTotalCap,
            $coinsAmount.cl::get<coins>(md::CoinsAmount::amount)
        ),
        txnContext
    );
}


tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([initializeTestStorage, "initializeTestStorage"])
            .tpush([executorLzReceivePrepare::success::basic, "executorLzReceivePrepare::success::basic"])
            .tpush([executorLzReceivePrepare::fail::invalidOpcode, "executorLzReceivePrepare::fail::invalidOpcode"])
            ;; .tpush([executorCommitPacket::success::basic, "executorCommitPacket::success::basic"])
            .tpush([executorNativeDrop::success::noDrops, "executorNativeDrop::success::noDrops"])
            .tpush([executorNativeDrop::success::oneDrop, "executorNativeDrop::success::oneDrop"])
            .tpush([executorNativeDrop::success::multipleDrops, "executorNativeDrop::success::multipleDrops"])
            .tpush([executorNativeDrop::success::maxSingleDrop, "executorNativeDrop::success::maxSingleDrop"])
            .tpush([executorNativeDrop::success::maxMultiDrop, "executorNativeDrop::success::maxMultiDrop"])
            .tpush([executorNativeDrop::fail::totalCapExceededSingleDrop, "executorNativeDrop::fail::totalCapExceededSingleDrop"])
            .tpush([executorNativeDrop::fail::totalCapExceededMultipleDrops, "executorNativeDrop::fail::totalCapExceededMultipleDrops"])
            .tpush([executorLzReceiveAlert::success::basic, "executorLzReceiveAlert::success::basic"])
            .tpush([executorNativeDropAndLzReceivePrepare::success::basic, "executorNativeDropAndLzReceivePrepare::success::basic"])
            .tpush([setNativeDropTotalCap::success::basic, "setNativeDropTotalCap::success::basic"])
    );
}
