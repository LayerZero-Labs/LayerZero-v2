#include "../../protocol/core/abstract/protocolMain.fc";

#include "handler.fc";
#include "interface.fc";

tuple _executeOpcode(int op, cell $md) impure inline {
    if (op == Executor::OP::NATIVE_DROP) {
        return executorNativeDrop($md);
    } elseif (op == Executor::OP::NATIVE_DROP_AND_LZ_RECEIVE_PREPARE) {
        return executorNativeDropAndLzReceivePrepare($md);
    } elseif (op == Executor::OP::LZ_RECEIVE_PREPARE) {
        return executorLzReceivePrepare($md);
    } elseif (op == Executor::OP::LZ_RECEIVE_ALERT) {
        return executorLzReceiveAlert($md);
    } elseif (op == Worker::OP::SET_ADMINS) {
        return setAdmins($md);
    } elseif (op == Worker::OP::CLAIM_TON) {
        return claimTon($md);
    } elseif (op == Worker::OP::CLAIM_TON_FROM_PROXY) {
        return claimTonFromProxy($md);
    } elseif (op == Worker::OP::CALL_VIA_PROXY) {
        return callViaProxy($md);
    } elseif (op == Worker::OP::SET_PROXY) {
        return setProxy($md);
    } elseif (op == Proxy::OP::HANDLE_CALLBACK) {
        return emptyActions();
    } elseif (op == Executor::OP::SET_NATIVE_DROP_TOTAL_CAP) {
        return setNativeDropTotalCap($md);
    } elseif (op == Executor::OP::COMMIT_PACKET) {
        return executorCommitPacket($md);
    }
    throw(BaseInterface::ERROR::invalidOpcode);
    return empty_tuple();
}