#include "../../core/workerCoreStorage.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../workers/core/tests/workerStorageTestUtils.fc";
#include "../../../../tests/mocks.fc";

#include "../../../funC++/baseInterface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/txnContext.fc";
#include "../../../funC++/constants.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../../funC++/stringlib.fc";

#include "../../../../tests/consts.fc";

#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "dvn"; }

cell createContractStorage() impure {
    cell $storage = Dvn::New(
        AddressList::serialize(unsafeTuple([ADMIN_ONE_ADDRESS, ADMIN_TWO_ADDRESS])),
        0,
        QUORUM,
        cl::dict256::New()
    );

    cell $coreStorage = $storage.cl::get<objRef>(Dvn::workerCoreStorage).cl::set(
        WorkerCoreStorage::proxy,
        PROXY_ADDRESS
    );

    $storage = $storage.cl::set(Dvn::workerCoreStorage, $coreStorage);

    setContractStorage($storage);
    return $storage;
}

() _createInitializedStorage() impure { }

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) setAdmins::success::basic() impure {
    cell $admins = AddressList::serialize(unsafeTuple(
        [getCaller(), ARBITRARY_ADDRESS]
    ));

    getContractStorage().setCoreStorage(
        getCoreStorage().cl::set(
            WorkerCoreStorage::admins,
            $admins
        )
    );
    return test::handler::shouldPass(
        setAdmins,
        $admins,
        unsafeTuple([
            0,
            _newAction<event>(
                Worker::event::ADMINS_SET,
                $admins
            )
        ]),
        getContractStorage().setCoreStorage(
            getCoreStorage().cl::set(
                WorkerCoreStorage::admins,
                $admins
        )),
        txnContext
    );
}

(int, slice) setProxyAddress:success::basic() impure {
    return test::handler::shouldPass(
        setProxy,
        md::SetAddress::New(PROXY_ADDRESS),
        emptyActions(),
        getContractStorage().setCoreStorage(
            getCoreStorage().cl::set(
            WorkerCoreStorage::proxy,
            PROXY_ADDRESS
        )),
        txnContext
    );
}

(int, slice) claimTon::success::basic() impure {
    return test::handler::shouldPass(
        claimTon,
        md::ClaimTon::New(MOCK_CLAIM_AMOUNT, ARBITRARY_ADDRESS),
        unsafeTuple([
            MOCK_CLAIM_AMOUNT,
            _newAction<payment>(
                ARBITRARY_ADDRESS,
                MOCK_CLAIM_AMOUNT,
                MOCK_CLAIM_AMOUNT
            ),
            _newAction<event>(
                Worker::event::CLAIMED_TON,
                md::ClaimTon::New(MOCK_CLAIM_AMOUNT, ARBITRARY_ADDRESS)
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) claimTon::revert::lessThanOneTonRemaining() impure {
    int claimAmount = getInitialContractBalance() - ONE_TON + 1;
    return test::handler::shouldFail(
        claimTon,
        md::ClaimTon::New(claimAmount, ARBITRARY_ADDRESS),
        Worker::ERROR::insufficientBalance
    );
}


(int, slice) claimTonFromProxy::success::basic() impure {
    cell $claimTon = md::ClaimTon::New(MOCK_CLAIM_AMOUNT, ARBITRARY_ADDRESS);

    return test::handler::shouldPass(
        claimTonFromProxy,
        $claimTon,
        unsafeTuple([
            0,
            _newAction<event>(
                Worker::event::CLAIMED_TON_FROM_PROXY,
                $claimTon
            ),
            _newAction<call>(
                PROXY_ADDRESS,
                Worker::OP::CLAIM_TON,
                $claimTon
            )
        ]),
        createContractStorage(),
        txnContext
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([initializeTestStorage, "initializeTestStorage"])
            .tpush([setAdmins::success::basic, "setAdmins::success::basic"])
            .tpush([setProxyAddress:success::basic, "setProxyAddress:success::basic"])
            .tpush([claimTon::success::basic, "claimTon::success::basic"])
            .tpush([claimTon::revert::lessThanOneTonRemaining, "claimTon::revert::lessThanOneTonRemaining"])
            .tpush([claimTonFromProxy::success::basic, "claimTonFromProxy::success::basic"])
    );
}
