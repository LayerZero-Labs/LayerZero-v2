#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../workers/core/tests/workerStorageTestUtils.fc";
#include "../../../../tests/mocks.fc";

#include "../../../funC++/baseInterface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/txnContext.fc";
#include "../../../funC++/constants.fc";
#include "../../../funC++/handlerCore.fc";

#include "../../../../tests/consts.fc";
#include "../../../classes/msgdata/MdAddress.fc";
#include "../../../classes/msgdata/SetAddress.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "dvn::permissions"; }

cell createContractStorage() impure {
    setContractStorage(
        Dvn::New(
            AddressList::serialize(unsafeTuple(
                [ADMIN_ONE_ADDRESS, ADMIN_TWO_ADDRESS]
            )),
            0,
            QUORUM,
            cl::dict256::New()
        )
    );

    return getContractStorage();
}

() _createInitializedStorage() impure { }

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

(int, slice) checkPermissions::verify::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Dvn::OP::VERIFY,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::verify::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Dvn::OP::VERIFY,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::verify::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Dvn::OP::VERIFY,
        cl::nullObject()
    );
}


(int, slice) checkPermissions::setVerifiers::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Dvn::OP::SET_VERIFIERS,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setQuorum::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Dvn::OP::SET_QUORUM,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setAdminsByQuorum::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Dvn::OP::SET_ADMINS_BY_QUORUM,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setAdminsByQuorum::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Dvn::OP::SET_ADMINS_BY_QUORUM,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTon::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::CLAIM_TON,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTon::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::CLAIM_TON,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTon::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Worker::OP::CLAIM_TON,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTonFromProxy::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::CLAIM_TON_FROM_PROXY,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTonFromProxy::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::CLAIM_TON_FROM_PROXY,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::claimTonFromProxy::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Worker::OP::CLAIM_TON_FROM_PROXY,
        cl::nullObject()
    );
}


(int, slice) checkPermissions::setAdmins::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::SET_ADMINS,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setAdmins::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::SET_ADMINS,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setAdmins::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Worker::OP::SET_ADMINS,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setProxy::success::admin1(cell $storage) impure {
    spoofCaller(ADMIN_ONE_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::SET_PROXY,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setProxy::success::admin2(cell $storage) impure {
    spoofCaller(ADMIN_TWO_ADDRESS);
    return test::permissions::shouldPass(
        Worker::OP::SET_PROXY,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setProxy::revert::notAdmin(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Worker::OP::SET_PROXY,
        cl::nullObject()
    );
}

;;; ===============================TESTS=========================================

tuple baseTest::getTests() impure {
    ;; add updater
    return unsafeTuple(
        empty_tuple()
            .tpush([checkPermissions::verify::success::admin1, "checkPermissions::verify::success::admin1"])
            .tpush([checkPermissions::verify::success::admin2, "checkPermissions::verify::success::admin2"])
            .tpush([checkPermissions::verify::revert::notAdmin, "checkPermissions::verify::revert::notAdmin"])
            .tpush([checkPermissions::setVerifiers::revert::notOwner, "checkPermissions::setVerifiers::revert::notOwner"])
            .tpush([checkPermissions::setQuorum::revert::notOwner, "checkPermissions::setQuorum::revert::notOwner"])
            .tpush([checkPermissions::setAdminsByQuorum::success::admin1, "checkPermissions::setAdminsByQuorum::success::admin1"])
            .tpush([checkPermissions::setAdminsByQuorum::success::admin2, "checkPermissions::setAdminsByQuorum::success::admin2"])
            .tpush([checkPermissions::claimTon::success::admin1, "checkPermissions::claimTon::success::admin1"])
            .tpush([checkPermissions::claimTon::success::admin2, "checkPermissions::claimTon::success::admin2"])
            .tpush([checkPermissions::claimTon::revert::notAdmin, "checkPermissions::claimTon::revert::notAdmin"])
            .tpush([checkPermissions::claimTonFromProxy::success::admin1, "checkPermissions::claimTonFromProxy::success::admin1"])
            .tpush([checkPermissions::claimTonFromProxy::success::admin2, "checkPermissions::claimTonFromProxy::success::admin2"])
            .tpush([checkPermissions::claimTonFromProxy::revert::notAdmin, "checkPermissions::claimTonFromProxy::revert::notAdmin"])
            .tpush([checkPermissions::setAdmins::success::admin1, "checkPermissions::setAdmins::success::admin1"])
            .tpush([checkPermissions::setAdmins::success::admin2, "checkPermissions::setAdmins::success::admin2"])
            .tpush([checkPermissions::setAdmins::revert::notAdmin, "checkPermissions::setAdmins::revert::notAdmin"])
            .tpush([checkPermissions::setProxy::success::admin1, "checkPermissions::setProxy::success::admin1"])
            .tpush([checkPermissions::setProxy::success::admin2, "checkPermissions::setProxy::success::admin2"])
            .tpush([checkPermissions::setProxy::revert::notAdmin, "checkPermissions::setProxy::revert::notAdmin"])
    );
}