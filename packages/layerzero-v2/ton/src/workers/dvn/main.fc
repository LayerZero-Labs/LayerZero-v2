#include "../proxy/interface.fc";

#include "../../protocol/msglibs/ultralightnode/callbackOpcodes.fc";

#include "../../protocol/core/abstract/protocolMain.fc";

#include "handler.fc";
#include "interface.fc";

tuple _executeOpcode(int op, cell $md) impure inline {
    if (op == Dvn::OP::VERIFY) {
        return verify($md);
    } elseif (op == UltraLightNode::OP::ULN_CONNECTION_VERIFY_CALLBACK) {
        return verifyCallback($md);
    } elseif (op == Dvn::OP::SET_VERIFIERS) {
        return setVerifiers($md);
    } elseif (op == Dvn::OP::SET_QUORUM) {
        return setQuorum($md);
    } elseif (op == Dvn::OP::SET_ADMINS_BY_QUORUM) {
        return setAdminsByQuorum($md);
    } elseif (op == Worker::OP::SET_ADMINS) {
        return setAdmins($md);
    } elseif (op == Worker::OP::SET_PROXY) {
        return setProxy($md);
    } elseif (op == Worker::OP::CLAIM_TON) {
        return claimTon($md);
    } elseif (op == Worker::OP::CLAIM_TON_FROM_PROXY) {
        return claimTonFromProxy($md);
    } elseif (op == Dvn::OP::SET_PROXY_ADMINS) {
        return setProxyAdmins($md);
    } elseif (op == Worker::OP::CALL_VIA_PROXY) {
        return callViaProxy($md);
    } elseif (op == Proxy::OP::HANDLE_CALLBACK) {
        return emptyActions();
    }
    throw(BaseInterface::ERROR::invalidOpcode);
    return empty_tuple();
}