#include "../../constants.fc";
#include "../../../../tests/testMain.fc";
#include "../../../../tests/mocks.fc";
#include "../../testutils.fc";
#include "../../../classes/msgdata/LzSend.fc";
#include "../../../classes/msgdata/MdAddress.fc";
;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "lzUtil"; }

cell baseTest::prepare(tuple args) impure {
    return cl::nullObject();
}

;;; ===============================TESTS=========================================
(int, slice) dupWithGarbage::success::Path(cell unused) impure {
    cell $path = MOCK_SEND_PATH();
    cell $maliciousPath = _dupWithGarbage($path);

    int cond1 = $path.cl::get<uint32>(lz::Path::srcEid)
    == $maliciousPath.cl::get<uint32>(lz::Path::srcEid);
    int cond2 = $path.cl::hash() != $maliciousPath.cl::hash();

    $path = $path.cl::set(lz::Path::dstEid, 3);
    $maliciousPath = $maliciousPath.cl::set(lz::Path::dstEid, 3);

    int cond3 = $path.cl::get<uint32>(lz::Path::dstEid)
    == $maliciousPath.cl::get<uint32>(lz::Path::dstEid);
    return test::shouldBeTrue(cond1 & cond2 & cond3);
}

(int, slice) dupWithGarbage::success::Packet(cell unused) impure {
    cell $path = MOCK_SEND_PATH();
    cell $packet = lz::Packet::New($path, begin_cell()
        .store_uint256("I love messages"c)
        .end_cell(),
        1
    );
    cell $maliciousPacket = _dupWithGarbage($packet);

    int cond1 = $packet.cl::hash() != $maliciousPacket.cl::hash();
    int cond2 = $packet.cl::get<cellRef>(lz::Packet::message).cl::hash()
    == $maliciousPacket.cl::get<cellRef>(lz::Packet::message).cl::hash();

    $packet = $packet.cl::set(lz::Packet::message, begin_cell().store_uint256("I love messages even more"c).end_cell());
    $maliciousPacket = $maliciousPacket.cl::set(lz::Packet::message, begin_cell().store_uint256("I love messages even more"c).end_cell());

    int cond3 = $packet.cl::get<cellRef>(lz::Packet::message).cl::hash()
    == $maliciousPacket.cl::get<cellRef>(lz::Packet::message).cl::hash();

    return test::shouldBeTrue(cond1 & cond2 & cond3);
}

(int, slice) test::getObjectField::uint(cell unused) impure {
    int val = 10;
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(val);
    return test::shouldBeTrue(cast_to_int(getObjectField($lzSend, md::LzSend::sendRequestId)) == val);
}

(int, slice) test::getObjectField::ref(cell unused) impure {
    cell $lzSend = MOCK_LZ_SEND();
    cell $packet = $lzSend.cl::get<cellRef>(md::LzSend::packet);
    return test::shouldBeTrue(cast_to_cell(getObjectField($lzSend, md::LzSend::packet)).cl::hash() == $packet.cl::hash());
}

(int, slice) test::getObjectField::bool(cell unused) impure {
    cell $epConfig = MOCK_EP_CONFIG(true);
    return test::shouldBeTrue(
        cast_to_int(getObjectField($epConfig, lz::EpConfig::isNull))
    );
}

(int, slice) test::getContractStorageField::uint(cell unused) impure {
    int val = 10;
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(val);
    setContractStorage($lzSend);
    return test::shouldBeTrue(cast_to_int(getContractStorageField(md::LzSend::sendRequestId)) == val);
}

(int, slice) test::getContractStorageField::ref(cell unused) impure {
    cell $lzSend = MOCK_LZ_SEND();
    setContractStorage($lzSend);
    cell $packet = $lzSend.cl::get<cellRef>(md::LzSend::packet);
    return test::shouldBeTrue(
        cast_to_cell(getContractStorageField(md::LzSend::packet)).cl::hash() == $packet.cl::hash());
}

(int, slice) test::getContractStorageField::bool(cell unused) impure {
    cell $epConfig = MOCK_EP_CONFIG(true);
    setContractStorage($epConfig);
    return test::shouldBeTrue(
        cast_to_int(getContractStorageField(lz::EpConfig::isNull))
    );
}

(int, slice) test::getContractStorageNestedField::uint(cell unused) impure {
    int val = 10;
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(val);
    cell $mdAddress = md::MdAddress::New($lzSend, NULLADDRESS);
    setContractStorage($mdAddress);
    return test::shouldBeTrue(
        cast_to_int(getContractStorageNestedField(md::MdAddress::md, md::LzSend::sendRequestId)) == val
    );
}

(int, slice) test::getContractStorageNestedField::ref(cell unused) impure {
    int val = 10;
    cell $lzSend = MOCK_LZ_SEND_WITH_ID(val);
    setContractStorage($lzSend);
    return test::shouldBeTrue(
        cast_to_cell(getContractStorageNestedField(md::LzSend::packet, lz::Packet::message)).cl::hash() == $lzSend.cl::get<cellRef>(md::LzSend::packet).cl::get<cellRef>(lz::Packet::message).cl::hash());
}

(int, slice) test::getContractStorageNestedField::bool(cell unused) impure {
    cell $epConfig = MOCK_EP_CONFIG(true);
    setContractStorage(
        md::MdAddress::New(
            $epConfig,
            NULLADDRESS
        )
    );
    return test::shouldBeTrue(
        cast_to_int(getContractStorageNestedField(lz::EpConfig::isNull, lz::EpConfig::isNull))
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([dupWithGarbage::success::Path, "dupWithGarbage::success::Path"])
        .tpush([dupWithGarbage::success::Packet, "dupWithGarbage::success::Packet"])
        .tpush([test::getObjectField::uint, "test::getObjectField::uint"])
        .tpush([test::getObjectField::ref, "test::getObjectField::ref"])
        .tpush([test::getObjectField::bool, "test::getObjectField::bool"])
        .tpush([test::getContractStorageField::uint, "test::getContractStorageField::uint"])
        .tpush([test::getContractStorageField::ref, "test::getContractStorageField::ref"])
        .tpush([test::getContractStorageField::bool, "test::getContractStorageField::bool"])
        .tpush([test::getContractStorageNestedField::uint, "test::getContractStorageNestedField::uint"])
        .tpush([test::getContractStorageNestedField::ref, "test::getContractStorageNestedField::ref"])
        .tpush([test::getContractStorageNestedField::bool, "test::getContractStorageNestedField::bool"])
    ;
}
