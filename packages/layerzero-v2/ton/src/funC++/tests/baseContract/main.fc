#include "./handler.fc";
#include "../../classlib.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../../tests/consts.fc";
#include "../../../protocol/core/baseStorage.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "baseContract"; }

cell createContractStorage() impure {
    setContractStorage(baseContract::New(getCaller()));
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(cl::nullObject());
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

;; Anyone can emit an event with "to" this contract
(int, slice) event::checkPermissions::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(BaseInterface::OP::EVENT, cl::nullObject());
}

;; -- Only the owner can initialize the contract
(int, slice) initialize::checkPermissions::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(BaseInterface::OP::INITIALIZE, cl::nullObject());
}

(int, slice) initialize::checkPermissions::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(BaseInterface::OP::INITIALIZE, cl::nullObject());
}

(int, slice) initialize::handler::revert::notAuthenticated(cell $storage) impure {
    createContractStorage();
    return test::handler::shouldFail(
        initialize,
        cl::nullObject(),
        BaseInterface::ERROR::notAuthenticated
    );
}

(int, slice) initialize::handler::success::basic(cell $storage) impure {
    createContractStorage();
    authenticate();
    $storage = getContractStorage();
    return test::handler::shouldPass(
        initialize,
        cl::nullObject(),
        emptyActions(),
        $storage.cl::set(
            BASE_STORAGE_INDEX,
            $storage
                .cl::get<objRef>(BASE_STORAGE_INDEX)
                .cl::set(BaseStorage::initialized, true)
        ),
        txnContext
    );
}

(int, slice) initialize::handler::success::alreadyInitialized(cell $storage) impure {
    createInitializedStorage();
    return test::handler::shouldPass(
        initialize,
        cl::nullObject(),
        emptyActions(),
        getContractStorage(),
        txnContext
    );
}

(int, slice) authenticate::handler::revert::alreadyInitialized(cell $storage) impure {
    createContractStorage();
    setContractStorage(
        getContractStorage().cl::set(
            BASE_STORAGE_INDEX,
            getContractStorage()
                .cl::get<objRef>(BASE_STORAGE_INDEX)
                .cl::set(BaseStorage::initialized, true)
        )
    );
    try {
        authenticate();
    } catch (x, n) {
        if (n != BaseInterface::ERROR::alreadyInitialized) {
            return (
                TEST_FAILED,
                "actual error: "
                    .str::concatInt(n)
                    .str::concat(" != expected: ")
                    .str::concatInt(BaseInterface::ERROR::alreadyInitialized)
            );
        }
    }
    return (TEST_SUCCESS, "");
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([event::checkPermissions::success::basic, "event::checkPermissions::success::basic"])
            .tpush([initialize::checkPermissions::success::basic, "initialize::checkPermissions::success::basic"])
            .tpush([initialize::checkPermissions::revert::notOwner, "initialize::checkPermissions::revert::notOwner"])
            .tpush([initialize::handler::revert::notAuthenticated, "initialize::handler::revert::notAuthenticated"])
            .tpush([initialize::handler::success::basic, "initialize::handler::success::basic"])
            .tpush([initialize::handler::success::alreadyInitialized, "initialize::handler::success::alreadyInitialized"])
            .tpush([authenticate::handler::revert::alreadyInitialized, "authenticate::handler::revert::alreadyInitialized"])
    );
}
