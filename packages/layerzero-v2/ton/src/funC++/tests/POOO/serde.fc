#include "../../dataStructures/PipelinedOutOfOrder.fc";
#include "../../../../tests/baseSerdeTest.fc";
#include "../../../../tests/mocks.fc";


;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "POOO serde"; }


int OLD::POOO::isBitSet(cell $self, int absoluteIdx) impure {
    int relativeIdx = absoluteIdx - $self.cl::get<uint64>(POOO::nextEmpty);
    return $self
        .cl::get<cellRef>(POOO::bitmap)
        .begin_parse()
        .preload_bits_offset(relativeIdx, 1)
        .preload_uint(1) == 1;
}

;; POOO: has 1 Builder
;;       has 2 getters
;;       has 1 multi-getter
;;       has 2 utils
(int, slice) Serde::POOO::buildFull(cell $unused) impure {
    cell $expectedPooo = POOO::New()
        .cl::set(POOO::nextEmpty, 100)
        .cl::set(POOO::bitmap, _getRandomCode(12));
    
    cell $pooo = POOO::buildFull(100, _getRandomCode(12));
    
    return test::build::equal(
        $expectedPooo, 
        $pooo
    );
}

(int, slice) Serde::POOO::maxSettableBit(cell $unused) impure {
    cell $pooo = POOO::New();

    int expected = $pooo.cl::get<uint64>(POOO::nextEmpty) + MAX_CELL_BIT_INDEX;
    int actual = POOO::maxSettableBit($pooo);

    return test::shouldBeTrue(expected == actual);
}

(int, slice) Serde::POOO::getNextEmpty(cell $unused) impure {
    cell $pooo = POOO::New();
    return test::getData::equal(
        $pooo, 
        POOO::getNextEmpty, 
        POOO::nextEmpty
    );
}

(int, slice) Serde::POOO::deserialize(cell $unused) impure {
    cell $pooo = POOO::New();

    (int nextEmpty, slice bitmapSlice) = POOO::deserialize($pooo);
    cell bitmap = begin_cell().store_slice(bitmapSlice).end_cell();

    ;; multiget::equal can't check for slices.
    return test::multiget::equal(
        $pooo,
        unsafeTuple([
            POOO::nextEmpty,
            POOO::bitmap
        ]),
        unsafeTuple([
            nextEmpty,
            bitmap
        ])
    );
}

(int, slice) Serde::POOO::isBitSet(cell $unused) impure {
    cell $pooo = POOO::New().POOO::set(2);
    return test::shouldBeTrue(
        POOO::getNextEmpty($pooo) 
        & (POOO::isBitSet($pooo, 100) == OLD::POOO::isBitSet($pooo, 100))
        & (POOO::isBitSet($pooo, 2) == OLD::POOO::isBitSet($pooo, 2))
    );
}

;; POOO::set and POOO::unsafeSetBits are correct if both POOO::buildFull and POOO::deserialize are correct. 
;; (which they are as the above tests pass.)

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([Serde::POOO::buildFull, "Serde::POOO::buildFull"])
        .tpush([Serde::POOO::maxSettableBit, "Serde::POOO::maxSettableBit"])
        .tpush([Serde::POOO::getNextEmpty, "Serde::POOO::getNextEmpty"])
        .tpush([Serde::POOO::deserialize, "Serde::POOO::deserialize"])
        .tpush([Serde::POOO::isBitSet, "Serde::POOO::isBitSet"])
    ;
}