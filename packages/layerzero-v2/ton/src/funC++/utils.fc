#include "constants.fc";
#include "stdlib.fc";

const int ERROR::WrongWorkchain = 2047;

forall X -> tuple unsafeTuple(X x) asm "NOP";
(slice) as_slice(builder b) asm "ENDC CTOS";
(slice, int) load_uint8(slice s) asm "8 LDU SWAP";
(builder) store_uint8(builder b, int t) inline asm(t b) "8 STU";
(slice, int) load_uint16(slice s) asm "16 LDU SWAP";
(builder) store_uint16(builder b, int t) inline asm(t b) "16 STU";
(slice, int) load_uint32(slice s) asm "32 LDU SWAP";
(builder) store_uint32(builder b, int t) inline asm(t b) "32 STU";
(slice, int) load_uint64(slice s) asm "64 LDU SWAP";
(builder) store_uint64(builder b, int t) inline asm(t b) "64 STU";
(slice, int) load_uint128(slice s) asm "128 LDU SWAP";
(builder) store_uint128(builder b, int t) inline asm(t b) "128 STU";
(slice, int) load_uint256(slice s) asm "256 LDU SWAP";
(builder) store_uint256(builder b, int t) inline asm(t b) "256 STU";
forall X -> int   is_null(X x) asm "ISNULL";
forall X -> int   is_int(X x) asm "<{ TRY:<{ 0 PUSHINT ADD DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int   is_cell(X x) asm "<{ TRY:<{ CTOS DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int   is_slice(X x) asm "<{ TRY:<{ SBITS DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
forall X -> int   is_tuple(X x) asm "ISTUPLE";
forall X -> cell  cast_to_cell(X x) asm "NOP";
forall X -> slice cast_to_slice(X x) asm "NOP";
forall X -> int   cast_to_int(X x) asm "NOP";
forall X -> tuple cast_to_tuple(X x) asm "NOP";
(cell) my_code() asm "MYCODE";
(tuple) get_values() asm "INCOMINGVALUE";
int storage_fees() asm "STORAGEFEES";
(int, slice) ldones(slice s) asm "LDONES";

(int) get_gas_consumed() asm "GASCONSUMED";

builder store_zeroes(builder b, int x) asm "STZEROES";
builder store_ones(builder b, int x) asm "STONES";
cell preload_first_ref(slice s) asm "0 PLDREFIDX";
slice preload_bits_offset(slice s, int offset, int len) asm "SDSUBSTR";
(slice, int) load_bool(slice s) asm(-> 1 0) "1 LDI";
int preload_bool(slice s) asm "1 PUSHINT PLDIX";
(builder) store_bool(builder b, int v) asm(v b) "1 STI";
cell empty_cell() asm "<b b> PUSHREF";
forall X -> tuple tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (tuple, ()) ~tset(tuple t, int k, X x) asm(t x k) "SETINDEXVAR";
forall X -> (tuple, X) tpop(tuple t) asm "TPOP";
int tlen(tuple t) asm "TLEN";
int keccak256Builder(builder b) asm "1 PUSHINT HASHEXT_KECCAK256";

int cell_is_empty(cell c) impure inline {
    return c.cell_hash() == 68134197439415885698044414435951397869210496020759160419881882418413283430343;
}

int get_compute_fee(int workchain, int gas_used) asm(gas_used workchain) "GETGASFEE";
int get_storage_fee(int workchain, int seconds, int bits, int cells) asm(cells bits seconds workchain) "GETSTORAGEFEE";
int get_forward_fee(int workchain, int bits, int cells) asm(cells bits workchain) "GETFORWARDFEE";

int ilog4(int x) asm(x) "UBITSIZE 4 PUSHINT DIV";
cell preload_ref_at(slice s, int idx) inline asm "PLDREFVAR";
slice scutfirst(slice s, int bits, int refs) inline asm "SCUTFIRST";
slice scutlast(slice s, int bits, int refs) inline asm "SCUTLAST";
slice subslice(slice s, int start_bits, int start_refs, int bits, int refs) inline asm "SUBSLICE";
slice sskipfirst(slice s, int bits, int refs) inline asm "SSKIPFIRST";
slice sskiplast(slice s, int bits, int refs) inline asm "SSKIPLAST";
slice sdskipfirst(slice s, int bits) inline asm "SDSKIPFIRST";
forall X -> builder cast_to_builder(X x) inline asm "NOP";
int abs(int x) inline asm "ABS";
tuple self_balance() asm "BALANCE";

() throwError(slice reason) impure inline {
    ~strdump(reason);
    throw(reason.slice_hash() & ERRORCODE_MASK);
}

() throwErrorUnless(int condition, slice reason) impure inline {
    ifnot (condition) {
        throwError(reason);
    }
}
int _SDCNTLEAD0(slice x) asm "SDCNTLEAD0";
int POW2(int y) asm "POW2";

;; numCells, num_bits
(int, int) getContractStateSize(cell code, cell init_storage) impure inline {
    cell stateInit = begin_cell()
        .store_uint(6, 5)
        .store_ref(code)
        .store_ref(init_storage)
        .end_cell();
    (int cellsCount, int bitsCount, int success) = stateInit.compute_data_size(MAX_U16);
    throw_unless(8, success);
    return (cellsCount, bitsCount);
}

int calculateStorageFees(int cellsCount, int bitsCount, int timeDelta) impure inline {
    return get_storage_fee(BASECHAIN, timeDelta, bitsCount, cellsCount);
}

forall X -> tuple castToTuple(X x) asm "NOP";

slice empty_slice() asm "<b b> <s PUSHSLICE";

int treeShapeEqual(cell lhs, cell rhs) inline {
    slice lhsSlice = lhs.begin_parse();
    slice rhsSlice = rhs.begin_parse();
    (int lhsBits, int lhsRefs) = lhsSlice.slice_bits_refs();
    (int rhsBits, int rhsRefs) = rhsSlice.slice_bits_refs();
    if ((lhsBits != rhsBits) | (lhsRefs != rhsRefs)) {
        return false;
    }
    if (lhsRefs == 0) {
        return true;
    }
    int subtreeShapeEqual = true;
    int refIdx = 0;
    while (refIdx < lhsRefs) {
        subtreeShapeEqual &= treeShapeEqual(
            lhsSlice.preload_ref_at(refIdx),
            rhsSlice.preload_ref_at(refIdx)
        );
    }
    return subtreeShapeEqual;
}

int _globvarIsNull(int idx) impure asm "GETGLOBVAR ISNULL";

int _gasToNanoton(int gas) impure inline {
    return get_compute_fee(false, gas);
}

(cell, int) getConfigParam(int idx) inline asm "CONFIGPARAM";

;; https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb
;; gas_prices#dd gas_price:uint64 gas_limit:uint64 gas_credit:uint64
;; block_gas_limit:uint64 freeze_due_limit:uint64 delete_due_limit:uint64
;; = GasLimitsPrices;
;;
;; gas_prices_ext#de gas_price:uint64 gas_limit:uint64 special_gas_limit:uint64 gas_credit:uint64
;; block_gas_limit:uint64 freeze_due_limit:uint64 delete_due_limit:uint64
;; = GasLimitsPrices;
;;
;; gas_flat_pfx#d1 flat_gas_limit:uint64 flat_gas_price:uint64 other:GasLimitsPrices
;; = GasLimitsPrices;
;;
;; config_mc_gas_prices#_ GasLimitsPrices = ConfigParam 20;
;; config_gas_prices#_ GasLimitsPrices = ConfigParam 21;
;; return -1 on any failure
(int, int, int, int, int, int, int, int, int) parseGasLimitsPrices(int workchainId) impure {
    int configIdx = workchainId == BASECHAIN ? 21 : 20;
    (cell cfg, int success) = getConfigParam(configIdx);
    ifnot (success) {
        return (-1, -1, -1, -1, -1, -1, -1, -1, -1);
    }
    slice cfgSlice = cfg.begin_parse();
    ifnot (cfgSlice.slice_bits() >= 592) {
        return (-1, -1, -1, -1, -1, -1, -1, -1, -1);
    }

    if (
        (cfgSlice.preload_uint(8) != 0xd1)
        | (cfgSlice.preload_bits_offset(136, 8).preload_uint(8) != 0xde)
    ) {
        return (-1, -1, -1, -1, -1, -1, -1, -1, -1);
    }

    cfgSlice~load_uint8();
    int specialGasLimit = cfgSlice~load_uint64();
    int flatGasLimit = cfgSlice~load_uint64();
    int flatGasPrice = cfgSlice~load_uint64();
    cfgSlice~load_uint8();
    int gasPrice = cfgSlice~load_uint64();
    int gasLimit = cfgSlice~load_uint64();
    int gasCredit = cfgSlice~load_uint64();
    int blockGasLimit = cfgSlice~load_uint64();
    int freezeDueLimit = cfgSlice~load_uint64();
    int deleteDueLimit = cfgSlice~load_uint64();
    return (
        specialGasLimit,
        flatGasLimit,
        flatGasPrice,
        gasPrice,
        gasLimit,
        gasCredit,
        blockGasLimit,
        freezeDueLimit,
        deleteDueLimit
    );
}

;;; ====================== Address functions ======================
int basechainAddressStdToHashpart(slice full_address) impure inline {
    (int wc, int hp) = parseStdAddress(full_address);
    throw_if(ERROR::WrongWorkchain, wc != BASECHAIN);
    return hp;
}

slice hashpartToBasechainAddressStd(int hashpart) impure inline {
    return begin_cell()
        .store_uint(4, 3) ;; 0b100
        .store_int(BASECHAIN, 8)
        .store_uint(hashpart, 256)
        .as_slice();
}

int getContractAddress() impure inline {
    return my_address().preload_bits_offset(11, 256).preload_uint(256);
}

() setContractStorage(cell $obj) impure inline {
    set_data($obj);
}

cell getContractStorage() impure inline method_id {
    return get_data();
}

int getContractBalanceView(int futureSeconds) impure inline method_id {
    (int cellsCount, int bitsCount) = getContractStateSize(my_code(), getContractStorage());

    int ret = self_balance().int_at(0) - calculateStorageFees(cellsCount, bitsCount, futureSeconds);

    return max(0, ret);
}

int computeContractAddress(cell $storage, cell code) impure inline {
    return begin_cell()
        .store_uint(6, 5)
        .store_ref(code)
        .store_ref($storage)
        .end_cell()
        .cell_hash();
}

;; ============================== Optimization Functions ==============================

;; ========================== For Slices ==========================

int preloadBoolAt(slice self, int offset) impure inline {
    ;; bools should be returned as bools
    return self.preload_bits_offset(offset, 1).preload_bool();
}

int preloadUint8At(slice self, int offset) impure inline {
    return self.preload_bits_offset(offset, 8).preload_uint(8);
}

int preloadUint16At(slice self, int offset) impure inline {
    return self.preload_bits_offset(offset, 16).preload_uint(16);
}

int preloadUint32At(slice self, int offset) impure inline {
    return self.preload_bits_offset(offset, 32).preload_uint(32);
}

int preloadUint64At(slice self, int offset) impure inline {
    return self.preload_bits_offset(offset, 64).preload_uint(64);
}   

int preloadCoinsAt(slice self, int offset) impure inline {
    return self.preload_bits_offset(offset, 128).preload_uint(128);
}

int preloadUint256At(slice self, int offset) impure inline {
    return self.preload_bits_offset(offset, 256).preload_uint(256);
}

int preloadAddressAt(slice self, int offset) impure inline {
    return self.preloadUint256At(offset);
}

;; slice -> cell
cell preloadRefAt(slice self, int offset) impure inline {
    return self.preload_ref_at(offset);
}

;; slice -> slice
slice preloadRefSliceAt(slice self, int offset) impure inline {
    return self.preload_ref_at(offset).begin_parse();
}

;; ========================== For Cells ==========================

int cellPreloadBoolAt(cell self, int offset) impure inline {
    return self.begin_parse().preloadBoolAt(offset);
}

int cellPreloadUint8At(cell self, int offset) impure inline {
    return self.begin_parse().preloadUint8At(offset);
}

int cellPreloadUint16At(cell self, int offset) impure inline {
    return self.begin_parse().preloadUint16At(offset);
}

int cellPreloadUint32At(cell self, int offset) impure inline {
    return self.begin_parse().preloadUint32At(offset);
}

int cellPreloadUint64At(cell self, int offset) impure inline {
    return self.begin_parse().preloadUint64At(offset);
}

int cellPreloadCoinsAt(cell self, int offset) impure inline {
    return self.begin_parse().preloadCoinsAt(offset);
}

int cellPreloadUint256At(cell self, int offset) impure inline {
    return self.begin_parse().preloadUint256At(offset);
}

int cellPreloadAddressAt(cell self, int offset) impure inline {
    return self.cellPreloadUint256At(offset);
}

;; cell -> cell
cell cellPreloadRefAt(cell self, int offset) impure inline {
    return self.begin_parse().preloadRefAt(offset);
}

;; cell -> slice
slice cellPreloadRefSliceAt(cell self, int offset) impure inline {
    return self.begin_parse().preloadRefAt(offset).begin_parse();
}