#include "utils.fc";
#include "../utils.fc";

const int action::rawCall::NAME = "rawCall"u;

const int action::rawCall::to = 1;
const int action::rawCall::body = 2;

;; Call a method on the contract at address `to` with the given message data `md`
;; optionally provide value provisioned from this contract's balance
;; @terminal
tuple action::rawCall::create(int to, cell body) impure inline {
    return unsafeTuple([action::rawCall::NAME, to, body]);
}

;; returns true if equals
int action::rawCall::equals(tuple self, tuple other) impure inline {
    return (
        (self.int_at(0) == other.int_at(0)) ;; NAME
        & (self.int_at(action::rawCall::to) == other.int_at(action::rawCall::to))
        & (self.cell_at(action::rawCall::body).cell_hash() == other.cell_at(action::rawCall::body).cell_hash())
    );
}

;; overloaded when you want to pass 0 outflowNanos
tuple _newAction<rawCall>(int to, cell body) impure inline {
    return action::rawCall::create(to, body);
}

;; overloaded when you want to pass 0 outflowNanos
(tuple, ()) ~pushAction<rawCall>(tuple actions, int to, cell body) impure inline {
    return (actions.tpush(_newAction<rawCall>(to, body)), ());
}

int executeRawCall(tuple rawCallAction) impure inline {
    sendTerminalAction(
        rawCallAction.int_at(action::rawCall::to),
        rawCallAction.cell_at(action::rawCall::body),
        null(),
        NORMAL
    );
    return false;
}