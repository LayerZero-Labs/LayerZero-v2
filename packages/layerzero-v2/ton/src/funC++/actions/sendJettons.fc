#include "utils.fc";

const int action::sendJettons::NAME = "sendJetton"u;

;; @info the wallet of this contract's jetton wallet
const int action::sendJettons::walletAddress = 1;
;; @info the address to pay
const int action::sendJettons::toAddress = 2;

;; @info the amount to pay
const int action::sendJettons::amount = 3;

const int action::sendJettons::responseAddress = 4;

;; Op codes:
;; This because we cannot import it directly, this is effectively
;; const op::transfer_notification = 0x7362d09c;
;; const op::transfer = 0xf8a7ea5;
const int Jetton::OP::TRANSFER_NOTIFICATION = 0x7362d09c;
const int Jetton::OP::TRANSFER = 0xf8a7ea5;

;; @terminal
tuple action::sendJettons::create(int walletAddress, int toAddress, int amount, int responseAddress) impure inline {
    return unsafeTuple([action::sendJettons::NAME, walletAddress, toAddress, amount, responseAddress]);
}

;; returns true if equals
int action::sendJettons::equals(tuple self, tuple other) impure {
    return (
        (self.int_at(0) == other.int_at(0)) ;; NAME
        & (self.int_at(action::sendJettons::walletAddress) == other.int_at(action::sendJettons::walletAddress))
        & (self.int_at(action::sendJettons::toAddress) == other.int_at(action::sendJettons::toAddress))
        & (self.int_at(action::sendJettons::amount) == other.int_at(action::sendJettons::amount))
        & (self.int_at(action::sendJettons::responseAddress) == other.int_at(action::sendJettons::responseAddress))
    );
}

tuple _newAction<sendJettons>(int walletAddress, int toAddress, int amount, int responseAddress) impure inline {
    return action::sendJettons::create(walletAddress, toAddress, amount, responseAddress);
}

(tuple, ()) ~pushAction<sendJettons>(
    tuple actions,
    int walletAddress,
    int toAddress,
    int amount,
    int responseAddress
) impure inline {
    return (actions.tpush(_newAction<sendJettons>(walletAddress, toAddress, amount, responseAddress)), ());
}

cell buildJettonMessageBody(int toAddress, int amount, int responseAddress) impure inline {
    return beginTonMessage(Jetton::OP::TRANSFER) ;; opcode, query_id
        .store_coins(amount) ;; jetton amount
        .store_slice(hashpartToBasechainAddressStd(toAddress)) ;; to address address
        .store_slice(hashpartToBasechainAddressStd(responseAddress)) ;; response address
        .store_maybe_ref(null()) ;; custom_payload
        .store_coins(0) ;; forward_ton_amount
        .store_maybe_ref(null()) ;; either_forward_payload is stored as a maybe_ref
        .end_cell();
}

int executeSendJettons(tuple dispatchAction) impure {
    sendTerminalAction(
        dispatchAction.int_at(action::sendJettons::walletAddress),
        buildJettonMessageBody(
            dispatchAction.int_at(action::sendJettons::toAddress),
            dispatchAction.int_at(action::sendJettons::amount),
            dispatchAction.int_at(action::sendJettons::responseAddress)
        ),
        null(),
        NORMAL
    );
    return false;
}