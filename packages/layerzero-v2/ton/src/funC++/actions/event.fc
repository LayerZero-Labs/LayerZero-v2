#include "../baseInterface.fc";
#include "../classlib.fc";
#include "utils.fc";

const int action::event::NAME = "event"u;

const int action::event::bodyIndex = 1;

const int action::event::topic = 0;
const int action::event::body = 1;
const int action::event::initialStorage = 2;

;; Interface function you must implement to get the event sink
int _getEventSink() impure inline;

;; @info Events in LZ contracts are internal messages to an event sink
;; where the resulting transaction always reverts
;; @non-terminal
cell action::event::New(int topic, cell $body, cell $initialStorage) impure inline method_id {
    return cl::declare(
        action::event::NAME,
        unsafeTuple([
            [cl::t::uint256, topic],
            [cl::t::objRef, $body],
            [cl::t::objRef, $initialStorage]
        ])
    );
}

const int action::event::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 3);
const int action::event::_headerFillerBits = _HEADER_WIDTH - action::event::_headerInfoBits;
const int action::event::_headerInfo = 7850279558805522911016931325;

cell action::event::build(int topic, cell $body, cell $initialStorage) impure inline method_id {
    return begin_cell()
        .store_uint(action::event::_headerInfo, action::event::_headerInfoBits)     ;; header info
        .store_ones(action::event::_headerFillerBits)                               ;; header filler
        .store_uint256(topic)
        .store_ref($body)
        .store_ref($initialStorage)
        .end_cell();
}

tuple action::event::create(int topic, cell $body, cell $initialStorage) impure inline {
    return unsafeTuple([
        action::event::NAME, 
        action::event::build(topic, $body, $initialStorage)
    ]);
}

;; returns true if equals
int action::event::equals(tuple self, tuple other) impure {
    int equalEventObj = compareObjectFields(
        self.cell_at(action::event::bodyIndex),
        other.cell_at(action::event::bodyIndex)
    );

    return (
        (self.int_at(0) == other.int_at(0)) ;; NAME
        & (equalEventObj == -1)
    );
}

;; interface this function because it requires passing the 'getInitialStorage' from the baseHandler
;; tuple _newAction<event>(int topic, cell $body) impure inline {
;;     return action::event::create(topic, $body, getInitialStorage());
;; }

tuple _newAction<event>(int topic, cell $body) impure inline;

(tuple, ()) ~pushAction<event>(tuple actions, int topic, cell $body) impure inline {
    return (actions.tpush(_newAction<event>(topic, $body)), ());
}

int executeEvent(tuple action) impure inline {
    ;; send event to event sink
    sendNonTerminalAction(
        SEND_MSG_NON_BOUNCEABLE,
        0,
        _getEventSink(),
        buildLayerzeroMessageBody(
            0,
            BaseInterface::OP::EVENT,
            action.cell_at(action::event::bodyIndex)
        ),
        PAID_EXTERNALLY
    );
    return true;
}
