#include "utils.fc";
#include "../classlib.fc";

const int action::call::NAME = "actionCall"u;

const int action::call::to = 1;
const int action::call::opcode = 2;
const int action::call::md = 3;

;; Call a method on the contract at address `to` with the given message data `md`
;; optionally provide value provisioned from this contract's balance
;; @terminal
tuple action::call::create(int to, int opcode, cell $md) impure inline {
    return unsafeTuple([action::call::NAME, to, opcode, $md]);
}

;; returns true if equals
int action::call::equals(tuple self, tuple other) impure inline {
    int equalMdField = compareObjectFields(self.cell_at(action::call::md), other.cell_at(action::call::md));
    if (equalMdField != -1) {
        ~strdump("call: not equal md field at idx ");
        ~dump(equalMdField);
    }
    return (
        (self.int_at(0) == other.int_at(0)) ;; NAME
        & (self.int_at(action::call::to) == other.int_at(action::call::to))
        & (self.int_at(action::call::opcode) == other.int_at(action::call::opcode))
        & (equalMdField == -1)
    );
}

;; overloaded when you want to pass 0 outflowNanos
tuple _newAction<call>(int to, int opcode, cell $body) impure inline {
    return action::call::create(to, opcode, $body);
}

;; overloaded when you want to pass 0 outflowNanos
(tuple, ()) ~pushAction<call>(tuple actions, int to, int opcode, cell $body) impure inline {
    return (actions.tpush(_newAction<call>(to, opcode, $body)), ());
}

int executeCall(tuple callAction) impure inline {
    sendTerminalAction(
        callAction.int_at(action::call::to),
        buildLayerzeroMessageBody(
            0,
            callAction.int_at(action::call::opcode),
            callAction.cell_at(action::call::md)
        ),
        null(),
        NORMAL
    );
    return false;
}