#include "utils.fc";

;;; =======================================================
;; Deploys a contract defined by the given code and storage object,
;; and calls the contract with the given message data.
;; Typical usage will be to deploy and initialize
;;; =======================================================
const int action::deploy::NAME = "deploy"u;

const int action::deploy::code = 1;
const int action::deploy::storage = 2;
const int action::deploy::donationNanos = 3;
const int action::deploy::opcode = 4;
const int action::deploy::md = 5;
;; @info reserve donationNanos nanoton as the deployed contract's rent + value
;; @info in addition to the message value, use from_balance nanoton
;; from the contract's balance to pay for the deploy
;; @info e.g., if from_balance == outflowNanos, the entire rent is paid from the deployer
;; contract's balance
const int action::deploy::outflowNanos = 6;

;; @terminal
tuple action::deploy::create(
    cell code,
    cell $storage,
    int donationNanos,
    int opcode,
    cell $md,
    int outflowNanos
) impure inline {
    return unsafeTuple(
        [action::deploy::NAME, code, $storage, donationNanos, opcode, $md, outflowNanos]
    );
}

int action::deploy::equals(tuple self, tuple other) impure {
    int equalDataField = compareObjectFields(
        self.cell_at(action::deploy::storage),
        other.cell_at(action::deploy::storage)
    );
    int equalMdField = compareObjectFields(
        self.cell_at(action::deploy::md),
        other.cell_at(action::deploy::md)
    );
    return (
        (self.int_at(0) == other.int_at(0)) ;; NAME
        & (self.cell_at( action::deploy::code ).cell_hash() == other.cell_at( action::deploy::code ).cell_hash())
        & (equalDataField == -1)
        & (self.int_at(action::deploy::donationNanos) == other.int_at(action::deploy::donationNanos))
        & (self.int_at(action::deploy::opcode) == other.int_at(action::deploy::opcode))
        & (equalMdField == -1)
        & (self.int_at(action::deploy::outflowNanos) == other.int_at(action::deploy::outflowNanos))
    );
}

tuple _newAction<deployAndCall>(
    cell code,
    cell $storage,
    int donationNanos,
    int opcode,
    cell $md,
    int outflowNanos
) impure inline {
    return action::deploy::create(
        code,
        $storage,
        donationNanos,
        opcode,
        $md,
        outflowNanos
    );
}

(tuple, ()) ~pushAction<deployAndCall>(
    tuple actions,
    cell code,
    cell $storage,
    int donationNanos,
    int opcode,
    cell $md,
    int outflowNanos
) impure inline {
    return (
        actions
            .tpush(_newAction<deployAndCall>(
                code,
                $storage,
                donationNanos,
                opcode,
                $md,
                outflowNanos
            )),
        ()
    );
}

int executeDeploy(tuple action) impure inline {
    cell $storageObj = action.cell_at(action::deploy::storage);
    cell codeCell = action.cell_at(action::deploy::code);

    sendTerminalAction(
        computeContractAddress($storageObj, codeCell),
        buildLayerzeroMessageBody(
            action.int_at(action::deploy::donationNanos),
            action.int_at(action::deploy::opcode),
            action.cell_at(action::deploy::md)
        ),
        begin_cell()
            .store_uint(6, 5)
            .store_ref(codeCell)
            .store_ref($storageObj)
            .end_cell(),
        NORMAL
    );

    return false;
}