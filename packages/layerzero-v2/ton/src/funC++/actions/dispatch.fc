#include "utils.fc";

#include "call.fc";

const int action::dispatch::NAME = "dispatch"u;

const int action::dispatch::to = 1;
const int action::dispatch::opcode = 2;
const int action::dispatch::md = 3;
const int action::dispatch::gasNanos = 4;

;; Call a method on the contract at address `to` with the given message data `md`
;; optionally provide value provisioned from this contract's balance
;; @terminal
tuple action::dispatch::create(int to, int opcode, cell $md, int gasNanos) inline {
    return unsafeTuple([action::dispatch::NAME, to, opcode, $md, gasNanos]);
}

;; returns true if equals
int action::dispatch::equals(tuple self, tuple other) {
    int equalMdField = compareObjectFields(
        self.cell_at(action::dispatch::md),
        other.cell_at(action::dispatch::md)
    );
    return (
        (self.int_at(0) == other.int_at(0 )) ;; NAME
        & (self.int_at(action::dispatch::to) == other.int_at(action::dispatch::to))
        & (self.int_at(action::dispatch::opcode) == other.int_at(action::dispatch::opcode))
        & (equalMdField == -1)
        & (self.int_at(action::dispatch::gasNanos) == other.int_at(action::dispatch::gasNanos))
    );
}

tuple _newAction<dispatch>(int to, int opcode, cell $body, int gasNanos) inline {
    return action::dispatch::create(to, opcode, $body, gasNanos);
}

;; overloaded when you want to pass 0 outflowNanos
(tuple, ()) ~pushAction<dispatch>(tuple actions, int to, int opcode, cell $body, int gasNanos) inline {
    return (actions.tpush(_newAction<dispatch>(to, opcode, $body, gasNanos)), ());
}

int executeDispatch(tuple dispatchAction) {
    cell body = buildLayerzeroMessageBody(
        0,
        dispatchAction.int_at(action::call::opcode),
        dispatchAction.cell_at(action::call::md)
    );

    (int cellsCount, int bitsCount, _) = body.compute_data_size(MAX_U16);

    sendNonTerminalAction(
        SEND_MSG_BOUNCEABLE,
        dispatchAction.int_at(action::dispatch::gasNanos) + get_forward_fee(cellsCount, bitsCount, false),
        dispatchAction.int_at(action::call::to),
        body,
        NORMAL
    );
    return true;
}