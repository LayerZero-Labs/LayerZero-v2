#include "../utils.fc";

const int AddressList::addressBits = 256;
;; you can create an address list from a tuple of addresses [integers]
cell AddressList::serialize(tuple addressList) impure inline {
    tuple addressListBuilder = unsafeTuple([begin_cell()]);
    int idx = 0;
    while (idx < addressList.tlen()) {
        builder curBuilder = addressListBuilder.at(addressListBuilder.tlen() - 1);
        if ((curBuilder.builder_bits() + AddressList::addressBits) > MAX_CELL_BITS) {
            addressListBuilder = addressListBuilder.tpush(begin_cell());
            curBuilder = addressListBuilder.at(addressListBuilder.tlen() - 1);
        }
        addressListBuilder = addressListBuilder
            .tset(
                addressListBuilder.tlen() - 1,
                curBuilder.store_uint256(addressList.int_at(idx))
            );
        idx = idx + 1;
    }
    builder ret = addressListBuilder~tpop();
    while (addressListBuilder.tlen() > 0) {
        builder head = addressListBuilder~tpop();
        ret = head.store_ref(ret.end_cell());
    }
    return ret.end_cell();
}

;; the "iterator" is the remaining slice
(slice, int) ~AddressList::next(slice addressListSlice) impure inline {
    if (addressListSlice.slice_bits() == 0) {
        if (addressListSlice.slice_refs_empty?()) {
            return (addressListSlice, NULLADDRESS);
        } else {
            addressListSlice = addressListSlice.preload_first_ref().begin_parse();
        }
    }
    return addressListSlice.load_uint256();
}

;; Check that the addresslist is a valid linked list of addresses with no extra refs or bytes
int AddressList::isValid(cell addressList, int maxCount) impure {
    slice addressListSlice = addressList.begin_parse();
    int count = 0;
    while (addressListSlice.slice_empty?() == false) {
        (int bits, int refs) = addressListSlice.slice_bits_refs();
        if ((refs > 1) | ((bits % 256) != 0)) {
            return false;
        }
        repeat (bits / 256) {
            count += 1;
            int address = addressListSlice~load_uint256();
            if ((address == NULLADDRESS) | (count > maxCount)) {
                return false;
            }
        }
        if (addressListSlice.slice_refs() > 0) {
            addressListSlice = addressListSlice.preload_first_ref().begin_parse();
        }
    }

    return true;
}

int AddressList::includes(int address, slice addressListSlice) impure inline {
    int storedAddress = addressListSlice~AddressList::next();
    while (storedAddress > NULLADDRESS) {
        if (storedAddress == address) {
            return true;
        }
        storedAddress = addressListSlice~AddressList::next();
    }
    return false;
}

int AddressList::length(cell addressList) impure inline {
    slice addressListSlice = addressList.begin_parse();
    int count = 0;
    int dvnAddress = addressListSlice~AddressList::next();
    while (dvnAddress > NULLADDRESS) {
        count += 1;
        dvnAddress = addressListSlice~AddressList::next();
    }
    return count;
}

cell AddressList::empty() impure inline {
    return empty_cell();
}