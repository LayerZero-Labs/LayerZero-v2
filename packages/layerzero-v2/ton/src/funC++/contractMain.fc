;;; ================================================================
;; The base main function for LayerZero Endpoint, UltraLightNode, and OApp
;;; ================================================================

#include "handlerCore.fc";
#include "abstract/contractMainAbstract.fc";

;;; ===============================
;; Base main - low-level builtin context

() main(int myBalance, int msgValue, cell inMsgFull, slice inMsgBody) impure inline {
    initTxnContext(myBalance, msgValue, inMsgFull, inMsgBody);

    if (txnIsBounced()) {
        return ();
    }

    authenticateIfNecessary();

    ;; ignore empty messages
    if (inMsgBody.slice_empty?()) {
        return ();
    }

    int op = getOpcode();
    cell $md = getMsgData();

    checkPermissions(op, $md);
    
    if (op == BaseInterface::OP::EVENT) {
        throw(BaseInterface::ERROR::eventEmitted);
    }

    tuple actions = null();
    if (op == BaseInterface::OP::INITIALIZE) {
        actions = initialize($md);
    } elseif (op == BaseInterface::OP::EMPTY) {
        actions = emptyActions();
    } else {
        assertInitialized();
        actions = _executeOpcode(op, $md);
    }

    int outflowNanos = actions.at(ACTIONS_OUTFLOW);
    ;; Storage fees are deducted from the contract balance
    ;; Any amount that is explicitly deposited into this contract (getRentNanos())
    ;; is reserved to prevent it from being sent downstream
    int baseline = (getContractBalance() - storage_fees()) - (getMsgValue() - getDonationNanos());
    ;; The below assertion matches the insufficient ton behavior on action phase
    ;; And it's probably unnecessary but it doesnâ€™t cost much gas so no harm in keeping it.
    throw_unless(37, baseline >= outflowNanos);
    raw_reserve(baseline - outflowNanos, RESERVE_EXACTLY);

    ;; Whether there is any value left to refund to the origin
    int msgValueRemaining = true;
    ;; the index of the action to be processed
    int actionIndex = 1;
    int numActions = actions.tlen();
    while (actionIndex < numActions) {
        ;; ========================================
        ;; Loop management
        tuple action = actions.tuple_at(actionIndex);
        int actionType = action.int_at(0); ;; name is always the first index
        actionIndex += 1;

        ;; Applies a moving flag where if a single action returns false, then the false flag persists
        msgValueRemaining = msgValueRemaining & _executeAction(actionType, action);
    }

    ;; If any value remains, we should refund it to the origin
    if (msgValueRemaining) {
        cell msg = begin_cell()
            .store_uint(SEND_MSG_NON_BOUNCEABLE, 6)
            .store_slice(getOriginStd())
            .store_coins(0)
            .store_uint(1, 107)
            .store_ref(empty_cell())
            .end_cell();
        send_raw_message(msg, CARRY_ALL_BALANCE);
    }
}
