#include "../../../funC++/handlerCore.fc";
#include "../../../funC++/actions/call.fc";
#include "../../../funC++/actions/deploy.fc";
#include "../../../funC++/actions/event.fc";
#include "../../../funC++/actions/payment.fc";

#include "../baseStorage.fc";

int getOwner() impure inline {
    return getBaseStorage().BaseStorage::getOwner();
}

cell getInitialStorage() impure inline {
    return getBaseStorage().BaseStorage::getInitialStorage();
}

;;; ==========================================
;; Modifiers
() assertAuthenticated() impure inline {
    throw_unless(
        BaseInterface::ERROR::notAuthenticated,
        getBaseStorage().BaseStorage::getAuthenticated()
    );
}

() assertInitialized() impure inline {
    throw_unless(
        BaseInterface::ERROR::notInitialized,
        getBaseStorage().BaseStorage::getInitialized()
    );
}

;; assert the ctx sender is the owner of this contract
;; expects the ctx to be populated. Does not require storage to be loaded
() assertOwner() impure inline {
    throw_unless(
        BaseInterface::ERROR::onlyOwner,
        getCaller() == getOwner()
    );
}

;; Step 1: authenticate
() authenticate() impure {
    assertOwner();
    throw_if(
        BaseInterface::ERROR::alreadyInitialized,
        getBaseStorage().BaseStorage::getInitialized()
    );
    cell $storage = getContractStorage();

    setContractStorage(
        $storage
            .cl::set(
                BASE_STORAGE_INDEX,
                $storage
                    .cl::get<objRef>(BASE_STORAGE_INDEX)
                    .cl::set(
                        BaseStorage::initialStorage,
                        getContractStorage()
                    )
                    .cl::set(BaseStorage::authenticated, true)
            )
    );
}

() authenticateIfNecessary() impure inline {
    if (getBaseStorage().BaseStorage::getAuthenticated() == false) {
        authenticate();
    }
}

(cell, tuple) _initialize(cell $md) impure inline;

;; Step 2: initialize
tuple initialize(cell $md) impure inline {
    assertAuthenticated();
    if (getBaseStorage().BaseStorage::getInitialized()) {
        return emptyActions();
    }

    (cell $storage, tuple actions) = _initialize($md);

    setContractStorage(
        $storage
            .cl::set(
                BASE_STORAGE_INDEX,
                $storage
                    .cl::get<objRef>(BASE_STORAGE_INDEX)
                    .cl::set(BaseStorage::initialized, true)
            )
    );

    return actions;
}

;; declared inside of the actions/event.fc
;; We declare it here because it saves the need for declaring initialStorage everytime we call event
tuple _newAction<event>(int topic, cell $body) impure inline {
    return action::event::create(topic, $body, getInitialStorage());
}
