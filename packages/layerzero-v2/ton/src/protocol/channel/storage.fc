#include "../../funC++/dataStructures/PipelinedOutOfOrder.fc";

#include "../../classes/lz/EpConfig.fc";

#include "../core/baseStorage.fc";

;; maximum concurrent sendable inflight send requests
;; must be low to avoid permanent bricking
const int Channel::MAX_SEND_SLOTS = MAX_CELL_BITS;

;; required object name
const int Channel::NAME = "channel"u;

;; field names
;; Init state (sharding key)
const int Channel::baseStorage = 0;
const int Channel::path = 1;

;; Both send and receive channel state
const int Channel::endpointAddress = 2;
const int Channel::epConfigOApp = 3;

;; Send channel state
const int Channel::outboundNonce = 4;
const int Channel::sendRequestQueue = 5;
const int Channel::lastSendRequestId = 6;

;; Receive channel state
const int Channel::commitPOOO = 7;

;; Used to track the commit verification queue / capacity
const int Channel::executePOOO = 8;
const int Channel::executionQueue = 9;

const int Channel::zroBalance = 10;

;; @owner manager
cell Channel::New(int owner, cell $path, int endpointAddress) impure inline method_id {
    return cl::declare(
        Channel::NAME,
        unsafeTuple([
            [cl::t::objRef, BaseStorage::New(owner)],           ;; Channel::baseStorage
            [cl::t::objRef, $path],                             ;; Channel::path
            [cl::t::address, endpointAddress],                  ;; Channel::endpointAddress
            [cl::t::objRef, lz::EpConfig::NewWithDefaults()],   ;; Channel::epConfigOApp
            [cl::t::uint64, 0],                                 ;; Channel::outboundNonce
            [cl::t::objRef, cl::nullObject()],                 ;; Channel::sendRequestQueue (DICQ)
            [cl::t::uint64, 0],                                 ;; Channel::sendRequestId
            [cl::t::objRef, POOO::New()],                       ;; Channel::commitPOOO
            [cl::t::objRef, POOO::New()],                       ;; Channel::executePOOO
            [cl::t::cellRef, cl::nullObject()],                 ;; Channel::executionQueue (DICQ)
            [cl::t::coins, 0]                                   ;; Channel::zroBalance
        ])
    );
}

;; ====================== Object Accessors =====================

const int Channel::_endpointAddressOffset = _HEADER_WIDTH;
const int Channel::_outboundNonceOffset = Channel::_endpointAddressOffset + 256;
const int Channel::_sendRequestIdOffset = Channel::_outboundNonceOffset + 64;
const int Channel::_zroBalanceOffset = Channel::_sendRequestIdOffset + 64;
const int Channel::_sliceBits = Channel::_zroBalanceOffset + 128;

cell Channel::getBaseStorage(cell $self) impure inline {
    return $self.cellPreloadRefAt(0);
}

cell Channel::getPath(cell $self) impure inline {
    return $self.cellPreloadRefAt(1);
}

int Channel::getEndpointAddress(cell $self) impure inline {
    return $self.cellPreloadAddressAt(Channel::_endpointAddressOffset);
}

cell Channel::getCommitPOOO(cell $self) impure inline {
    return $self.cellPreloadRefAt(2).cellPreloadRefAt(2);
}

cell Channel::getExecutePOOO(cell $self) impure inline {
    return $self.cellPreloadRefAt(2).cellPreloadRefAt(3);
}

cell Channel::getExecutionQueue(cell $self) impure inline {
    return $self.cellPreloadRefAt(3).cellPreloadRefAt(0);
}

int Channel::getZroBalance(cell $self) impure inline {
    return $self.cellPreloadCoinsAt(Channel::_zroBalanceOffset);
}

;; (epConfigOApp, commitPOOO, ExecutePOOO, executionQueue)
(cell, cell, cell, cell) Channel::getCommitPacketInformation(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    slice ref2 = selfSlice.preloadRefSliceAt(2);
    return (
        ref2.preloadRefAt(0),
        ref2.preloadRefAt(2),
        ref2.preloadRefAt(3),
        selfSlice.preloadRefAt(3).cellPreloadRefAt(0)
    );
}

;; (executePOOO, executionQueue, path)
(cell, cell, cell) Channel::getExecutePOOOAndExecutionQueueAndPath(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadRefAt(2).cellPreloadRefAt(3),
        selfSlice.preloadRefAt(3).cellPreloadRefAt(0),
        selfSlice.preloadRefAt(1)
    );
}

;; (epConfigOapp, path, sendRequestQueue, lastSendRequestId)
(cell, cell, cell, int) Channel::getSendInformation(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    slice ref2 = selfSlice.preloadRefSliceAt(2);
    return (
        ref2.preloadRefAt(0),
        selfSlice.preloadRefAt(1),
        ref2.preloadRefAt(1),
        selfSlice.preloadUint64At(Channel::_sendRequestIdOffset)
    );
}

;; (sendRequestQueue, zroBalance, path, outBoundNonce)
(cell, int, cell, int) Channel::getSendCallbackInformation(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadRefAt(2).cellPreloadRefAt(1),                           ;; sendRequestQueue
        selfSlice.preloadCoinsAt(Channel::_zroBalanceOffset),                    ;; zroBalance
        selfSlice.preloadRefAt(1),                                               ;; path
        selfSlice.preloadUint64At(Channel::_outboundNonceOffset)                 ;; outboundNonce
    );
}

;; (executionQueue, commitPOOO, path)
(cell, cell, cell) Channel::getLzReceiveLockInformation(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadRefAt(3).cellPreloadRefAt(0),       ;; executionQueue
        selfSlice.preloadRefAt(2).cellPreloadRefAt(2),       ;; commitPOOO
        selfSlice.preloadRefAt(1)                            ;; path
    );
}

;; ====================== Object Modifiers =====================

cell Channel::setSendRequestQueue(cell $self, cell $sendRequestQueue) impure inline {
    slice selfSlice = $self.begin_parse();

    slice ref2Slice = selfSlice.preloadRefSliceAt(2);
    cell newRef2 = begin_cell()
        .store_slice(ref2Slice.scutfirst(0, 1))
        .store_ref($sendRequestQueue)
        .store_slice(ref2Slice.scutlast(0, 2))
        .end_cell();

    return begin_cell()
        .store_slice(selfSlice.scutfirst(Channel::_sliceBits, 2)) ;; store all the bits and the first 2 refs [0, 1]
        .store_ref(newRef2) ;; store the new ref[2] which includes the new sendRequestQueue
        .store_slice(selfSlice.scutlast(0, 1)) ;; store the last ref, ref[3]
        .end_cell();
}

cell Channel::setExecutePOOO(cell $self, cell $executePOOO) impure inline {
    slice selfSlice = $self.begin_parse();

    slice ref2Slice = selfSlice.preloadRefSliceAt(2);
    cell newRef2 = begin_cell()
        .store_slice(ref2Slice.scutfirst(0, 3))
        .store_ref($executePOOO)
        .end_cell();

    return begin_cell()
        .store_slice(selfSlice.scutfirst(Channel::_sliceBits, 2)) ;; store all the bits and the first 2 refs [0, 1]
        .store_ref(newRef2) ;; store the new ref[2] which includes the new executePOOO
        .store_slice(selfSlice.scutlast(0, 1)) ;; store the last ref, ref[3]
        .end_cell();
}

cell Channel::setExecutionQueue(cell $self, cell $executionQueue) impure inline {
    slice selfSlice = $self.begin_parse();

    cell newRef3 = begin_cell()
        .store_ref($executionQueue)
        .end_cell();

    return begin_cell()
        .store_slice(selfSlice.scutfirst(Channel::_sliceBits, 3)) ;; store all the bits and the first 3 refs [0, 1, 2]
        .store_ref(newRef3) ;; store the new ref[3] which includes the new executionQueue
        .end_cell();
}

;; ====================== Object Composite Modifiers =====================

cell Channel::setSendRequestQueueAndLastSendRequestId(cell $self, int lastSendRequestId, cell $sendRequestQueue) impure inline {
    slice selfSlice = $self.begin_parse();
    slice ref2Slice = selfSlice.preloadRefSliceAt(2);

    cell newRef2 = begin_cell()
        .store_slice(ref2Slice.scutfirst(0, 1))
        .store_ref($sendRequestQueue)
        .store_slice(ref2Slice.scutlast(0, 2))
        .end_cell();

    return begin_cell()
        .store_slice(selfSlice.scutfirst(Channel::_sendRequestIdOffset, 2)) ;; store all the bits before the lastSendRequestId and the first 2 refs [0, 1]
        .store_uint64(lastSendRequestId) ;; store the new lastSendRequestId = ref[2]
        .store_ref(newRef2) ;; store the new ref[2] which includes the new sendRequestQueue
        .store_slice(selfSlice.sskipfirst(Channel::_sendRequestIdOffset + 64, 3)) ;; store the whatever was after the lastSendRequestId and the last ref, only giving back ref[3]
        .end_cell();
}

cell Channel::setOutboundNonceAndZroBalance(cell $self, int outboundNonce, int zroBalance) impure inline {
    slice selfSlice = $self.begin_parse();

    return begin_cell()
        .store_slice(
            selfSlice.scutfirst(Channel::_outboundNonceOffset, 4)
        ) ;; store whatever's behind the outbound nonce and all the refs
        .store_uint64(outboundNonce)
        .store_slice(
            selfSlice.subslice(
                Channel::_sendRequestIdOffset, ;; start bits
                0, ;; start refs
                64, ;; bits
                0 ;; refs
            )
        ) ;; store the next 64 bits = sendRequestId
        .store_uint128(zroBalance)
        .end_cell();
}

cell Channel::setCommitPOOOAndExecutionQueue(cell $self, cell $commitPOOO, cell $executionQueue) impure inline {
    slice selfSlice = $self.begin_parse();

    slice ref2Slice = selfSlice.preloadRefSliceAt(2);
    cell newRef2 = begin_cell()
        .store_slice(ref2Slice.scutfirst(0, 2)) ;; store the first 2 refs [0, 1]
        .store_ref($commitPOOO)                   ;; store the new commitPOOO = ref[2]
        .store_slice(ref2Slice.scutlast(0, 1)) ;; store the last ref, ref[3]
        .end_cell();

    cell newRef3 = begin_cell()
        .store_ref($executionQueue) ;; store the new executionQueue = ref[0]
        .end_cell();

    return begin_cell()
        .store_slice(selfSlice.scutfirst(Channel::_sliceBits, 2)) ;; store all the bits and the first 3 refs [0, 1]  
        .store_ref(newRef2) ;; store the new ref[2] which includes the new commitPOOO
        .store_ref(newRef3) ;; store the new ref[3] which includes the new executionQueue
        .end_cell();  
}

cell Channel::setPath(cell $self, cell $path) impure inline {
    slice selfSlice = $self.begin_parse();
    return begin_cell()
        .store_ref(selfSlice.preloadRefAt(0))
        .store_ref($path) ;; change ref 1
        .store_slice(sskipfirst(selfSlice, 0, 2)) ;; rest of it stays the same
        .end_cell();
}

cell Channel::sanitize(cell $self) impure inline {
    cell $baseStorage = $self.cl::get<cellRef>(Channel::baseStorage);
    return Channel::New(
        $baseStorage.cl::get<address>(BaseStorage::owner),
        $self.cl::get<cellRef>(Channel::path),
        $self.cl::get<address>(Channel::endpointAddress)
    );
}