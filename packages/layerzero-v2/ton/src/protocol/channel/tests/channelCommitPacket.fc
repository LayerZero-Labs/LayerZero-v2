#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "channelReceiveUtils.fc";
#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../interfaces.fc";
#include "../../msglibs/interface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/dataStructures/DeterministicInsertionCircularQueue.fc";
#include "../../../funC++/dataStructures/PipelinedOutOfOrder.fc";
#include "../../../../tests/consts.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../classes/lz/Packet.fc";
#include "../../../classes/lz/ReceiveEpConfig.fc";
#include "../../../classes/msgdata/ChannelNonceInfo.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/MdObj.fc";
#include "../../../classes/msgdata/Nonce.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Channel::CommitPacket1n"; }

cell createContractStorage() impure {
    setContractStorage(
        Channel::New(
            getCaller(),
            MOCK_SEND_PATH(),
            ENDPOINT_ADDRESS
        )
    );
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(cl::nullObject());
    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(false));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================


;; ;; --------------- channel commit packet -----------------
(int, slice) channelCommitPacket::success::nonce1(cell $storage) impure {
    ;; commit the first uncommitted nonce
    int nonce = 1;
    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(true));
    $storage = getContractStorage();

    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(nonce);

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; setup the expected state
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);
    cell executionQueue = DeterministicInsertionCircularQueue::set(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        nonce,
        $packet,
        ExecutionQueue::committed
    );

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonce))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    nonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::customReceiveLib::nonce1(cell $storage) impure {
    ;; commit the first uncommitted nonce
    int nonce = 1;
    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(nonce);
    cell $epConfigOApp = MOCK_RESOLVED_EP_CONFIG(false);

    setEpConfigOApp($epConfigOApp);
    $storage = getContractStorage();

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        lz::ReceiveEpConfig::New(NULLADDRESS, NULLADDRESS, 0),
        $epConfigOApp.cl::get<address>(lz::EpConfig::receiveMsglibConnection)
    );
    
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);

    cell executionQueue = DeterministicInsertionCircularQueue::set(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        nonce,
        $packet,
        ExecutionQueue::committed
    );

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonce))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                $epConfigOApp.cl::get<address>(lz::EpConfig::receiveMsglibConnection),
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    nonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::customTimeoutReceiveLib::nonce1(cell $storage) impure {
    ;; commit the first uncommitted nonce
    int nonce = 1;
    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(nonce);
    cell $epConfigOApp = MOCK_RESOLVED_EP_CONFIG(false);

    setEpConfigOApp($epConfigOApp);
    $storage = getContractStorage();

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        lz::ReceiveEpConfig::New(NULLADDRESS, NULLADDRESS, 0),
        $epConfigOApp.cl::get<address>(lz::EpConfig::timeoutReceiveMsglibConnection)
    );
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);

    cell executionQueue = DeterministicInsertionCircularQueue::set(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        nonce,
        $packet,
        ExecutionQueue::committed
    );

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonce))
        .cl::set(Channel::executionQueue, executionQueue);

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                $epConfigOApp.cl::get<address>(lz::EpConfig::timeoutReceiveMsglibConnection),
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    nonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::nonce2(cell $storage) impure {
    int nonce = 2;
    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(nonce);

    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(true));
    $storage = getContractStorage();

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);

    cell executionQueue  = DeterministicInsertionCircularQueue::set(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        nonce,
        $packet,
        ExecutionQueue::committed
    );

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonce))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    nonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::nonce2Helper(cell $storage) impure {
    int nonce = 2;

    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(true));

    $storage = getContractStorage();

    commitNonce(nonce);
    cell $expectedStorage = getContractStorage();
    setContractStorage($storage);
    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(nonce);

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    nonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::nonce123(cell $storage) impure {
    ;; commit the first uncommitted nonce
    commitNonce(1);
    commitNonce(2);
    $storage = getContractStorage();
    commitNonce(3);
    cell $expectedStorage = getContractStorage();
    setContractStorage($storage);
    int nonce = 3;
    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(nonce);

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    nonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::timeoutReceiveMsglib(cell $storage) impure {
    int nonce = 1;
    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(nonce);

    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(true));

    $storage = getContractStorage();

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        TIMEOUT_RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);

    cell executionQueue  = DeterministicInsertionCircularQueue::set(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        nonce,
        $packet,
        ExecutionQueue::committed
    );

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonce))
        .cl::set(Channel::executionQueue, executionQueue);

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                TIMEOUT_RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    nonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::nonceTooSmall(cell $storage) impure {
    ;; try to commit an already executed nonce
    int alreadyExecutedNonce = 1;
    commitNonce(alreadyExecutedNonce);
    lockNonce(alreadyExecutedNonce);
    executeNonce(alreadyExecutedNonce);

    $storage = getContractStorage();

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_RECEIVE_PACKET_WITH_NONCE(alreadyExecutedNonce),
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    alreadyExecutedNonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $storage,
        txnContext
    );
}

(int, slice) channelCommitPacket::revert::nonceTooBig(cell $storage) impure {
    ;; try to commit a nonce beyond the capacity of the queue
    int tooBigNonce = MAX_CELL_BITS + 1;

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_RECEIVE_PACKET_WITH_NONCE(tooBigNonce),
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        emptyActions(),
        $storage,
        txnContext
    );
}

(int, slice) channelCommitPacket::success::nonceAlreadyExecuted(cell $storage) impure {
    ;; try to commit a nonce which is within window but already executed
    int alreadyExecutedNonce = 2;
    commitNonce(1);
    commitNonce(alreadyExecutedNonce);
    lockNonce(alreadyExecutedNonce);
    executeNonce(alreadyExecutedNonce);

    $storage = getContractStorage();

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_RECEIVE_PACKET_WITH_NONCE(alreadyExecutedNonce),
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    alreadyExecutedNonce,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $storage,
        txnContext
    );
}

(int, slice) channelCommitPacket::revert::invalidNonce(cell $storage) impure {
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_RECEIVE_PACKET_WITH_NONCE(0),
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldFail(
        channelCommitPacket,
        $mdExtended,
        Channel::ERROR::invalidNonce
    );
}

(int, slice) channelCommitPacket::revert::nonceCurrentlyExecuting(cell $storage) impure {
    commitNonce(1);
    commitNonce(2);
    lockNonce(2);

    $storage = getContractStorage();

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_RECEIVE_PACKET_WITH_NONCE(2),
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    2,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $storage,
        txnContext
    );
}

(int, slice) channelCommitPacket::revert::wrongReceiveMsglib(cell $storage) impure {
    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_RECEIVE_PACKET_WITH_NONCE(1),
        MOCK_SML_RECEIVE_EP_CONFIG(),
        SEND_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldFail(
        channelCommitPacket,
        $mdExtended,
        Channel::ERROR::onlyApprovedReceiveMsglib
    );
}

(int, slice) channelCommitPacket::revert::expiredTimeoutReceiveMsglib(cell $storage) impure {
    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(true));
    cell $mdExtended = md::ExtendedMd::New(
        MOCK_RECEIVE_PACKET_WITH_NONCE(1),
        MOCK_SML_RECEIVE_EP_CONFIG().cl::set(lz::ReceiveEpConfig::expiry, now() - 1),
        TIMEOUT_RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldFail(
        channelCommitPacket,
        $mdExtended,
        Channel::ERROR::onlyApprovedReceiveMsglib
    );
}

(int, slice) channelCommitPacket::success::maxSizeMessage(cell $storage) impure {
    int nextSendRequestId = $storage.cl::get<uint64>(Channel::lastSendRequestId) + 1;

    cell tail = begin_cell().store_ones(MAX_CELL_WHOLE_BYTE_BITS).end_cell();
    repeat(lz::Packet::MAX_RECEIVE_MESSAGE_CELLS - 1) {
        tail = begin_cell()
            .store_ones(MAX_CELL_WHOLE_BYTE_BITS)
            .store_ref(tail)
            .end_cell();
    }

    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(true));
    $storage = getContractStorage();

    cell $packet = MOCK_RECEIVE_PACKET_WITH_MESSAGE(tail);

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; setup the expected state
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);
    cell executionQueue = DeterministicInsertionCircularQueue::set(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        NONCE,
        $packet,
        ExecutionQueue::committed
    );

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, NONCE))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    NONCE,
                    $storage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) channelCommitPacket::revert::messageTooBig(cell $storage) impure {
    cell tail = begin_cell().store_ones(MAX_CELL_WHOLE_BYTE_BITS).end_cell();
    repeat(lz::Packet::MAX_RECEIVE_MESSAGE_CELLS) {
        tail = begin_cell()
            .store_ones(MAX_CELL_WHOLE_BYTE_BITS)
            .store_ref(tail)
            .end_cell();
    }

    cell $packet = MOCK_RECEIVE_PACKET_WITH_MESSAGE(tail);

    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldFail(
        channelCommitPacket,
        $mdExtended,
        lz::Packet::ERROR::INVALID_MESSAGE
    );
}

(int, slice) channelCommitPacket::revert::messageNotByteAligned(cell $storage) impure {
    cell $packet = MOCK_RECEIVE_PACKET_WITH_MESSAGE(begin_cell().store_bool(true).end_cell());

    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldFail(
        channelCommitPacket,
        $mdExtended,
        lz::Packet::ERROR::INVALID_MESSAGE
    );
}

(int, slice) channelCommitPacket::revert::messageNotLinkedList(cell $storage) impure {
    cell innerMessageCell = begin_cell().store_ones(MAX_CELL_WHOLE_BYTE_BITS).end_cell();
    cell $packet = MOCK_RECEIVE_PACKET_WITH_MESSAGE(
        begin_cell()
            .store_ones(MAX_CELL_WHOLE_BYTE_BITS)
            .store_ref(innerMessageCell)
            .store_ref(innerMessageCell)
            .end_cell()
    );

    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldFail(
        channelCommitPacket,
        $mdExtended,
        lz::Packet::ERROR::INVALID_MESSAGE
    );
}

(int, slice) channelCommitPacket::revert::messageInnerNodeNotFilled(cell $storage) impure {
    cell tail = begin_cell().store_ones(MAX_CELL_WHOLE_BYTE_BITS).end_cell();
    cell $packet =  MOCK_RECEIVE_PACKET_WITH_MESSAGE(
        begin_cell()
            .store_ones(MAX_CELL_WHOLE_BYTE_BITS - 8)
            .store_ref(tail)
            .end_cell()
    );

    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    return test::handler::shouldFail(
        channelCommitPacket,
        $mdExtended,
        lz::Packet::ERROR::INVALID_MESSAGE
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([initializeTestStorage, "initializeTestStorage"])
            ;; -- channel commit packet
            .tpush([channelCommitPacket::success::nonce1, "channelCommitPacket::success::nonce1"])
            .tpush([channelCommitPacket::success::customReceiveLib::nonce1, "channelCommitPacket::success::customReceiveLib::nonce1"])
            .tpush([channelCommitPacket::success::customTimeoutReceiveLib::nonce1, "channelCommitPacket::success::customTimeoutReceiveLib::nonce1"])
            .tpush([channelCommitPacket::success::nonce2, "channelCommitPacket::success::nonce2"])
            .tpush([channelCommitPacket::success::nonce2Helper, "channelCommitPacket::success::nonce2Helper"])
            .tpush([channelCommitPacket::success::nonce123, "channelCommitPacket::success::nonce123"])
            .tpush([channelCommitPacket::success::timeoutReceiveMsglib, "channelCommitPacket::success::timeoutReceiveMsglib"])
            .tpush([channelCommitPacket::success::nonceTooSmall, "channelCommitPacket::success::nonceTooSmall"])
            .tpush([channelCommitPacket::revert::nonceTooBig, "channelCommitPacket::revert::nonceTooBig"])
            .tpush([channelCommitPacket::success::nonceAlreadyExecuted, "channelCommitPacket::success::nonceAlreadyExecuted"])
            .tpush([channelCommitPacket::revert::invalidNonce, "channelCommitPacket::revert::invalidNonce"])
            .tpush([channelCommitPacket::revert::nonceCurrentlyExecuting, "channelCommitPacket::revert::nonceCurrentlyExecuting"])
            .tpush([channelCommitPacket::revert::wrongReceiveMsglib, "channelCommitPacket::revert::wrongReceiveMsglib"])
            .tpush([channelCommitPacket::revert::expiredTimeoutReceiveMsglib, "channelCommitPacket::revert::expiredTimeoutReceiveMsglib"])
            .tpush([channelCommitPacket::success::maxSizeMessage, "channelCommitPacket::success::maxSizeMessage"])
            .tpush([channelCommitPacket::revert::messageTooBig, "channelCommitPacket::revert::messageTooBig"])
            .tpush([channelCommitPacket::revert::messageNotByteAligned, "channelCommitPacket::revert::messageNotByteAligned"])
            .tpush([channelCommitPacket::revert::messageNotLinkedList, "channelCommitPacket::revert::messageNotLinkedList"])
            .tpush([channelCommitPacket::revert::messageInnerNodeNotFilled, "channelCommitPacket::revert::messageInnerNodeNotFilled"])
    );
}