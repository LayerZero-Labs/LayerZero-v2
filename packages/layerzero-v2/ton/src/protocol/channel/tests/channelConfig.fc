#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../interfaces.fc";
#include "../../msglibs/interface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/dataStructures/DeterministicInsertionCircularQueue.fc";
#include "../../../funC++/stringlib.fc";
#include "../../../funC++/utils.fc";
#include "../../../../tests/consts.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../classes/lz/Packet.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Channel::receive"; }

cell createContractStorage() impure {
    setContractStorage(
        Channel::New(
            getCaller(),
            MOCK_SEND_PATH(),
            ENDPOINT_ADDRESS
        )
    );
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(cl::nullObject());
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}
;;; ===============================HELPER FUNCTIONS=========================================

;;; ===============================TESTS=========================================

(int, slice) setEpConfigOApp::success::basic(cell $storage) impure {
    cell $epConfigMd = MOCK_RESOLVED_EP_CONFIG(false);

    cell $expectedStorage = $storage.cl::set(Channel::epConfigOApp, $epConfigMd);

    return test::handler::shouldPass(
        setEpConfigOApp,
        $epConfigMd,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::EP_CFG_OAPP_SET,
                $epConfigMd
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigOApp::success::SendMsglib(cell $storage) impure {
    cell $expectedStorage = 
        $storage.cl::set(
            Channel::epConfigOApp,
            $storage
                .cl::get<objRef>(Channel::epConfigOApp)
                .cl::set(lz::EpConfig::sendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
                .cl::set(lz::EpConfig::sendMsglib, SEND_MSGLIB_ADDRESS)
        )
    ;

    cell $epConfig = lz::EpConfig::NewWithConnection(
        true,
        SEND_MSGLIB_MANAGER_ADDRESS,
        SEND_MSGLIB_ADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        0
    );

    return test::handler::shouldPass(
        setEpConfigOApp,
        $epConfig,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::EP_CFG_OAPP_SET,
                $epConfig
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigOApp::success::ReceiveMsglib(cell $storage) impure {
    cell $expectedStorage = 
        $storage.cl::set(
            Channel::epConfigOApp,
            $storage
                .cl::get<objRef>(Channel::epConfigOApp)
                .cl::set(lz::EpConfig::receiveMsglib, RECEIVE_MSGLIB_ADDRESS)
        )
    ;

    cell $epConfig = lz::EpConfig::New(
        true,
        NULLADDRESS,
        NULLADDRESS,
        RECEIVE_MSGLIB_ADDRESS,
        NULLADDRESS,
        0
    );

    return test::handler::shouldPass(
        setEpConfigOApp,
        $epConfig,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::EP_CFG_OAPP_SET,
                $epConfig
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigOApp::success::TimeoutMsglib(cell $storage) impure {
    cell $expectedStorage = 
        $storage.cl::set(
            Channel::epConfigOApp,
            $storage
                .cl::get<objRef>(Channel::epConfigOApp)
                .cl::set(lz::EpConfig::timeoutReceiveMsglib, TIMEOUT_RECEIVE_MSGLIB_ADDRESS)
                .cl::set(lz::EpConfig::timeoutReceiveMsglibExpiry, MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY())
        )
    ;

    cell $epConfig = lz::EpConfig::New(
        true,
        NULLADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_ADDRESS,
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );

    return test::handler::shouldPass(
        setEpConfigOApp,
        $epConfig,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::EP_CFG_OAPP_SET,
                $epConfig
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigOApp::success::SendAndReceiveMsglib(cell $storage) impure {
    cell $expectedStorage = 
        $storage.cl::set(
            Channel::epConfigOApp,
            $storage
                .cl::get<objRef>(Channel::epConfigOApp)
                .cl::set(lz::EpConfig::sendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
                .cl::set(lz::EpConfig::sendMsglib, SEND_MSGLIB_ADDRESS)
                .cl::set(lz::EpConfig::receiveMsglib, RECEIVE_MSGLIB_ADDRESS)
        )
    ;

    cell $epConfig = lz::EpConfig::New(
        true,
        SEND_MSGLIB_MANAGER_ADDRESS,
        SEND_MSGLIB_ADDRESS,
        RECEIVE_MSGLIB_ADDRESS,
        NULLADDRESS,
        0
    );

    return test::handler::shouldPass(
        setEpConfigOApp,
        $epConfig,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::EP_CFG_OAPP_SET,
                $epConfig
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigOApp::success::SendAndTimeoutMsglib(cell $storage) impure {
    cell $expectedStorage = 
        $storage.cl::set(
            Channel::epConfigOApp,
            $storage
                .cl::get<objRef>(Channel::epConfigOApp)
                .cl::set(lz::EpConfig::sendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
                .cl::set(lz::EpConfig::sendMsglib, SEND_MSGLIB_ADDRESS)
                .cl::set(lz::EpConfig::timeoutReceiveMsglib, TIMEOUT_RECEIVE_MSGLIB_ADDRESS)
                .cl::set(lz::EpConfig::timeoutReceiveMsglibExpiry, MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY())
        )
    ;

    cell $epConfig = lz::EpConfig::New(
        true,
        SEND_MSGLIB_MANAGER_ADDRESS,
        SEND_MSGLIB_ADDRESS,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_ADDRESS,
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );

    return test::handler::shouldPass(
        setEpConfigOApp,
        $epConfig,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::EP_CFG_OAPP_SET,
                $epConfig
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigOApp::success::ReceiveAndTimeoutMsglib(cell $storage) impure {
    cell $expectedStorage = 
        $storage.cl::set(
            Channel::epConfigOApp,
            $storage
                .cl::get<objRef>(Channel::epConfigOApp)
                .cl::set(lz::EpConfig::receiveMsglib, RECEIVE_MSGLIB_ADDRESS)
                .cl::set(lz::EpConfig::timeoutReceiveMsglib, TIMEOUT_RECEIVE_MSGLIB_ADDRESS)
                .cl::set(lz::EpConfig::timeoutReceiveMsglibExpiry, MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY())
        )
    ;

    cell $epConfig = lz::EpConfig::New(
        true,
        NULLADDRESS,
        NULLADDRESS,
        RECEIVE_MSGLIB_ADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_ADDRESS,
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );

    return test::handler::shouldPass(
        setEpConfigOApp,
        $epConfig,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::EP_CFG_OAPP_SET,
                $epConfig
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigOApp::revert::invalidConfigWithSameMsglib(cell $storage) impure {
    ;; form an invalid config where, receive_lib and timeoutReceiveMsglib are the same
    cell $invalidEpConfigMd = MOCK_EP_CONFIG(false)
        .cl::set(lz::EpConfig::timeoutReceiveMsglib, RECEIVE_MSGLIB_ADDRESS);

    return test::handler::shouldFail(
        setEpConfigOApp,
        $invalidEpConfigMd,
        lz::EpConfig::ERROR::sameMsglib
    );
}

(int, slice) setEpConfigOApp::revert::invalidExpiry(cell $storage) impure {
    cell $epConfig = lz::EpConfig::New(
        true,
        NULLADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_ADDRESS,
        0
    );

    return test::handler::shouldFail(
        setEpConfigOApp,
        $epConfig,
        lz::EpConfig::ERROR::invalidTimeoutExpiry
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([initializeTestStorage, "initializeTestStorage"])
            .tpush([setEpConfigOApp::success::basic, "setEpConfigOApp::success::basic"])
            .tpush([setEpConfigOApp::success::SendMsglib, "setEpConfigOApp::success::SendMsglib"])
            .tpush([setEpConfigOApp::success::ReceiveMsglib, "setEpConfigOApp::success::ReceiveMsglib"])
            .tpush([setEpConfigOApp::success::TimeoutMsglib, "setEpConfigOApp::success::TimeoutMsglib"])
            .tpush([setEpConfigOApp::success::SendAndReceiveMsglib, "setEpConfigOApp::success::SendAndReceiveMsglib"])
            .tpush([setEpConfigOApp::success::SendAndTimeoutMsglib, "setEpConfigOApp::success::SendAndTimeoutMsglib"])
            .tpush([setEpConfigOApp::success::ReceiveAndTimeoutMsglib, "setEpConfigOApp::success::ReceiveAndTimeoutMsglib"])
            .tpush([setEpConfigOApp::revert::invalidConfigWithSameMsglib, "setEpConfigOApp::revert::invalidConfigWithSameMsglib"])
            .tpush([setEpConfigOApp::revert::invalidExpiry, "setEpConfigOApp::revert::invalidExpiry"])
    );
}