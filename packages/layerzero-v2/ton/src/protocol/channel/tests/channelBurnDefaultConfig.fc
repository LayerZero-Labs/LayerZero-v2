#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "channelReceiveUtils.fc";
#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/Packet.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../interfaces.fc";
#include "../../msglibs/interface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/constants.fc";
#include "../../../funC++/dataStructures/DeterministicInsertionCircularQueue.fc";
#include "../../../funC++/dataStructures/PipelinedOutOfOrder.fc";
#include "../../../funC++/stdlib.fc";
#include "../../../funC++/stringlib.fc";
#include "../../../funC++/utils.fc";
#include "../../../../tests/consts.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../classes/lz/Packet.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/MdAddress.fc";
#include "../../../classes/msgdata/MdObj.fc";
#include "../../../classes/msgdata/PacketId.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Channel::burn"; }

cell createContractStorage() impure {
    setContractStorage(
        Channel::New(
            getCaller(),
            MOCK_SEND_PATH(),
            ENDPOINT_ADDRESS
        )
    );
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(cl::nullObject());
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) burn::success::uncommittedNonce(cell $storage) impure {
    int nonceToBurn = 1; ;; this hasnt been committed previously

    ;; inputs
    cell $packetIdToBurn = md::PacketId::New(MOCK_RECEIVE_PATH(), nonceToBurn);
    cell $packetToBurn = lz::Packet::New(
        MOCK_RECEIVE_PATH(),
        empty_cell(),
        nonceToBurn
    );

    ;; setup the expected state
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);
    cell $executePOOO = $storage.cl::get<objRef>(Channel::executePOOO);
    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        $storage.cl::get<cellRef>(Channel::executionQueue), 
        nonceToBurn
    );

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonceToBurn))
        .cl::set(Channel::executePOOO, POOO::set($executePOOO, nonceToBurn))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        burn,
        $packetIdToBurn,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_BURNED,
                $packetToBurn
            ),
            _newAction<call>(
                SRC_OAPP, ;; In this test/context the src IS the dst
                Layerzero::OP::BURN_CALLBACK,
                md::MdObj::New($packetIdToBurn, getInitialStorage())
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) burn::success::alreadyCommittedNonce(cell $storage) impure {
    int initialNonce = 1;
    int nonceToBurn = initialNonce;

    ;; packets
    cell $packet = MOCK_SEND_PACKET_WITH_NONCE(initialNonce);

    ;; mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; commit the packet
    channelCommitPacket($mdExtended);
    ;; get current state after packet has been committed
    $storage = getContractStorage();

    ;; inputs
    cell $packetIdToBurn = md::PacketId::New(MOCK_RECEIVE_PATH(), nonceToBurn);

    ;; setup the expected state
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);
    cell $executePOOO = $storage.cl::get<objRef>(Channel::executePOOO);
    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        $storage.cl::get<cellRef>(Channel::executionQueue), 
        nonceToBurn
    );
    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonceToBurn))
        .cl::set(Channel::executePOOO, POOO::set($executePOOO, nonceToBurn))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        burn,
        $packetIdToBurn,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_BURNED,
                $packet
            ),
            _newAction<call>(
                SRC_OAPP, ;; In this test/context the src IS the dst
                Layerzero::OP::BURN_CALLBACK,
                md::MdObj::New($packetIdToBurn, getInitialStorage())
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) burn::success::multipleNonces(cell $storage) impure {
    int initialNonce = 1;
    int nonceToBurn = 4;

    ;; packets
    cell $packet1 = MOCK_SEND_PACKET_WITH_NONCE(initialNonce);
    cell $packet2 = MOCK_SEND_PACKET_WITH_NONCE(initialNonce + 1);
    cell $packet3 = MOCK_SEND_PACKET_WITH_NONCE(initialNonce + 2);

    ;; mock input 1
    cell $mdExtended1 = md::ExtendedMd::New(
        $packet1,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );
    ;; mock input 2
    cell $mdExtended2 = md::ExtendedMd::New(
        $packet2,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );
    ;; mock input 3
    cell $mdExtended3 = md::ExtendedMd::New(
        $packet3,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; commit the first 3 packets/nonces
    channelCommitPacket($mdExtended1);
    channelCommitPacket($mdExtended2);
    channelCommitPacket($mdExtended3);

    ;; get current state after 3 packets have been committed
    $storage = getContractStorage();

    ;; inputs
    cell $packetIdToBurn = md::PacketId::New(MOCK_RECEIVE_PATH(), nonceToBurn);
    cell $packetToBurn = lz::Packet::New(
        MOCK_RECEIVE_PATH(),
        empty_cell(),
        nonceToBurn
    );

    ;; setup the expected state
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);
    cell $executePOOO = $storage.cl::get<objRef>(Channel::executePOOO);
    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        $storage.cl::get<cellRef>(Channel::executionQueue), 
        nonceToBurn
    );
    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, nonceToBurn))
        .cl::set(Channel::executePOOO, POOO::set($executePOOO, nonceToBurn))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        burn,
        $packetIdToBurn,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_BURNED,
                $packetToBurn
            ),
            _newAction<call>(
                SRC_OAPP, ;; In this test/context the src IS the dst
                Layerzero::OP::BURN_CALLBACK,
                md::MdObj::New($packetIdToBurn, getInitialStorage())
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) burn::revert::nonceNotExecutable(cell $storage) impure {
    int nonceToBurn = NONCE; ;; this hasnt been committed previously

    ;; inputs
    cell $packetIdToBurn = md::PacketId::New(MOCK_RECEIVE_PATH(), nonceToBurn);

    return test::handler::shouldFail(
        burn,
        $packetIdToBurn,
        Channel::ERROR::notExecuting
    );
}

(int, slice) burn::revert::wrongPath(cell $storage) impure {
    int nonceToBurn = NONCE; ;; this hasnt been committed previously

    ;; inputs
    cell $packetIdToBurn = md::PacketId::New(MOCK_SEND_PATH(), nonceToBurn);

    return test::handler::shouldFail(
        burn,
        $packetIdToBurn,
        Channel::ERROR::wrongPath
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            ;; -- initialize
            .tpush([initializeTestStorage, "initializeTestStorage"])
            ;; -- burn
            .tpush([burn::success::uncommittedNonce, "burn::success::uncommittedNonce"])
            .tpush([burn::success::alreadyCommittedNonce, "burn::success::alreadyCommittedNonce"])
            .tpush([burn::success::multipleNonces, "burn::success::multipleNonces"])
            .tpush([burn::revert::nonceNotExecutable, "burn::revert::nonceNotExecutable"])
            .tpush([burn::revert::wrongPath, "burn::revert::wrongPath"])
    );
}