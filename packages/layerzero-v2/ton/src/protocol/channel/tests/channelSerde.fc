#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/stdlib.fc";
#include "../../../../tests/mocks.fc";
#include "../../../../tests/baseSerdeTest.fc";
#include "../../../funC++/testutils.fc";
#include "../../../funC++/dataStructures/PipelinedOutOfOrder.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Channel::Serde"; }

;; Channel: Has 7 getters,
;;          Has 5 multi-getter (deserializer),
;;          Has 7 setters

(int, slice) Serde::Channel::getBaseStorage(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::getRef::equal(
        $initChannel,
        Channel::getBaseStorage,
        Channel::baseStorage
    );
}

(int, slice) Serde::Channel::getPath(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::getRef::equal(
        $initChannel,
        Channel::getPath,
        Channel::path
    );
}

(int, slice) Serde::Channel::getEndpointAddress(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::getData::equal(
        $initChannel,
        Channel::getEndpointAddress,
        Channel::endpointAddress
    );
}

(int, slice) Serde::Channel::getCommitPOOO(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::getRef::equal(
        $initChannel,
        Channel::getCommitPOOO,
        Channel::commitPOOO
    );
}

(int, slice) Serde::Channel::getExecutePOOO(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::getRef::equal(
        $initChannel,
        Channel::getExecutePOOO,
        Channel::executePOOO
    );
}

(int, slice) Serde::Channel::getExecutionQueue(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::getRef::equal(
        $initChannel,
        Channel::getExecutionQueue,
        Channel::executionQueue
    );
}

(int, slice) Serde::Channel::getZroBalance(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::getData::equal(
        $initChannel,
        Channel::getZroBalance,
        Channel::zroBalance
    );
}

(int, slice) Serde::Channel::getCommitPacketInformation(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS)
        .cl::set(Channel::commitPOOO, POOO::New().POOO::set(1))
        .cl::set(Channel::executePOOO, POOO::New().POOO::set(2));

    (
        cell epConfigOApp,
        cell commitPOOO,
        cell executePOOO,
        cell executionQueue
    ) = Channel::getCommitPacketInformation($initChannel);

    return test::multiget::equal(
        $initChannel,
        unsafeTuple([
            Channel::epConfigOApp,
            Channel::commitPOOO,
            Channel::executePOOO,
            Channel::executionQueue
        ]),
        unsafeTuple([epConfigOApp, commitPOOO, executePOOO, executionQueue])
    );
}

(int, slice) Serde::Channel::getExecutePOOOAndExecuionQueueAndPath(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS)
        .cl::set(Channel::executePOOO, POOO::New().POOO::set(1));

    (
        cell executePOOO,
        cell executionQueue,
        cell path
    ) = Channel::getExecutePOOOAndExecutionQueueAndPath($initChannel);

    return test::multiget::equal(
        $initChannel,
        unsafeTuple([
            Channel::executePOOO,
            Channel::executionQueue,
            Channel::path
        ]),
        unsafeTuple([executePOOO, executionQueue, path])
    );
}

(int, slice) Serde::Channel::getSendInformation(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    (
        cell epConfigOApp,
        cell path,
        cell sendRequestQueue,
        int lastSendRequestId
    ) = Channel::getSendInformation($initChannel);

    return test::multiget::equal(
        $initChannel,
        unsafeTuple([
            Channel::epConfigOApp,
            Channel::path,
            Channel::sendRequestQueue,
            Channel::lastSendRequestId
        ]),
        unsafeTuple([epConfigOApp, path, sendRequestQueue, lastSendRequestId])
    );
}

(int, slice) Serde::Channel::getSendCallbackInformation(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS)
        .cl::set(Channel::outboundNonce, 1);

    (
        cell sendRequestQueue,
        int zroBalance,
        cell path,
        int outboundNonce
    ) = Channel::getSendCallbackInformation($initChannel);

    return test::multiget::equal(
        $initChannel,
        unsafeTuple([
            Channel::sendRequestQueue,
            Channel::zroBalance,
            Channel::path,
            Channel::outboundNonce
        ]),
        unsafeTuple([sendRequestQueue, zroBalance, path, outboundNonce])
    );
}

(int, slice) Serde::Channel::getLzReceiveLockInformation(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS)
        .cl::set(Channel::commitPOOO, POOO::New().POOO::set(1));

    (
        cell executionQueue,
        cell commitPOOO,
        cell path
    ) = Channel::getLzReceiveLockInformation($initChannel);

    return test::multiget::equal(
        $initChannel,
        unsafeTuple([
            Channel::executionQueue,
            Channel::commitPOOO,
            Channel::path
        ]),
        unsafeTuple([executionQueue, commitPOOO, path])
    );
}

(int, slice) Serde::Channel::setSendRequestQueue(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    cell newSendRequestQueue = _getRandomCode(121);

    cell $expectedChannel = $initChannel
        .cl::set(Channel::sendRequestQueue, newSendRequestQueue);

    cell $optimizedChannel = Channel::setSendRequestQueue(
        $initChannel,
        newSendRequestQueue
    );

    return test::set::equal(
        $expectedChannel,
        $optimizedChannel
    );
}

(int, slice) Serde::Channel::setExecutePOOO(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    cell newExecutePOOO = _getRandomCode(120);

    cell $expectedChannel = $initChannel
        .cl::set(Channel::executePOOO, newExecutePOOO);

    cell $optimizedChannel = Channel::setExecutePOOO(
        $initChannel,
        newExecutePOOO
    );

    return test::set::equal(
        $expectedChannel,
        $optimizedChannel
    );
}

(int, slice) Serde::Channel::setExecutionQueue(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    cell newExecutionQueue = _getRandomCode(127);

    cell $expectedChannel = $initChannel
        .cl::set(Channel::executionQueue, newExecutionQueue);

    cell $optimizedChannel = Channel::setExecutionQueue(
        $initChannel,
        newExecutionQueue
    );  

    return test::set::equal(
        $expectedChannel,
        $optimizedChannel
    );
}

(int, slice) Serde::Channel::setSendRequestQueueAndLastSendRequestId(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    int newLastSendRequestId = 124;
    cell newSendRequestQueue = _getRandomCode(125);

    cell $expectedChannel = $initChannel
        .cl::set(Channel::lastSendRequestId, newLastSendRequestId)
        .cl::set(Channel::sendRequestQueue, newSendRequestQueue);

    cell $optimizedChannel = Channel::setSendRequestQueueAndLastSendRequestId(
        $initChannel,
        newLastSendRequestId,
        newSendRequestQueue
    );

    return test::set::equal(
        $expectedChannel,
        $optimizedChannel
    );
}

(int, slice) Serde::Channel::setOutboundNonceAndZroBalance(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    int newOutboundNonce = 124;
    int newZroBalance = 125;

    cell $expectedChannel = $initChannel
        .cl::set(Channel::outboundNonce, newOutboundNonce)
        .cl::set(Channel::zroBalance, newZroBalance);

    cell $optimizedChannel = Channel::setOutboundNonceAndZroBalance(
        $initChannel,
        newOutboundNonce,
        newZroBalance
    );

    return test::set::equal(
        $expectedChannel,
        $optimizedChannel
    );
}

(int, slice) Serde::Channel::setCommitPOOOAndExecutionQueue(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    cell newCommitPOOO = _getRandomCode(126);
    cell newExecutionQueue = _getRandomCode(127);

    cell $expectedChannel = $initChannel
        .cl::set(Channel::commitPOOO, newCommitPOOO)
        .cl::set(Channel::executionQueue, newExecutionQueue);

    cell $optimizedChannel = Channel::setCommitPOOOAndExecutionQueue(
        $initChannel,
        newCommitPOOO,
        newExecutionQueue
    );

    return test::set::equal(
        $expectedChannel,
        $optimizedChannel
    );
}

(int, slice) Serde::Channel::setPath(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    cell newPath = MOCK_RECEIVE_PATH();

    cell $expectedChannel = $initChannel
        .cl::set(Channel::path, newPath);

    cell $optimizedChannel = Channel::setPath(
        $initChannel,
        newPath
    );

    return test::set::equal(
        $expectedChannel,
        $optimizedChannel
    );
}

(int, slice) Serde::Channel::sanitize(cell $unused) impure {
    cell $initChannel = Channel::New(CONTROLLER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    return test::build::equal(
        $initChannel,
        Channel::sanitize(_dupWithGarbage($initChannel))
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([Serde::Channel::getBaseStorage, "Serde::Channel::getBaseStorage"])
        .tpush([Serde::Channel::getPath, "Serde::Channel::getPath"])
        .tpush([Serde::Channel::getEndpointAddress, "Serde::Channel::getEndpointAddress"])
        .tpush([Serde::Channel::getCommitPOOO, "Serde::Channel::getCommitPOOO"])
        .tpush([Serde::Channel::getExecutePOOO, "Serde::Channel::getExecutePOOO"])
        .tpush([Serde::Channel::getExecutionQueue, "Serde::Channel::getExecutionQueue"])
        .tpush([Serde::Channel::getZroBalance, "Serde::Channel::getZroBalance"])
        .tpush([Serde::Channel::getCommitPacketInformation, "Serde::Channel::getCommitPacketInformation"])
        .tpush([Serde::Channel::getExecutePOOOAndExecuionQueueAndPath, "Serde::Channel::getExecutePOOOAndExecuionQueueAndPath"])
        .tpush([Serde::Channel::getSendInformation, "Serde::Channel::getSendInformation"])
        .tpush([Serde::Channel::getSendCallbackInformation, "Serde::Channel::getSendCallbackInformation"])
        .tpush([Serde::Channel::getLzReceiveLockInformation, "Serde::Channel::getLzReceiveLockInformation"])

        .tpush([Serde::Channel::setSendRequestQueue, "Serde::Channel::setSendRequestQueue"])
        .tpush([Serde::Channel::setExecutePOOO, "Serde::Channel::setExecutePOOO"])
        .tpush([Serde::Channel::setExecutionQueue, "Serde::Channel::setExecutionQueue"])

        .tpush([Serde::Channel::setSendRequestQueueAndLastSendRequestId, "Serde::Channel::setSendRequestQueueAndLastSendRequestId"])
        .tpush([Serde::Channel::setOutboundNonceAndZroBalance, "Serde::Channel::setOutboundNonceAndZroBalance"])
        .tpush([Serde::Channel::setCommitPOOOAndExecutionQueue, "Serde::Channel::setCommitPOOOAndExecutionQueue"])
        .tpush([Serde::Channel::setPath, "Serde::Channel::setPath"])
        .tpush([Serde::Channel::sanitize, "Serde::Channel::sanitize"])
    ;
}
