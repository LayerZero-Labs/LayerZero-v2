#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "channelReceiveUtils.fc";
#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../classes/lz/Packet.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../interfaces.fc";
#include "../../msglibs/interface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/constants.fc";
#include "../../../funC++/dataStructures/DeterministicInsertionCircularQueue.fc";
#include "../../../funC++/dataStructures/PipelinedOutOfOrder.fc";
#include "../../../funC++/stdlib.fc";
#include "../../../funC++/stringlib.fc";
#include "../../../funC++/utils.fc";
#include "../../../../tests/consts.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../classes/lz/Packet.fc";
#include "../../../classes/lz/Path.fc";
#include "../../../classes/msgdata/ChannelNonceInfo.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/LzReceivePrepare.fc";
#include "../../../classes/msgdata/MdAddress.fc";
#include "../../../classes/msgdata/MdObj.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Channel::nilify"; }

cell createContractStorage() impure {
    setContractStorage(
        Channel::New(
            getCaller(),
            MOCK_SEND_PATH(),
            ENDPOINT_ADDRESS
        )
    );
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(cl::nullObject());
    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(false));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

;; ---------------------- nilify ----------------------------

(int, slice) nilify::success::uncommittedNonce(cell $storage) impure {
    int incomingNonce = NONCE;

    cell $packetId = md::PacketId::New(
        MOCK_RECEIVE_PATH(),
        incomingNonce
    );

    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO).POOO::set(incomingNonce);

    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        incomingNonce
    );

    return test::handler::shouldPass(
        nilify,
        $packetId,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_NILIFIED,
                lz::Packet::New(
                    MOCK_RECEIVE_PATH(),
                    empty_cell(),
                    incomingNonce
                )
            ),
            _newAction<call>(
                SRC_OAPP,
                Layerzero::OP::NILIFY_CALLBACK,
                md::MdObj::New(
                    $packetId,
                    getInitialStorage()
                )
            )
        ]),
        $storage
            .cl::set(Channel::commitPOOO, $commitPOOO)
            .cl::set(Channel::executionQueue, executionQueue),
        txnContext
    );
}

(int, slice) nilify::success::committedNonce(cell $storage) impure {
    int incomingNonce = 1;

    commitNonce(incomingNonce);

    cell $packetId = md::PacketId::New(
        MOCK_RECEIVE_PATH(),
        incomingNonce
    );

    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        getContractStorage().cl::get<cellRef>(Channel::executionQueue),
        incomingNonce
    );

    return test::handler::shouldPass(
        nilify,
        $packetId,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_NILIFIED,
                lz::Packet::New(
                    MOCK_RECEIVE_PATH(),
                    MOCK_MESSAGE(),
                    incomingNonce
                )
            ),
            _newAction<call>(
                SRC_OAPP,
                Layerzero::OP::NILIFY_CALLBACK,
                md::MdObj::New($packetId, getInitialStorage())
            )
        ]),
        getContractStorage().cl::set(Channel::executionQueue, executionQueue),
        txnContext
    );
}

(int, slice) nilify::success::idempotent(cell $storage) impure {
    int incomingNonce = NONCE;

    cell $packetId = md::PacketId::New(
        MOCK_RECEIVE_PATH(),
        incomingNonce
    );

    cell $packetToNilify =  MOCK_RECEIVE_PACKET_WITH_NONCE(incomingNonce)
        .cl::set(lz::Packet::message, empty_cell());


    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO).POOO::set(incomingNonce);

    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        incomingNonce
    );


    tuple expectedActions = unsafeTuple([
        0,
        _newAction<event>(
            Channel::event::PACKET_NILIFIED,
            $packetToNilify
        ),
        _newAction<call>(
            SRC_OAPP,
            Layerzero::OP::NILIFY_CALLBACK,
            md::MdObj::New($packetId, getInitialStorage())
        )
    ]);

    cell $expectedStorage = $storage
        .cl::set(Channel::commitPOOO, $commitPOOO)
        .cl::set(Channel::executionQueue, executionQueue);

    (int result1, slice reason1) = test::handler::shouldPass(
        nilify,
        $packetId,
        expectedActions,
        $expectedStorage,
        txnContext
    );
    (int result2, slice reason2) = test::handler::shouldPass(
        nilify,
        $packetId,
        expectedActions,
        $expectedStorage,
        txnContext
    );

    if ((result1 == TEST_SUCCESS) & (result1 == result2) & equal_slice_bits(reason1, reason2)) {
        return (TEST_SUCCESS, "");
    } else {
        return (TEST_FAILED, "nilify is not idempotent");
    }
}

(int, slice) nilify::success::recommit(cell $storage) impure {
    int firstUncommittedNonce = 1;

    cell $packetId = md::PacketId::New(
        MOCK_RECEIVE_PATH(),
        firstUncommittedNonce
    );

    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO).POOO::set(firstUncommittedNonce);

    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        firstUncommittedNonce
    );

    tuple expectedEvents = unsafeTuple([
        0,
        _newAction<event>(
            Channel::event::PACKET_NILIFIED,
            MOCK_RECEIVE_PACKET_WITH_NONCE(firstUncommittedNonce)
                .cl::set(lz::Packet::message, empty_cell())
        ),
        _newAction<call>(
            SRC_OAPP,
            Layerzero::OP::NILIFY_CALLBACK,
            md::MdObj::New($packetId, getInitialStorage())
        )
    ]);

    cell $nilifyExpectedStorage = $storage
        .cl::set(Channel::commitPOOO, $commitPOOO)
        .cl::set(Channel::executionQueue, executionQueue);

    (int nilifyResult, slice nilifyReason) = test::handler::shouldPass(
        nilify,
        $packetId,
        expectedEvents,
        $nilifyExpectedStorage,
        txnContext
    );

    if ((nilifyResult != TEST_SUCCESS)) {
        return (nilifyResult, nilifyReason);
    }

    ;; commit the first uncommitted nonce
    setEpConfigOApp(MOCK_RESOLVED_EP_CONFIG(true));
    $storage = getContractStorage();

    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(firstUncommittedNonce);

    ;; Create mock input
    cell $mdExtended = md::ExtendedMd::New(
        $packet,
        MOCK_SML_RECEIVE_EP_CONFIG(),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; setup the expected state
    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO);
    cell executionQueue = DeterministicInsertionCircularQueue::set(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        firstUncommittedNonce,
        $packet,
        ExecutionQueue::committed
    );

    cell $commitExpectedStorage = $storage
        .cl::set(Channel::commitPOOO, POOO::set($commitPOOO, firstUncommittedNonce))
        .cl::set(Channel::executionQueue, executionQueue)
    ;

    return test::handler::shouldPass(
        channelCommitPacket,
        $mdExtended,
        unsafeTuple([
            0,
            _newAction<event>(
                Channel::event::PACKET_COMMITTED,
                $packet
            ),
            _newAction<call>(
                RECEIVE_MSGLIB_CONNECTION_ADDRESS,
                MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
                md::ChannelNonceInfo::New(
                    firstUncommittedNonce,
                    $commitExpectedStorage.cl::get<objRef>(Channel::executePOOO).cl::get<uint64>(POOO::nextEmpty)
                )
            )
        ]),
        $commitExpectedStorage,
        txnContext
    );
}

(int, slice) nilify::success::unblockChannel(cell $storage) impure {
    int nilifiedNonce = 1;
    int committedNonce = 2;
    cell $packet = MOCK_RECEIVE_PACKET_WITH_NONCE(committedNonce);
    commitNonce(committedNonce);
    $storage = getContractStorage();

    cell $packetId = md::PacketId::New(MOCK_RECEIVE_PATH(), nilifiedNonce);

    cell $commitPOOO = $storage.cl::get<objRef>(Channel::commitPOOO).POOO::set(nilifiedNonce);

    cell executionQueue = DeterministicInsertionCircularQueue::delete(
        $storage.cl::get<cellRef>(Channel::executionQueue),
        nilifiedNonce
    );

    tuple expectedActions = unsafeTuple([
        0,
        _newAction<event>(
            Channel::event::PACKET_NILIFIED,
            lz::Packet::New(
                MOCK_RECEIVE_PATH(),
                empty_cell(),
                nilifiedNonce
            )
        ),
        _newAction<call>(
            SRC_OAPP,
            Layerzero::OP::NILIFY_CALLBACK,
            md::MdObj::New($packetId, getInitialStorage())
        )
    ]);

    cell $nilifyExpectedStorage = $storage
        .cl::set(Channel::commitPOOO, $commitPOOO)
        .cl::set(Channel::executionQueue, executionQueue);

    (int nilifyResult, slice nilifyReason) = test::handler::shouldPass(
        nilify,
        $packetId,
        expectedActions,
        $nilifyExpectedStorage,
        txnContext
    );

    if ((nilifyResult != TEST_SUCCESS)) {
        return (nilifyResult, nilifyReason);
    }

    return test::handler::shouldPass(
        lzReceiveLock,
        md::Nonce::New(committedNonce),
        unsafeTuple([
            0,
            _newAction<call>(
                $storage
                    .cl::get<objRef>(Channel::path)
                    .cl::get<address>(lz::Path::srcOApp),
                Layerzero::OP::LZ_RECEIVE_EXECUTE,
                md::MdObj::New(
                    $packet,
                    getInitialStorage()
                )
            )
        ]),
        getContractStorage().cl::set(
            Channel::executionQueue,
            DeterministicInsertionCircularQueue::set(
                getContractStorage().cl::get<cellRef>(Channel::executionQueue),
                committedNonce,
                $packet,
                ExecutionQueue::executing
            )
        ),
        txnContext
    );
}

(int, slice) nilify::revert::nonceAlreadyExecuted(cell $storage) impure {
    int incomingNonce = 1;
    commitNonce(incomingNonce);
    lockNonce(incomingNonce);
    executeNonce(incomingNonce);

    cell $packetId = md::PacketId::New(MOCK_RECEIVE_PATH(), incomingNonce);

    return test::handler::shouldFail(
        nilify,
        $packetId,
        Channel::ERROR::notCommittable
    );
}

(int, slice) nilify::revert::nonceExecuting(cell $storage) impure {
    int incomingNonce = 1;
    commitNonce(incomingNonce);
    lockNonce(incomingNonce);

    cell $packetId = md::PacketId::New(MOCK_RECEIVE_PATH(), incomingNonce);

    return test::handler::shouldFail(
        nilify,
        $packetId,
        Channel::ERROR::notCommittable
    );
}

(int, slice) nilify::revert::nonceTooBig(cell $storage) impure {
    ;; try to nilify a nonce beyond the capacity of the queue
    cell $packetId = md::PacketId::New(MOCK_RECEIVE_PATH(), MAX_CELL_BITS + 1);

    return test::handler::shouldFail(
        nilify,
        $packetId,
        Channel::ERROR::notCommittable
    );
}

(int, slice) nilify::revert::invalidNonce(cell $storage) impure {
    cell $packetId = md::PacketId::New(MOCK_RECEIVE_PATH(), 0);

    return test::handler::shouldFail(
        nilify,
        $packetId,
        Channel::ERROR::invalidNonce
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([initializeTestStorage, "initializeTestStorage"])
            ;; -- nilify
            .tpush([nilify::success::uncommittedNonce, "nilify::success::uncommittedNonce"])
            .tpush([nilify::success::committedNonce, "nilify::success::committedNonce"])
            .tpush([nilify::success::idempotent, "nilify::success::idempotent"])
            .tpush([nilify::success::recommit, "nilify::success::recommit"])
            .tpush([nilify::success::unblockChannel, "nilify::success::unblockChannel"])
            .tpush([nilify::revert::nonceAlreadyExecuted, "nilify::revert::nonceAlreadyExecuted"])
            .tpush([nilify::revert::nonceExecuting, "nilify::revert::nonceExecuting"])
            .tpush([nilify::revert::nonceTooBig, "nilify::revert::nonceTooBig"])
            .tpush([nilify::revert::invalidNonce, "nilify::revert::invalidNonce"])
    );
}