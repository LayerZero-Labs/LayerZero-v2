#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../funC++/baseInterface.fc";
#include "../../../funC++/classlib.fc";
#include "../../../funC++/txnContext.fc";
#include "../../endpoint/storage.fc";
#include "../../../funC++/constants.fc";
#include "../../../../tests/consts.fc";
#include "../../../classes/msgdata/MdEid.fc";
#include "../../../classes/msgdata/SetAddress.fc";
#include "../../../funC++/testutils.fc";


;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "controller"; }

cell createContractStorage() impure {
    setContractStorage(
        Controller::New(
            getCaller(),
            SRC_EID,
            MOCK_ENDPOINT_CODE(),
            MOCK_CHANNEL_CODE()
        )
    );

    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(md::InitEndpoint::New(MOCK_CHANNEL_CODE()));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) _verifyEventSender::success::endpoint(cell $storage) impure {
    cell $endpointStorage = Endpoint::New(SRC_EID, DST_EID, getContractAddress());

    setContractStorage(
        $storage.cl::set(
            Controller::endpointCode,
            MOCK_ENDPOINT_CODE()
        )
    );

    return test::shouldBeTrue(
        _verifyEventSender(
            computeContractAddress($endpointStorage, MOCK_ENDPOINT_CODE()),
            $endpointStorage
        )
    );
}

(int, slice) _verifyEventSender::success::channel(cell $storage) impure {
    cell $channelStorage = Channel::New(getContractAddress(), MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    setContractStorage(
        $storage.cl::set(
            Controller::channelCode,
            MOCK_CHANNEL_CODE()
        )
    );

    return test::shouldBeTrue(
        _verifyEventSender(
            computeContractAddress($channelStorage, MOCK_CHANNEL_CODE()),
            $channelStorage
        )
    );
}

(int, slice) _verifyEventSender::success::garbageEndpoint(cell $storage) impure {
    cell $invalidStorage = Endpoint::New(SRC_EID, DST_EID, getContractAddress());
    $invalidStorage = _dupWithGarbage($invalidStorage);

    setContractStorage(
        $storage.cl::set(
            Controller::endpointCode,
            MOCK_ENDPOINT_CODE()
        )
    );

    try {
        _verifyEventSender(
            computeContractAddress($invalidStorage, MOCK_ENDPOINT_CODE()),
            $invalidStorage
        );
        return (TEST_FAILED, "Should have thrown");
    } catch (x, n) {
        return (TEST_SUCCESS, "");
    }
}

(int, slice) _verifyEventSender::success::garbageChannel(cell $storage) impure {
    cell $invalidStorage = Channel::New(getContractAddress(), MOCK_SEND_PATH(), ENDPOINT_ADDRESS);
    $invalidStorage = _dupWithGarbage($invalidStorage);

    setContractStorage(
        $storage.cl::set(
            Controller::channelCode,
            MOCK_CHANNEL_CODE()
        )
    );

    try {
        _verifyEventSender(
            computeContractAddress($invalidStorage, MOCK_CHANNEL_CODE()),
            $invalidStorage
        );
        return (TEST_FAILED, "Should have thrown");
    } catch (x, n) {
        return (TEST_SUCCESS, "");
    }
}

(int, slice) _verifyEventSender::success::invalidStorageType(cell $storage) impure {
    cell $invalidStorage = MOCK_SEND_PACKET();

    setContractStorage(
        $storage.cl::set(
            Controller::channelCode,
            MOCK_CHANNEL_CODE()
        )
    );

    try {
        _verifyEventSender(
            computeContractAddress($invalidStorage, MOCK_CHANNEL_CODE()),
            $invalidStorage
        );
        return (TEST_FAILED, "Should have thrown");
    } catch (x, n) {
        return (TEST_SUCCESS, "");
    }
}

(int, slice) _verifyEventSender::success::invalidController(cell $storage) impure {
    cell $invalidStorage = Channel::New(ATTACKER_ADDRESS, MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    setContractStorage(
        $storage.cl::set(
            Controller::channelCode,
            MOCK_CHANNEL_CODE()
        )
    );

    try {
        _verifyEventSender(
            computeContractAddress($invalidStorage, MOCK_CHANNEL_CODE()),
            $invalidStorage
        );
        return (TEST_FAILED, "Should have thrown");
    } catch (x, n) {
        return (TEST_SUCCESS, "");
    }
}

(int, slice) _verifyEventSender::success::invalidCaller(cell $storage) impure {
    cell $validStorage = Channel::New(getContractAddress(), MOCK_SEND_PATH(), ENDPOINT_ADDRESS);

    setContractStorage(
        $storage.cl::set(
            Controller::channelCode,
            MOCK_CHANNEL_CODE()
        )
    );

    try {
        _verifyEventSender(ATTACKER_ADDRESS, $validStorage);
        return (TEST_FAILED, "Should have thrown");
    } catch (x, n) {
        return (TEST_SUCCESS, "");
    }
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
        ;; -- verify event sender
            .tpush([_verifyEventSender::success::endpoint, "_verifyEventSender::success::endpoint"])
            .tpush([_verifyEventSender::success::channel, "_verifyEventSender::success::channel"])
            .tpush([_verifyEventSender::success::garbageEndpoint, "_verifyEventSender::success::garbageEndpoint"])
            .tpush([_verifyEventSender::success::garbageChannel, "_verifyEventSender::success::garbageChannel"])
            .tpush([_verifyEventSender::success::invalidStorageType, "_verifyEventSender::success::invalidStorageType"])
            .tpush([_verifyEventSender::success::invalidController, "_verifyEventSender::success::invalidController"])
            .tpush([_verifyEventSender::success::invalidCaller, "_verifyEventSender::success::invalidCaller"])
    );
}