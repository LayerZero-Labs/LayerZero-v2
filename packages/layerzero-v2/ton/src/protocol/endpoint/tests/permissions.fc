#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../../funC++/classlib.fc";
#include "../../interfaces.fc";
#include "../../../classes/msgdata/AddMsglib.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Endpoint::permissions"; }

cell createContractStorage() impure {
    setContractStorage(Endpoint::New(
        SRC_EID,
        DST_EID,
        getCaller()
    ));

    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(md::InitEndpoint::New(MOCK_CHANNEL_CODE()));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) checkPermissions::endpointSend::success::basic(cell $storage) impure {
    spoofCaller(SRC_OAPP);
    return test::permissions::shouldPass(
        Endpoint::OP::ENDPOINT_SEND,
        MOCK_LZ_SEND()
    );
}

(int, slice) checkPermissions::endpointSend::revert::notOApp(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Endpoint::OP::ENDPOINT_SEND,
        MOCK_LZ_SEND()
    );
}

(int, slice) checkPermissions::endpointCommitPacket::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(Endpoint::OP::ENDPOINT_COMMIT_PACKET, cl::nullObject());
}

(int, slice) checkPermissions::setEpConfigOApp::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(Endpoint::OP::SET_EP_CONFIG_OAPP, cl::nullObject());
}

(int, slice) checkPermissions::setEpConfigOApp::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(Endpoint::OP::SET_EP_CONFIG_OAPP, cl::nullObject());
}

(int, slice) checkPermissions::setEpConfigDefaults::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(Endpoint::OP::SET_EP_CONFIG_DEFAULTS, cl::nullObject());
}

(int, slice) checkPermissions::setEpConfigDefaults::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(Endpoint::OP::SET_EP_CONFIG_DEFAULTS, cl::nullObject());
}

(int, slice) checkPermissions::addMsglib::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(Endpoint::OP::ADD_MSGLIB, cl::nullObject());
}

(int, slice) checkPermissions::addMsglib::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(Endpoint::OP::ADD_MSGLIB, cl::nullObject());
}

(int, slice) checkPermissions::getMsglibInfoCallback::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    cell $addMsglibMd = md::AddMsglib::New(MSGLIB_MANAGER_ADDRESS, DST_EID);
    addMsglib($addMsglibMd);
    spoofCaller(MSGLIB_MANAGER_ADDRESS);
    return test::permissions::shouldPass(Endpoint::OP::GET_MSGLIB_INFO_CALLBACK, cl::nullObject());
}

(int, slice) checkPermissions::getMsglibInfoCallback::revert::unauthorizedMsglib(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldFail(Endpoint::OP::GET_MSGLIB_INFO_CALLBACK, cl::nullObject());
}

(int, slice) checkPermissions::default::revert::invalidOpCode(cell $storage) impure {
    ;; this is a generic opcode that we should NOT allow
    return test::permissions::shouldFail(OP::RANDOM, cl::nullObject());
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            ;; -- endpoint send
            .tpush([checkPermissions::endpointSend::success::basic, "checkPermissions::endpointSend::success::basic"])
            .tpush([checkPermissions::endpointSend::revert::notOApp, "checkPermissions::endpointSend::revert::notOApp"])
            ;; -- endpoint commit packet
            .tpush([checkPermissions::endpointCommitPacket::success::basic, "checkPermissions::endpointCommitPacket::success::basic"])
            ;; -- set ep config oapp
            .tpush([checkPermissions::setEpConfigOApp::success::basic, "checkPermissions::setEpConfigOApp::success::basic"])
            .tpush([checkPermissions::setEpConfigOApp::revert::notOwner, "checkPermissions::setEpConfigOApp::revert::notOwner"])
            ;; -- set ep config defaults
            .tpush([checkPermissions::setEpConfigDefaults::success::basic, "checkPermissions::setEpConfigDefaults::success::basic"])
            .tpush([checkPermissions::setEpConfigDefaults::revert::notOwner, "ccheckPermissions::setEpConfigDefaults::revert::notOwner"])
            ;; -- add msglib
            .tpush([checkPermissions::addMsglib::success::basic, "checkPermissions::addMsglib::success::basic"])
            .tpush([checkPermissions::addMsglib::revert::notOwner, "checkPermissions::addMsglib::revert::notOwner"])
            ;; -- get msglib info callback
            .tpush([checkPermissions::getMsglibInfoCallback::success::basic, "checkPermissions::getMsglibInfoCallback::success::basic"])
            .tpush([checkPermissions::getMsglibInfoCallback::revert::unauthorizedMsglib, "checkPermissions::getMsglibInfoCallback::revert::unauthorizedMsglib"])
            ;; -- invalid opcode
            .tpush([checkPermissions::default::revert::invalidOpCode, "checkPermissions::default::revert::invalidOpCode"])
    );
}