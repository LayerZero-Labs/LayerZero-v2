#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../classes/lz/Path.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/AddMsglib.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../core/baseStorage.fc";
#include "../../interfaces.fc";
#include "../../../funC++/classlib.fc";

#include "../../../funC++/constants.fc";
#include "../../../../tests/consts.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/MsglibInfo.fc";
#include "../../../classes/msgdata/InitEndpoint.fc";
#include "../../../classes/msgdata/InitSmlConnection.fc";
#include "../../../classes/msgdata/MdAddress.fc";
#include "../../../classes/msgdata/SetEpConfig.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "endpoint"; }

cell createContractStorage() impure {
    setContractStorage(Endpoint::New(SRC_EID, DST_EID, getCaller()));

    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(md::InitEndpoint::New(MOCK_CHANNEL_CODE()));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================HELPER FUNCTIONS===============================

int getMsglibConnectionAddress(int msglibManagerAddress, cell $path) inline {
    return computeContractAddress(
        mockMsglibConnectionStorage(msglibManagerAddress, $path),
        MOCK_MSGLIB_CONNECTION_CODE()
    );
}

() _addMsglib(int msglibManagerAddress) impure {
    cell $addMsglib = md::AddMsglib::New(msglibManagerAddress, DST_EID);
    addMsglib($addMsglib);
}

() _addAndResolveMockMsglib(int msglibManagerAddress, int msglibAddress) impure {
    int originalCaller = getCaller();
    spoofCaller(msglibManagerAddress);
    _addMsglib(msglibManagerAddress);
    getMsglibInfoCallback(
        lz::MsglibInfo::New(
            msglibAddress,
            MOCK_MSGLIB_CONNECTION_CODE(),
            mockMsglibConnectionStorage(msglibManagerAddress, MOCK_SEND_PATH())
        )
    );
    spoofCaller(originalCaller);
}

;;; ===============================TESTS=========================================

(int, slice) resolveEpConfig::success::basic(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    cell $setEpConfigMd = MOCK_SET_EP_CONFIG_MD(true);
    cell $epConfigResolved = CALCULATED_MOCK_RESOLVED_EP_CONFIG(true);
    cell $path = MOCK_SEND_PATH();

    ;; converts the manager addresses to the actual lib addresses
    return test::shouldBeTrue(
        compareObjectFields(
            $epConfigResolved,
            _getEpConfigFromManagerAddresses($setEpConfigMd, $path)
        ) == -1
    );
}

(int, slice) endpointSend::success::basic(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    ;; Set default lib values
    cell $setEpConfigMd = MOCK_SET_EP_CONFIG_MD(true);
    setEpConfigDefaults($setEpConfigMd);

    cell $lzSend = MOCK_LZ_SEND();
    int channelAddress = _getChannelAddress($storage, MOCK_SEND_PATH());

    return test::handler::shouldPass(
        endpointSend,
        $lzSend,
        unsafeTuple([
            0,
            _newAction<call>(
                channelAddress,
                Channel::OP::CHANNEL_SEND,
                md::MdObj::New(
                    $lzSend,
                    lz::SendEpConfig::New(
                        SEND_MSGLIB_MANAGER_ADDRESS,
                        SEND_MSGLIB_ADDRESS,
                        getMsglibConnectionAddress(SEND_MSGLIB_MANAGER_ADDRESS, MOCK_SEND_PATH())
                    )
                )
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) endpointSend::success::noDefaultSendMsglib(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    cell $lzSend = MOCK_LZ_SEND();
    int channelAddress = _getChannelAddress($storage, MOCK_SEND_PATH());

    return test::handler::shouldPass(
        endpointSend,
        $lzSend,
        unsafeTuple([
            0,
            _newAction<call>(
                channelAddress,
                Channel::OP::CHANNEL_SEND,
                md::MdObj::New($lzSend, lz::SendEpConfig::New(NULLADDRESS, NULLADDRESS, NULLADDRESS))
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) endpointCommitPacket::success::basic(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    ;; Set default lib values
    cell $setEpConfigMd = MOCK_SET_EP_CONFIG_MD(true);
    setEpConfigDefaults($setEpConfigMd);

    ;; the endpoint address in this context is 'self'
    int endpointAddress = getContractAddress();

    ;; generate the channel address
    cell channelCode = $storage.cl::get<cellRef>(Endpoint::channelCode);
    cell $channelStorage = Channel::New(
        $storage.cl::get<objRef>(Endpoint::baseStorage).cl::get<address>(BaseStorage::owner),
        MOCK_SEND_PATH(),
        endpointAddress
    );

    int channelAddress = computeContractAddress($channelStorage, channelCode);

    ;; generate the extended md
    cell $packet = MOCK_RECEIVE_PACKET();

    ;; extract the default config from storage,
    ;; as its appended inside endpointCommitPacket to the output extende md
    cell $expectedMdExtended = md::ExtendedMd::New(
        $packet,
        lz::ReceiveEpConfig::New(
            getMsglibConnectionAddress(RECEIVE_MSGLIB_MANAGER_ADDRESS, MOCK_SEND_PATH()),
            getMsglibConnectionAddress(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, MOCK_SEND_PATH()),
            MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
        ),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; spoof as the connection
    spoofCaller(RECEIVE_MSGLIB_CONNECTION_ADDRESS);

    return test::handler::shouldPass(
        endpointCommitPacket,
        $packet,
        unsafeTuple([
            0,
            _newAction<call>(
                channelAddress,
                Channel::OP::CHANNEL_COMMIT_PACKET,
                $expectedMdExtended
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) endpointCommitPacket::success::noDefaultReceiveLib(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    ;; Set default lib values
    cell $setEpConfigMd = MOCK_SET_EP_CONFIG_MD(true)
        .cl::set(md::SetEpConfig::receiveMsglibManager, NULLADDRESS);
    setEpConfigDefaults($setEpConfigMd);

    ;; the endpoint address in this context is 'self'
    int endpointAddress = getContractAddress();

    ;; generate the channel address
    cell channelCode = $storage.cl::get<cellRef>(Endpoint::channelCode);
    cell $channelStorage = Channel::New(
        $storage.cl::get<objRef>(Endpoint::baseStorage).cl::get<address>(BaseStorage::owner),
        MOCK_SEND_PATH(),
        endpointAddress
    );
    int channelAddress = computeContractAddress($channelStorage, channelCode);

    ;; generate the extended md
    cell $packet = MOCK_RECEIVE_PACKET();

    ;; extract the default config from storage,
    ;; as its appended inside endpointCommitPacket to the output extende md
    cell $expectedMdExtended = md::ExtendedMd::New(
        $packet,
        lz::ReceiveEpConfig::New(
            NULLADDRESS,
            getMsglibConnectionAddress(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, MOCK_SEND_PATH()),
            MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
        ),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; spoof as the connection
    spoofCaller(RECEIVE_MSGLIB_CONNECTION_ADDRESS);

    return test::handler::shouldPass(
        endpointCommitPacket,
        $packet,
        unsafeTuple([
            0,
            _newAction<call>(
                channelAddress,
                Channel::OP::CHANNEL_COMMIT_PACKET,
                $expectedMdExtended
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) endpointCommitPacket::success::noDefaultTimeoutReceiveMsglib(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    ;; Set default lib values
    cell $setEpConfigMd = MOCK_SET_EP_CONFIG_MD(true)
        .cl::set(md::SetEpConfig::timeoutReceiveMsglibManager, NULLADDRESS)
        .cl::set(md::SetEpConfig::timeoutReceiveMsglibExpiry, 0);
    setEpConfigDefaults($setEpConfigMd);

    ;; the endpoint address in this context is 'self'
    int endpointAddress = getContractAddress();

    ;; generate the channel address
    cell channelCode = $storage.cl::get<cellRef>(Endpoint::channelCode);
    cell $channelStorage = Channel::New(
        $storage.cl::get<objRef>(Endpoint::baseStorage).cl::get<address>(BaseStorage::owner),
        MOCK_SEND_PATH(),
        endpointAddress
    );
    int channelAddress = computeContractAddress($channelStorage, channelCode);

    ;; generate the extended md
    cell $packet = MOCK_RECEIVE_PACKET();

    ;; extract the default config from storage,
    ;; as its appended inside endpointCommitPacket to the output extende md
    cell $expectedMdExtended = md::ExtendedMd::New(
        $packet,
        lz::ReceiveEpConfig::New(
            getMsglibConnectionAddress(RECEIVE_MSGLIB_MANAGER_ADDRESS, MOCK_SEND_PATH()),
            NULLADDRESS,
            0
        ),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; spoof as the connection
    spoofCaller(RECEIVE_MSGLIB_CONNECTION_ADDRESS);

    return test::handler::shouldPass(
        endpointCommitPacket,
        $packet,
        unsafeTuple([
            0,
            _newAction<call>(
                channelAddress,
                Channel::OP::CHANNEL_COMMIT_PACKET,
                $expectedMdExtended
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) endpointCommitPacket::success::noDefaultReceiveConfig(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    ;; the endpoint address in this context is 'self'
    int endpointAddress = getContractAddress();

    ;; generate the channel address
    cell channelCode = $storage.cl::get<cellRef>(Endpoint::channelCode);
    cell $channelStorage = Channel::New(
        $storage.cl::get<objRef>(Endpoint::baseStorage).cl::get<address>(BaseStorage::owner),
        MOCK_SEND_PATH(),
        endpointAddress
    );
    int channelAddress = computeContractAddress($channelStorage, channelCode);

    ;; generate the extended md
    cell $packet = MOCK_RECEIVE_PACKET();

    ;; extract the default config from storage,
    ;; as its appended inside endpointCommitPacket to the output extende md
    cell $expectedMdExtended = md::ExtendedMd::New(
        $packet,
        lz::ReceiveEpConfig::New(NULLADDRESS, NULLADDRESS, 0),
        RECEIVE_MSGLIB_CONNECTION_ADDRESS
    );

    ;; spoof as the connection
    spoofCaller(RECEIVE_MSGLIB_CONNECTION_ADDRESS);

    return test::handler::shouldPass(
        endpointCommitPacket,
        $packet,
        unsafeTuple([
            0,
            _newAction<call>(
                channelAddress,
                Channel::OP::CHANNEL_COMMIT_PACKET,
                $expectedMdExtended
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) endpointCommitPacket::revert::wrongPath(cell $storage) impure {
    return test::handler::shouldFail(
        endpointCommitPacket,
        MOCK_SEND_PACKET(), ;; wrong packet, the path is backwards
        Endpoint::ERROR::wrongPath
    );
}

;; The first time this is called, it should set the manager to null, and then trigger a call to the manager
(int, slice) addMsglib::success::basic(cell $storage) impure {
    cell $addMsglibMd = md::AddMsglib::New(MSGLIB_MANAGER_ADDRESS, DST_EID);

    ;; prepare the expected storage mutation
    cell $expectedStorage = $storage
        .cl::nestedDict256::setRef(Endpoint::msglibs, MSGLIB_MANAGER_ADDRESS, cl::nullObject())
        .cl::set(Endpoint::numMsglibs, $storage.cl::get<uint8>(Endpoint::numMsglibs) + 1);

    return test::handler::shouldPass(
        addMsglib,
        $addMsglibMd,
        unsafeTuple([
            0,
            _newAction<call>(
                MSGLIB_MANAGER_ADDRESS,
                MsglibManager::OP::GET_MSGLIB_INFO,
                $addMsglibMd
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) addMsglib::revert::numMsglibsExceeded(cell $storage) impure {
    ;; set the num msgs libs to max
    setContractStorage($storage.cl::set(Endpoint::numMsglibs, MAX_MSGLIBS));

    return test::handler::shouldFail(
        addMsglib, 
        md::AddMsglib::New(MSGLIB_MANAGER_ADDRESS, DST_EID), 
        Endpoint::ERROR::numMsglibsExceeded
    );
}

(int, slice) addMsglib::success::idempotent(cell $storage) impure {
    (int result1, slice slice1) = addMsglib::success::basic($storage);
    (int result2, slice slice2) = addMsglib::success::basic($storage);
    (int result3, slice slice3) = addMsglib::success::basic($storage);

    if ((result1 == TEST_SUCCESS) & (result1 == result2) & (result2 == result3)
        & equal_slice_bits(slice1, slice2) & equal_slice_bits(slice2, slice3)) {
        return (TEST_SUCCESS, "");
    } else {
        return (TEST_FAILED, "addMsglib is not idempotent");
    }
}

(int, slice) addMsglib::success::alreadyGotten(cell $storage) impure {
    _addAndResolveMockMsglib(MSGLIB_MANAGER_ADDRESS, MSGLIB_ADDRESS);

    return test::handler::shouldPass(
        addMsglib,
        md::AddMsglib::New(MSGLIB_MANAGER_ADDRESS, DST_EID),
        emptyActions(),
        getContractStorage(),
        txnContext
    );
}

(int, slice) getMsglibInfoCallback::success::basic(cell $storage) impure {
    _addMsglib(MSGLIB_MANAGER_ADDRESS);

    ;; spoof as the msglib manager address
    spoofCaller(MSGLIB_MANAGER_ADDRESS);

    cell $msglibInfo = lz::MsglibInfo::New(
        MSGLIB_ADDRESS,
        MOCK_MSGLIB_CONNECTION_CODE(),
        mockMsglibConnectionStorage(
            MSGLIB_MANAGER_ADDRESS,
            MOCK_SEND_PATH()
        )
    );

    ;; after the callback, it should set the state to the correct mapping
    cell $expectedStorage = getContractStorage().cl::nestedDict256::setRef(
        Endpoint::msglibs,
        MSGLIB_MANAGER_ADDRESS,
        $msglibInfo
    );

    return test::handler::shouldPass(
        getMsglibInfoCallback,
        $msglibInfo,
        emptyActions(),
        $expectedStorage,
        txnContext
    );
}

(int, slice) getMsglibInfoCallback::revert::msglibInfoExists(cell $storage) impure {
    _addAndResolveMockMsglib(MSGLIB_MANAGER_ADDRESS, MSGLIB_ADDRESS);

    ;; spoof caller as the msglib manager
    spoofCaller(MSGLIB_MANAGER_ADDRESS);

    cell $msglibInfo = lz::MsglibInfo::New(
        MSGLIB_ADDRESS,
        MOCK_MSGLIB_CONNECTION_CODE(),
        mockMsglibConnectionStorage(
            MSGLIB_MANAGER_ADDRESS,
            MOCK_SEND_PATH()
        )
    );

    return test::handler::shouldFail(
        getMsglibInfoCallback,
        $msglibInfo,
        Endpoint::ERROR::msglibInfoExists
    );
}

(int, slice) setEpConfigOApp::success::basic(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);
    cell $path = MOCK_SEND_PATH();
    cell $mdSetEpConfig = MOCK_SET_EP_CONFIG_MD(true);
    cell $resolvedEpConfigOApp = _getEpConfigFromManagerAddresses($mdSetEpConfig, $path);

    return test::handler::shouldPass(
        setEpConfigOApp,
        md::MdObj::New($mdSetEpConfig, $path),
        unsafeTuple([
            0,
            _newAction<call>(
                _getChannelAddress($storage, $path),
                Channel::OP::SET_EP_CONFIG_OAPP,
                $resolvedEpConfigOApp
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) setEpConfigOApp::revert::sendMsglibUnauthorized(cell $storage) impure {
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    return test::handler::shouldFail(
        setEpConfigOApp,
        md::MdObj::New(MOCK_SET_EP_CONFIG_MD(true), MOCK_SEND_PATH()),
        Endpoint::ERROR::unauthorizedMsglib
    );
}

(int, slice) setEpConfigOApp::revert::receiveMsglibUnauthorized(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    return test::handler::shouldFail(
        setEpConfigOApp,
        md::MdObj::New(MOCK_SET_EP_CONFIG_MD(true), MOCK_SEND_PATH()),
        Endpoint::ERROR::unauthorizedMsglib
    );
}

(int, slice) setEpConfigOApp::revert::timeoutReceiveMsglibUnauthorized(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);

    return test::handler::shouldFail(
        setEpConfigOApp,
        md::MdObj::New(MOCK_SET_EP_CONFIG_MD(true), MOCK_SEND_PATH()),
        Endpoint::ERROR::unauthorizedMsglib
    );
}

(int, slice) setEpConfigOApp::revert::sendMsglibUnresolved(cell $storage) impure {
    _addMsglib(SEND_MSGLIB_MANAGER_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    return test::handler::shouldFail(
        setEpConfigOApp,
        md::MdObj::New(MOCK_SET_EP_CONFIG_MD(true), MOCK_SEND_PATH()),
        Endpoint::ERROR::unresolvedMsglib
    );
}

(int, slice) setEpConfigOApp::revert::receiveMsglibUnresolved(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    return test::handler::shouldFail(
        setEpConfigOApp,
        md::MdObj::New(MOCK_SET_EP_CONFIG_MD(true), MOCK_SEND_PATH()),
        Endpoint::ERROR::unresolvedMsglib
    );
}

(int, slice) setEpConfigOApp::revert::timeoutReceiveMsglibUnresolved(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS, SEND_MSGLIB_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS, RECEIVE_MSGLIB_ADDRESS);
    _addMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS);
    
    return test::handler::shouldFail(
        setEpConfigOApp,
        md::MdObj::New(MOCK_SET_EP_CONFIG_MD(true), MOCK_SEND_PATH()),
        Endpoint::ERROR::unresolvedMsglib
    );
}

(int, slice) setEpConfigOApp::revert::sameTimeoutAndReceive(cell $storage) impure {
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, TIMEOUT_RECEIVE_MSGLIB_ADDRESS);

    cell $setEpConfigMd = md::SetEpConfig::New(
        false, 
        NULLADDRESS, 
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, 
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, 
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );
    
    return test::handler::shouldFail(
        setEpConfigOApp,
        md::MdObj::New($setEpConfigMd, MOCK_SEND_PATH()),
        Endpoint::ERROR::sameTimeoutAndReceive
    );
}

(int, slice) initialize::success::basic(cell $storage) impure {
    setContractStorage(createContractStorage());
    forceAuthenticate(BASE_STORAGE_INDEX);
    cell $storage = getContractStorage();
    cell $initEndpointMd = md::InitEndpoint::New(MOCK_CHANNEL_CODE());
    cell $expectedStorage = $storage
        .cl::set(
            BASE_STORAGE_INDEX,
            $storage.cl::get<objRef>(BASE_STORAGE_INDEX)
                .cl::set(BaseStorage::initialized, true)
        )
        .cl::set(Endpoint::channelCode, MOCK_CHANNEL_CODE())
        .cl::set(
            Endpoint::channelStorageInit,
            Channel::New(
                getOwner(),
                lz::Path::endpointPath(
                    $storage.cl::get<uint32>(Endpoint::eid),
                    $storage.cl::get<uint32>(Endpoint::dstEid)
                ),
                getContractAddress()
            )
        );
    return test::handler::shouldPass(
        initialize,
        $initEndpointMd,
        emptyActions(),
        $expectedStorage,
        txnContext
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            ;; -- resolve Ep Config
            .tpush([resolveEpConfig::success::basic, "resolveEpConfig::success::basic"])
            ;; -- endpointSend
            .tpush([endpointSend::success::basic, "send::endpointSend::basic"])
            .tpush([endpointSend::success::noDefaultSendMsglib, "send::endpointSend::noDefaults"])
            ;; -- endpointCommitPacket
            .tpush([endpointCommitPacket::success::basic, "endpointCommitPacket::success::basic"])
            .tpush([endpointCommitPacket::success::noDefaultReceiveLib, "endpointCommitPacket::success::noDefaultReceiveLib"])
            .tpush([endpointCommitPacket::success::noDefaultTimeoutReceiveMsglib, "endpointCommitPacket::success::noDefaultTimeoutReceiveMsglib"])
            .tpush([endpointCommitPacket::success::noDefaultReceiveConfig, "endpointCommitPacket::success::noDefaultReceiveConfig"])
            .tpush([endpointCommitPacket::revert::wrongPath, "endpointCommitPacket::revert::wrongPath"])
            ;; -- add msglib
            .tpush([addMsglib::success::basic, "addMsglib::success::basic"])
            .tpush([addMsglib::revert::numMsglibsExceeded, "addMsglib::revert::numMsglibsExceeded"])
            .tpush([addMsglib::success::idempotent, "addMsglib::success::idempotent"])
            .tpush([addMsglib::success::alreadyGotten, "addMsglib::success::alreadyGotten"])
            ;; -- get msglib info callback
            .tpush([getMsglibInfoCallback::success::basic, "getMsglibInfoCallback::success::basic"])
            .tpush([getMsglibInfoCallback::revert::msglibInfoExists, "getMsglibInfoCallback::revert::msglibInfoExists"])
            ;; -- set ep config
            .tpush([setEpConfigOApp::success::basic, "setEpConfigOApp::success::basic"])
            .tpush([setEpConfigOApp::revert::sendMsglibUnauthorized, "setEpConfigOApp::revert::sendMsglibUnauthorized"])
            .tpush([setEpConfigOApp::revert::receiveMsglibUnauthorized, "setEpConfigOApp::revert::receiveMsglibUnauthorized"])
            .tpush([setEpConfigOApp::revert::timeoutReceiveMsglibUnauthorized, "setEpConfigOApp::revert::timeoutReceiveMsglibUnauthorized"])
            .tpush([setEpConfigOApp::revert::sendMsglibUnresolved, "setEpConfigOApp::revert::sendMsglibUnresolved"])
            .tpush([setEpConfigOApp::revert::receiveMsglibUnresolved, "setEpConfigOApp::revert::receiveMsglibUnresolved"])
            .tpush([setEpConfigOApp::revert::timeoutReceiveMsglibUnresolved, "setEpConfigOApp::revert::timeoutReceiveMsglibUnresolved"])
            .tpush([setEpConfigOApp::revert::sameTimeoutAndReceive, "setEpConfigOApp::revert::sameTimeoutAndReceive"])
            ;; -- initialize
            .tpush([initialize::success::basic, "initialize::success::basic"])
    );
}