#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../tests/baseContractTest.fc";
#include "../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../tests/testMain.fc";
#include "../../../classes/lz/Path.fc";
#include "../../../classes/lz/EpConfig.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/ExtendedMd.fc";
#include "../../../classes/msgdata/AddMsglib.fc";
#include "../../../funC++/handlerCore.fc";
#include "../../core/baseStorage.fc";
#include "../../interfaces.fc";

#include "../../../funC++/constants.fc";
#include "../../../../tests/consts.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/MsglibInfo.fc";
#include "../../../classes/msgdata/InitEndpoint.fc";
#include "../../../classes/msgdata/InitSmlConnection.fc";
#include "../../../classes/msgdata/MdAddress.fc";
#include "../../../classes/msgdata/SetEpConfig.fc";
#include "../../msglibs/simpleMsglib/smlConnection/storage.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "endpoint"; }

cell createContractStorage() impure {
    setContractStorage(Endpoint::New(SRC_EID, DST_EID, getCaller()));

    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(md::InitEndpoint::New(MOCK_CHANNEL_CODE()));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================HELPER FUNCTIONS===============================

int getSmlConnectionAddress(int smlManagerAddress, cell $path) inline {
    return computeContractAddress(
        mockMsglibConnectionStorage(smlManagerAddress, $path),
        MOCK_MSGLIB_CONNECTION_CODE()
    );
}

() _addMsglib(int msglibManagerAddress) impure {
    cell $addMsglib = md::AddMsglib::New(msglibManagerAddress, DST_EID);
    addMsglib($addMsglib);
}

() _addAndResolveMockMsglib(int msglibManagerAddress) impure {
    int originalCaller = getCaller();
    spoofCaller(msglibManagerAddress);
    _addMsglib(msglibManagerAddress);
    getMsglibInfoCallback(
        lz::MsglibInfo::New(
            msglibManagerAddress,
            MOCK_MSGLIB_CONNECTION_CODE(),
            mockMsglibConnectionStorage(msglibManagerAddress, MOCK_SEND_PATH())
        )
    );
    spoofCaller(originalCaller);
}

;;; ===============================TESTS=========================================

(int, slice) setEpConfigDefaults::success::basic(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS);
    $storage = getContractStorage();

    cell $setEpConfigMd = MOCK_SET_EP_CONFIG_MD(true);
    cell $path = MOCK_SEND_PATH();

    cell $expectedStorage = $storage
        .cl::set(Endpoint::defaultSendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
        .cl::set(
            Endpoint::defaultSendLibInfo,
            lz::MsglibInfo::New(
                SEND_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(SEND_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(
            Endpoint::defaultReceiveLibInfo,
            lz::MsglibInfo::New(
                RECEIVE_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(RECEIVE_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(
            Endpoint::defaultTimeoutReceiveLibInfo,
            lz::MsglibInfo::New(
                TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(Endpoint::defaultExpiry, MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY())
    ;

    return test::handler::shouldPass(
        setEpConfigDefaults,
        $setEpConfigMd,
        unsafeTuple([
            0,
            _newAction<event>(
                Endpoint::event::EP_CONFIG_DEFAULTS_SET,
                $setEpConfigMd
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

;; these next 3 tests mean that we're setting the other two.
(int, slice) setEpConfigDefaults::success::noDefaultSendMsglib(cell $storage) impure {
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS);

    cell $path = MOCK_SEND_PATH();
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        RECEIVE_MSGLIB_MANAGER_ADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );

    cell $expectedStorage = getContractStorage()
        .cl::set(
            Endpoint::defaultReceiveLibInfo,
            lz::MsglibInfo::New(
                RECEIVE_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(RECEIVE_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(
            Endpoint::defaultTimeoutReceiveLibInfo,
            lz::MsglibInfo::New(
                TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(Endpoint::defaultExpiry, MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY())
    ;

    return test::handler::shouldPass(
        setEpConfigDefaults,
        $setEpConfigMd,
        unsafeTuple([
            0,
            _newAction<event>(
                Endpoint::event::EP_CONFIG_DEFAULTS_SET,
                $setEpConfigMd
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigDefaults::success::noDefaultReceiveMsglib(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS);
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS);

    cell $path = MOCK_SEND_PATH();
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        SEND_MSGLIB_MANAGER_ADDRESS,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );

    cell $expectedStorage = getContractStorage()
        .cl::set(Endpoint::defaultSendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
        .cl::set(
            Endpoint::defaultSendLibInfo,
            lz::MsglibInfo::New(
                SEND_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(SEND_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(
            Endpoint::defaultTimeoutReceiveLibInfo,
            lz::MsglibInfo::New(
                TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(Endpoint::defaultExpiry, MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY())
    ;

    return test::handler::shouldPass(
        setEpConfigDefaults,
        $setEpConfigMd,
        unsafeTuple([
            0,
            _newAction<event>(
                Endpoint::event::EP_CONFIG_DEFAULTS_SET,
                $setEpConfigMd
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigDefaults::success::noDefaultTimeoutReceiveMsglib(cell $storage) impure {
    _addAndResolveMockMsglib(SEND_MSGLIB_MANAGER_ADDRESS);
    _addAndResolveMockMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS);

    cell $path = MOCK_SEND_PATH();
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        SEND_MSGLIB_MANAGER_ADDRESS,
        RECEIVE_MSGLIB_MANAGER_ADDRESS,
        NULLADDRESS,
        0
    );

    cell $expectedStorage = getContractStorage()
        .cl::set(Endpoint::defaultSendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
        .cl::set(
            Endpoint::defaultSendLibInfo,
            lz::MsglibInfo::New(
                SEND_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(SEND_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(
            Endpoint::defaultReceiveLibInfo,
            lz::MsglibInfo::New(
                RECEIVE_MSGLIB_MANAGER_ADDRESS,
                MOCK_MSGLIB_CONNECTION_CODE(),
                mockMsglibConnectionStorage(RECEIVE_MSGLIB_MANAGER_ADDRESS, $path)
            )
        )
        .cl::set(Endpoint::defaultExpiry, 0)
    ;

    return test::handler::shouldPass(
        setEpConfigDefaults,
        $setEpConfigMd,
        unsafeTuple([
            0,
            _newAction<event>(
                Endpoint::event::EP_CONFIG_DEFAULTS_SET,
                $setEpConfigMd
            )
        ]),
        $expectedStorage,
        txnContext
    );
}

(int, slice) setEpConfigDefaults::revert::sendMsglibUnauthorized(cell $storage) impure {
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        SEND_MSGLIB_MANAGER_ADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        0
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::unauthorizedMsglib
    );
}

(int, slice) setEpConfigDefaults::revert::receiveMsglibUnauthorized(cell $storage) impure {
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        RECEIVE_MSGLIB_MANAGER_ADDRESS,
        NULLADDRESS,
        0
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::unauthorizedMsglib
    );
}

(int, slice) setEpConfigDefaults::revert::timeoutReceiveMsglibUnauthorized(cell $storage) impure {
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
        0
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::unauthorizedMsglib
    );
}

(int, slice) setEpConfigDefaults::revert::sendMsglibUnresolved(cell $storage) impure {
    _addMsglib(SEND_MSGLIB_MANAGER_ADDRESS);
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        SEND_MSGLIB_MANAGER_ADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        0
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::unresolvedMsglib
    );
}

(int, slice) setEpConfigDefaults::revert::receiveMsglibUnresolved(cell $storage) impure {
    _addMsglib(RECEIVE_MSGLIB_MANAGER_ADDRESS);
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        RECEIVE_MSGLIB_MANAGER_ADDRESS,
        NULLADDRESS,
        0
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::unresolvedMsglib
    );
}

(int, slice) setEpConfigDefaults::revert::timeoutReceiveMsglibUnresolved(cell $storage) impure {
    _addMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS);
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::unresolvedMsglib
    );
}

(int, slice) setEpConfigDefaults::revert::timeoutNullAndExpiryNonZero(cell $storage) impure {
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        NULLADDRESS,
        NULLADDRESS,
        1
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::invalidExpiry
    );
}

(int, slice) setEpConfigDefaults::revert::timeoutReceiveMsglibInvalidExpiry(cell $storage) impure {
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS);
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
        now() - 10
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::invalidExpiry
    );
}

(int, slice) setEpConfigDefaults::revert::sameTimeoutAndReceive(cell $storage) impure {
    _addAndResolveMockMsglib(TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS);
    cell $setEpConfigMd = md::SetEpConfig::New(
        false,
        NULLADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
        TIMEOUT_RECEIVE_MSGLIB_MANAGER_ADDRESS,
        MOCK_TIMEOUT_RECEIVE_LIB_EXPIRY()
    );

    return test::handler::shouldFail(
        setEpConfigDefaults,
        $setEpConfigMd,
        Endpoint::ERROR::sameTimeoutAndReceive
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            ;; -- set ep config defaults
            .tpush([setEpConfigDefaults::success::basic, "setEpConfigDefaults::success::basic"])
            .tpush([setEpConfigDefaults::success::noDefaultSendMsglib, "setEpConfigDefaults::success::noDefaultSendMsglib"])
            .tpush([setEpConfigDefaults::success::noDefaultReceiveMsglib, "setEpConfigDefaults::success::noDefaultReceiveMsglib"])
            .tpush([setEpConfigDefaults::success::noDefaultTimeoutReceiveMsglib, "setEpConfigDefaults::success::noDefaultTimeoutReceiveMsglib"])
            .tpush([setEpConfigDefaults::revert::sendMsglibUnauthorized, "setEpConfigDefaults::revert::sendMsglibUnauthorized"])
            .tpush([setEpConfigDefaults::revert::receiveMsglibUnauthorized, "setEpConfigDefaults::revert::receiveMsglibUnauthorized"])
            .tpush([setEpConfigDefaults::revert::timeoutReceiveMsglibUnauthorized, "setEpConfigDefaults::revert::timeoutReceiveMsglibUnauthorized"])
            .tpush([setEpConfigDefaults::revert::sendMsglibUnresolved, "setEpConfigDefaults::revert::sendMsglibUnresolved"])
            .tpush([setEpConfigDefaults::revert::receiveMsglibUnresolved, "setEpConfigDefaults::revert::receiveMsglibUnresolved"])
            .tpush([setEpConfigDefaults::revert::timeoutReceiveMsglibUnresolved, "setEpConfigDefaults::revert::timeoutReceiveMsglibUnresolved"])
            .tpush([setEpConfigDefaults::revert::timeoutNullAndExpiryNonZero, "setEpConfigDefaults::revert::timeoutNullAndExpiryNonZero"])
            .tpush([setEpConfigDefaults::revert::timeoutReceiveMsglibInvalidExpiry, "setEpConfigDefaults::revert::timeoutReceiveMsglibInvalidExpiry"])
            .tpush([setEpConfigDefaults::revert::sameTimeoutAndReceive, "setEpConfigDefaults::revert::sameTimeoutAndReceive"])
    );
}