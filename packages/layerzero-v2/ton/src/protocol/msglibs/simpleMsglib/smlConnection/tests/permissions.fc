#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../../../tests/baseContractTest.fc";
#include "../../../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../../../tests/mocks.fc";
#include "../../../../interfaces.fc";
#include "../../../interface.fc";
#include "../../../../../../tests/consts.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "SmlConnection::permissions"; }

cell createContractStorage() impure {
    setContractStorage(SmlConnection::New(getCaller(), MOCK_SEND_PATH()));
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(md::InitSmlConnection::New(CHANNEL_ADDRESS));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) checkPermissions::msglibConnectionSend::success::basic(cell $storage) impure {
    spoofCaller(CHANNEL_ADDRESS);
    return test::permissions::shouldPass(MsglibConnection::OP::MSGLIB_CONNECTION_SEND,
        MOCK_LZ_SEND()
    );
}

(int, slice) checkPermissions::msglibConnectionSend::revert::onlyChannel(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldFail(MsglibConnection::OP::MSGLIB_CONNECTION_SEND,
        MOCK_LZ_SEND()
    );
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([checkPermissions::msglibConnectionSend::success::basic, "checkPermissions::msglibConnectionSend::success::basic"])
            .tpush([checkPermissions::msglibConnectionSend::revert::onlyChannel, "checkPermissions::msglibConnectionSend::revert::onlyChannel"])
    );
}
