#include "../handler.fc";
#include "../interface.fc";
#include "../../../interface.fc";

#include "../../../../../../tests/baseContractTest.fc";
#include "../../../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../../../tests/mocks.fc";
#include "../../../../../classes/msgdata/ExtendedMd.fc";
#include "../../../../interfaces.fc";
#include "../../../../../funC++/handlerCore.fc";
#include "../../../../../funC++/classlib.fc";
#include "../../../../../../tests/consts.fc";
#include "../../../../../classes/msgdata/LzSend.fc";
#include "../../../../../classes/msgdata/InitSmlConnection.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "SmlConnection"; }

cell createContractStorage() impure {
    setContractStorage(SmlConnection::New(getCaller(), MOCK_SEND_PATH()));
    return getContractStorage();
}

() _createInitializedStorage() impure {
    initialize(md::InitSmlConnection::New(CHANNEL_ADDRESS));
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================HELPER FUNCTIONS===============================

(int, slice) msglibConnectionSend::success::basic(cell $storage) impure {
    cell $lzSend = MOCK_LZ_SEND();

    return test::handler::shouldPass(
        msglibConnectionSend,
        $lzSend,
        unsafeTuple([
            0,
            _newAction<call>(
                getOwner(), ;; SML manager == SML (eid "shard")
                SmlManager::OP::SML_MANAGER_SEND,
                md::ExtendedMd::New(
                    $lzSend,
                    getInitialStorage(),
                    $storage.cl::get<address>(SmlConnection::channelAddress)
                )
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

;; (int, slice) msglibCommitPacketCallback::success::basic(cell $storage) impure {
;;     return test::handler::shouldPass(
;;         msglibCommitPacketCallback,
;;         MOCK_PACKET(),
;;         emptyActions(),
;;         $storage,
;;         txnContext
;;     );
;; }

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([msglibConnectionSend::success::basic, "msglibConnectionSend::success::basic"])
    );
}