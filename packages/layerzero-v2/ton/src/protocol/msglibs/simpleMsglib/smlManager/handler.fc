;;; =============================================================
;; Simple Message Library is intended for testing purposes ONLY
;; It is purposely left unsecure on nearly every interface
;;; =============================================================

#include "../../../core/abstract/protocolHandler.fc";
#include "../../../../funC++/baseInterface.fc";

#include "../../BytesEncoder.fc";

#include "../../../../classes/msgdata/ExtendedMd.fc";
#include "../../../../classes/msgdata/MdObj.fc";
#include "../../../../classes/msgdata/MdAddress.fc";
#include "../../../../classes/msgdata/AddMsglib.fc";
#include "../../../../classes/msgdata/MsglibSendCallback.fc";
#include "../../../../classes/msgdata/SetSmlManagerConfig.fc";
#include "../../../../classes/msgdata/Deploy.fc";
#include "../../../../classes/msgdata/InitSmlConnection.fc";
#include "../../../../classes/msgdata/LzSend.fc";
#include "../../../../classes/lz/Path.fc";
#include "../../../../classes/lz/MsglibInfo.fc";
#include "../../../../classes/lz/Packet.fc";
#include "../../../../classes/lz/SmlJobAssigned.fc";

#include "../../../endpoint/storage.fc";
#include "../../../channel/storage.fc";
#include "../smlConnection/interface.fc";
#include "../smlConnection/storage.fc";

#include "../../interface.fc";
#include "../../../interfaces.fc";
#include "interface.fc";
#include "storage.fc";
#include "../../../channel/interface.fc";

;;; ====================HELPER FUNCTIONS====================

;; Derive the endpoint address for a given destination EID
int _deriveEndpointAddress(int dstEid) impure inline method_id {
    cell $storage = getContractStorage();
    cell $endpointStorage = Endpoint::New(
        $storage.cl::get<uint32>(SmlManager::eid),
        dstEid,
        $storage.cl::get<address>(SmlManager::controllerAddress)
    );
    return computeContractAddress(
        $endpointStorage,
        $storage.cl::get<cellRef>(SmlManager::endpointCode)
    );
}

;; Derive the channel address for a given path
int _deriveChannelAddress(cell $path) impure inline method_id {
    cell $storage = getContractStorage();
    int dstEid = $path.cl::get<uint32>(lz::Path::dstEid);
    int endpointAddress = _deriveEndpointAddress(dstEid);
    return computeContractAddress(
        Channel::New(
            $storage.cl::get<address>(SmlManager::controllerAddress),
            $path,
            endpointAddress
        ),
        $storage.cl::get<cellRef>(SmlManager::channelCode)
    );
}

int _deriveConnectionAddress(cell $path) impure inline method_id {
    return computeContractAddress(
        SmlConnection::New(
            getContractAddress(),
            $path
        ),
        getContractStorage().cl::get<cellRef>(SmlManager::smlConnectionCode)
    );
}

() assertConnection(cell $extendedMd) impure inline {
    throw_unless(
        SmlManager::ERROR::onlyConnection,
        getCaller() == computeContractAddress(
            $extendedMd.cl::get<objRef>(md::ExtendedMd::obj),
            getContractStorage().cl::get<cellRef>(SmlManager::smlConnectionCode)
        )
    );
}

;;; ================INTERFACE FUNCTIONS=====================

(cell, tuple) _initialize(cell $md) impure inline {
    return preamble();
}

int _getEventSink() inline {
    return getContractAddress();
}

;;; ================PERMISSION FUNCTIONS=====================

() _checkPermissions(int op, cell $md) impure inline {
    if (
        (op == SmlManager::OP::SET_MSGLIB_CONFIG)
        | (op == SmlManager::OP::SML_MANAGER_COMMIT_PACKET)
        | (op == MsglibManager::OP::GET_MSGLIB_INFO)
        | (op == MsglibManager::OP::DEPLOY_CONNECTION)
        | (op == SmlManager::OP::SML_MANAGER_COMMIT_PACKET_CALLBACK)
    ) {
        ;; op code
        ;; open and public calls
        return ();
    } elseif (
        (op == SmlManager::OP::SML_MANAGER_SEND)
    ) {
        ;; assert connection
        assertConnection($md);
    } else {
        ;; we must put a check for all opcodes to make sure we don't
        ;; mistakenly miss an opp code's permissions
        throw(BaseInterface::ERROR::invalidOpcode);
    }
}

;;; ==========================HANDLERS=====================================

;; @in permissionless
;; @in_md ExtendedMd { SetSmlManagerConfig, unused, unused }
tuple setMsglibConfig(cell $mdExtended) impure inline method_id {
    ;; permissionless setting of fees, this is NOT safe for a real msglib
    (cell $storage, tuple actions) = preamble();

    ;; These other extended values arent used,
    ;; but it makes the config call adhere to the expected interface
    ;; Pull the config md from the extendedMd that gets passed
    cell $SmlManagerConfig = $mdExtended.cl::get<objRef>(md::ExtendedMd::md);

    setContractStorage(
        $storage
            .cl::set(
                SmlManager::nativeFee,
                $SmlManagerConfig.cl::get<coins>(md::SetSmlManagerConfig::nativeFee)
            )
            .cl::set(
                SmlManager::zroFee,
                $SmlManagerConfig.cl::get<coins>(md::SetSmlManagerConfig::zroFee)
            )
    );

    actions~pushAction<event>(SmlManager::event::SET_MSGLIB_CONFIG, $SmlManagerConfig);

    return actions;
}

;; @in channel/handler.fc/send
;; @in_md LzSend
;; @out channel/handler.fc/msglibSendCallback
;; @out_md msglibSendCallback
tuple smlManagerSend(cell $extendedMd) impure inline method_id {
    (cell $storage, tuple actions) = preamble();

    cell $lzSend = $extendedMd.cl::get<objRef>(md::ExtendedMd::md);

    int nativeFee = $storage.cl::get<coins>(SmlManager::nativeFee);

    ;;--------------------------
    ;; PACKET V1 CODEC
    ;;--------------------------
    cell $packetObj = $lzSend.cl::get<objRef>(md::LzSend::packet);
    cell packet = BytesEncoder::build<PacketV1>($packetObj)
        .BytesEncoder::serialize();

    cell $msglibSendCallbackMd = md::MsglibSendCallback::New(
        nativeFee,
        $storage.cl::get<coins>(SmlManager::zroFee),
        $lzSend,
        packet, ;; encoded Packet
        serializePayees(
            unsafeTuple([
                [getContractAddress(), nativeFee]
            ])
        ),
        PacketV1::nonceOffsetBytes,
        PacketV1::nonceBytes,
        PacketV1::guidOffsetBytes,
        PacketV1::guidBytes,
        lz::SmlJobAssigned::New(nativeFee),
        Channel::NO_ERROR
    );

    actions~pushAction<call>(
        $extendedMd.cl::get<address>(md::ExtendedMd::forwardingAddress), ;; channelAddress
        Channel::OP::MSGLIB_SEND_CALLBACK,
        $msglibSendCallbackMd
    );

    return actions;
}

;; @in permissionless external message
;; @in_md msglibCommitPacket { packet_header: [objRef], message: [cellRef] }
;; @out_success => smlConnection/handler.fc/msglibConnectionCommitPacket
;; @out_md_success => ExtendedMd(ep_commit_verification, _, _)
;; @out_failure => caller (refund, failure)
tuple smlManagerCommitPacket(cell $mdAddress) impure inline method_id {
    (_, tuple actions) = preamble();

    cell $packet = $mdAddress.cl::get<objRef>(md::MdAddress::md);

    int connectionAddress = _deriveConnectionAddress(
        lz::Path::reverse($packet.cl::get<objRef>(lz::Packet::path))
    );

    ;; @notice In Simple Msglib,
    ;; we purposely do not verify that the message hash is the same as the stored message hash
    actions~pushAction<call>(
        connectionAddress,
        SmlConnection::OP::SML_CONNECTION_COMMIT_PACKET,
        $mdAddress
    );

    return actions;
}

;; @in endpoint/handler.fc/getMsgLib
;; @in_md AddMsglib
;; @out endpoint/handler.fc/getMsglibInfoCallback
;; @out_md MsglibInfo
tuple getMsgLibInfo(cell $addMsglibMd) impure inline method_id {
    (cell $storage, tuple actions) = preamble();

    cell $msglibInfo = lz::MsglibInfo::New(
        getContractAddress(), ;; for SML, the manager IS the msglib
        $storage.cl::get<cellRef>(SmlManager::smlConnectionCode),
        SmlConnection::New(
            getContractAddress(), ;; connection is owned by the manager
            lz::Path::endpointPath(
                $storage.cl::get<uint32>(SmlManager::eid),
                $addMsglibMd.cl::get<uint32>(md::AddMsglib::dstEid)
            )
        )
    );

    actions~pushAction<call>(
        getCaller(),
        Endpoint::OP::GET_MSGLIB_INFO_CALLBACK,
        $msglibInfo
    );

    return actions;
}

;; @in smlConnection
;; @in_md MdObj { Packet, SmlConnection (initial storage) }
tuple smlManagerCommitPacketCallback(cell $mdObj) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    return actions;
}

;; @in permissionless (OApp)
;; @in_md Deploy
tuple deployConnection(cell $deploy) impure inline method_id {
    (cell $storage, tuple actions) = preamble();

    cell $path = lz::Path::New(
        $storage.cl::get<uint32>(SmlManager::eid),
        getCaller(),
        $deploy.cl::get<uint32>(md::Deploy::dstEid),
        $deploy.cl::get<address>(md::Deploy::dstOApp)
    );

    actions~pushAction<deployAndCall>(
        $storage.cl::get<cellRef>(SmlManager::smlConnectionCode),
        SmlConnection::New(getContractAddress(), $path),
        $deploy.cl::get<coins>(md::Deploy::initialDeposit),
        BaseInterface::OP::INITIALIZE,
        md::InitSmlConnection::New(_deriveChannelAddress($path)),
        0
    );
    return actions;
}