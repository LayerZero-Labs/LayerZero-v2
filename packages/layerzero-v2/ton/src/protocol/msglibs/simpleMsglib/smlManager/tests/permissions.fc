#include "../handler.fc";
#include "../interface.fc";

#include "../../../../../../tests/baseContractTest.fc";
#include "../../../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../interfaces.fc";
#include "../../../interface.fc";
#include "../../../../../../tests/consts.fc";
#include "../../../../../../tests/mocks.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "SmlManager::permissions"; }

cell createContractStorage() impure {
    setContractStorage(
        SmlManager::New(
            getCaller(),
            SRC_EID,
            SML_MANAGER_VERSION,
            CONTROLLER_ADDRESS,
            MOCK_ENDPOINT_CODE(),
            MOCK_CHANNEL_CODE(),
            MOCK_MSGLIB_CONNECTION_CODE()
        )
    );
    return getContractStorage();
}

;; do not need to implement
() _createInitializedStorage() impure {
    initialize(cl::nullObject());
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) checkPermissions::setMsglibConfig::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        SmlManager::OP::SET_MSGLIB_CONFIG,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::smlManagerSend::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    cell $extendedMd = md::ExtendedMd::New(
        cl::nullObject(),
        SmlConnection::New(getContractAddress(), MOCK_SEND_PATH()),
        NULLADDRESS
    );
    int connectionAddress = _deriveConnectionAddress(MOCK_SEND_PATH());
    spoofCaller(connectionAddress);
    return test::permissions::shouldPass(
        SmlManager::OP::SML_MANAGER_SEND,
        $extendedMd
    );
}

(int, slice) checkPermissions::smlManagerSend::revert::notConnection(cell $storage) impure {
    cell $extendedMd = md::ExtendedMd::New(
        cl::nullObject(),
        SmlConnection::New(getContractAddress(), MOCK_SEND_PATH()),
        NULLADDRESS
    );
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldFail(
        SmlManager::OP::SML_MANAGER_SEND,
        $extendedMd
    );
}

(int, slice) checkPermissions::smlManagerCommitPacket::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        SmlManager::OP::SML_MANAGER_COMMIT_PACKET,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::smlManagerCommitPacketCallback::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    cell $extendedMd = md::ExtendedMd::New(
        cl::nullObject(),
        SmlConnection::New(getContractAddress(), MOCK_SEND_PATH()),
        NULLADDRESS
    );
    int connectionAddress = _deriveConnectionAddress(MOCK_SEND_PATH());
    spoofCaller(connectionAddress);
    return test::permissions::shouldPass(
        SmlManager::OP::SML_MANAGER_COMMIT_PACKET_CALLBACK,
        $extendedMd
    );
}

(int, slice) checkPermissions::smlManagerCommitPacketCallback::revert::onlyConnection(cell $storage) impure {
    cell $extendedMd = md::ExtendedMd::New(
        cl::nullObject(),
        SmlConnection::New(getContractAddress(), MOCK_SEND_PATH()),
        NULLADDRESS
    );

    ;; Permissionless, can be called by anyone
    spoofCaller(ARBITRARY_ADDRESS);

    return test::permissions::shouldFail(
        SmlManager::OP::SML_MANAGER_COMMIT_PACKET_CALLBACK,
        $extendedMd
    );
}

(int, slice) checkPermissions::getMsgLibInfo::success::basic(cell $storage) impure {
    ;; Permissionless, can be called by anyone
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        MsglibManager::OP::GET_MSGLIB_INFO,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::default::revert::invalidOpCode(cell $storage) impure {
    ;; this is a generic opcode that we should NOT allow
    return test::permissions::shouldFail(OP::RANDOM, cl::nullObject());
}

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple()
            .tpush([checkPermissions::setMsglibConfig::success::basic, "checkPermissions::setMsglibConfig::success::basic"])
            .tpush([checkPermissions::smlManagerSend::success::basic, "checkPermissions::smlManagerSend::success::basic"])
            .tpush([checkPermissions::smlManagerSend::revert::notConnection, "checkPermissions::smlManagerSend::revert::notConnection"])
            .tpush([checkPermissions::smlManagerCommitPacket::success::basic, "checkPermissions::smlManagerCommitPacket::success::basic"])
            .tpush([checkPermissions::smlManagerCommitPacketCallback::success::basic, "checkPermissions::smlManagerCommitPacketCallback::success::basic"])
            ;; .tpush([checkPermissions::smlManagerCommitPacketCallback::revert::onlyConnection, "checkPermissions::smlManagerCommitPacketCallback::revert::onlyConnection"])
            .tpush([checkPermissions::getMsgLibInfo::success::basic, "checkPermissions::getMsgLibInfo::success::basic"])
            .tpush([checkPermissions::default::revert::invalidOpCode, "checkPermissions::default::revert::invalidOpCode"])
    );
}