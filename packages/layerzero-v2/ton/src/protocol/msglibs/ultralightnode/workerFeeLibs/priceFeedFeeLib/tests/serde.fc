#include "../../../../../../../tests/baseSerdeTest.fc";
#include "../../../../../../../tests/mocks.fc";
#include "../../../../../../funC++/classlib.fc";
#include "../../../../../../funC++/stdlib.fc";
#include "../../../../../../funC++/utils.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Executor Feelib Serde"; }

;;; ===============================TESTS=========================================

;; PriceFeedFeelib has 1 getter
;;                     2 multi-getter
;;                     2 setters

(int, slice) Serde::PriceFeedFeeLib::getNativePriceUsd(cell $unused) impure {
    cell $priceFeedFeelib = MOCK_DEFAULT_PRICE_FEED_STORAGE();
    return test::getData::equal(
        $priceFeedFeelib,
        PriceFeedFeelib::getNativePriceUsd,
        PriceFeedFeelib::nativePriceUsd
    );
}

(int, slice) Serde::PriceFeedFeeLib::getFirstThreeFields(cell $unused) impure {
    cell $priceFeedFeelib = MOCK_DEFAULT_PRICE_FEED_STORAGE();

    (
        int priceRatio,
        int gasPriceInUnit,
        int gasPerByte
    ) = PriceFeedFeelib::utils::getFirstThreeFields($priceFeedFeelib);

    return test::multiget::equal(
        $priceFeedFeelib,
        unsafeTuple([PriceFeedFeelib::priceRatio,
            PriceFeedFeelib::gasPriceInRemoteUnit,
            PriceFeedFeelib::gasPerByte]),
        unsafeTuple([
            priceRatio,
            gasPriceInUnit,
            gasPerByte
        ])
    );
}

(int, slice) Serde::PriceFeedFeelib::getArbitrumExtension(cell $unused) impure {
    cell $priceFeedFeeLib = MOCK_DEFAULT_PRICE_FEED_STORAGE_ARB();
    return test::getRef::equal(
        $priceFeedFeeLib,
        PriceFeedFeelib::getArbitrumExtension,
        PriceFeedFeelib::arbitrumExtension
    );
}

(int, slice) Serde::PriceFeedFeelib::getOptimismExtension(cell $unused) impure {
    cell $priceFeedFeeLib = MOCK_DEFAULT_PRICE_FEED_STORAGE_OP();
    return test::getRef::equal(
        $priceFeedFeeLib,
        PriceFeedFeelib::getOptimismExtension,
        PriceFeedFeelib::optimismExtension
    );
}

(int, slice) Serde::PriceFeedFeelib::deserializeInts(cell $unused) impure {
    cell $priceFeedFeeLib = MOCK_DEFAULT_PRICE_FEED_STORAGE();

    (
        int priceRatio,
        int gasPriceInUnit,
        int gasPerByte,
        int nativePriceUsd
    ) = PriceFeedFeelib::deserializeInts($priceFeedFeeLib);

    return test::multiget::equal(
        $priceFeedFeeLib,
        unsafeTuple([
            PriceFeedFeelib::priceRatio,
            PriceFeedFeelib::gasPriceInRemoteUnit,
            PriceFeedFeelib::gasPerByte,
            PriceFeedFeelib::nativePriceUsd
        ]),
        unsafeTuple([priceRatio, gasPriceInUnit, gasPerByte, nativePriceUsd])
    );
}

(int, slice) Serde::PriceFeedFeeLib::deserialize(cell $unused) impure {
    cell $priceFeedFeeLib = MOCK_DEFAULT_PRICE_FEED_STORAGE();
    (
        int priceRatio,
        int gasPriceInUnit,
        int gasPerByte,
        int nativePriceUsd,
        cell arbitrumExtension,
        cell optimismExtension
    ) = PriceFeedFeelib::deserialize($priceFeedFeeLib);

    return test::multiget::equal(
        $priceFeedFeeLib,
        unsafeTuple([
            PriceFeedFeelib::priceRatio,
            PriceFeedFeelib::gasPriceInRemoteUnit,
            PriceFeedFeelib::gasPerByte,
            PriceFeedFeelib::nativePriceUsd,
            PriceFeedFeelib::arbitrumExtension,
            PriceFeedFeelib::optimismExtension
        ]),
        unsafeTuple([priceRatio, gasPriceInUnit, gasPerByte, nativePriceUsd, arbitrumExtension, optimismExtension])
    );
}

(int, slice) Serde::PriceFeedFeeLib::setFirstThreeFields(cell $unused) impure {
    int priceRatio = 89;
    int gasPriceInUnit = 103;
    int gasPerByte = 201;
    cell $initPriceFeedFeelib = MOCK_DEFAULT_PRICE_FEED_STORAGE();
    cell $expectedPriceFeedFeelib = $initPriceFeedFeelib
        .cl::set(PriceFeedFeelib::priceRatio, priceRatio)
        .cl::set(PriceFeedFeelib::gasPriceInRemoteUnit, gasPriceInUnit)
        .cl::set(PriceFeedFeelib::gasPerByte, gasPerByte);
    cell $newPriceFeedFeelib = PriceFeedFeelib::setFirstThreeFields(
        $initPriceFeedFeelib,
        priceRatio,
        gasPriceInUnit,
        gasPerByte
    );

    return test::set::equal(
        $expectedPriceFeedFeelib,
        $newPriceFeedFeelib
    );
}

(int, slice) Serde::PriceFeedFeeLib::setNativePriceUsd(cell $unused) impure {
    cell $initPriceFeedFeelib = MOCK_DEFAULT_PRICE_FEED_STORAGE();

    cell $expectedPriceFeedFeelib = $initPriceFeedFeelib.cl::set(PriceFeedFeelib::nativePriceUsd, 47);
    cell $newPriceFeedFeelib = PriceFeedFeelib::setNativePriceUsd($initPriceFeedFeelib, 47);

    return test::set::equal(
        $expectedPriceFeedFeelib,
        $newPriceFeedFeelib
    );
}

(int, slice) Serde::PriceFeedFeeLib::setPricesAndOptimismExtension(cell $unused) impure {
    int priceRatio = 89;
    int gasPriceInUnit = 103;
    int gasPerByte = 201;
    cell $initPriceFeedFeelib = MOCK_DEFAULT_PRICE_FEED_STORAGE_OP();
    
    cell $newOptimismExtension = MOCK_CUSTOM_PRICE_FEED_STORAGE_OP()
        .cl::get<cellRef>(PriceFeedFeelib::optimismExtension);

    cell $expectedPriceFeedFeelib = $initPriceFeedFeelib
        .cl::set(PriceFeedFeelib::priceRatio, priceRatio)
        .cl::set(PriceFeedFeelib::gasPriceInRemoteUnit, gasPriceInUnit)
        .cl::set(PriceFeedFeelib::gasPerByte, gasPerByte)
        .cl::set(PriceFeedFeelib::optimismExtension, $newOptimismExtension);

    cell $newPriceFeedFeelib = PriceFeedFeelib::setPricesAndOptimismExtension(
        $initPriceFeedFeelib,
        priceRatio,
        gasPriceInUnit,
        gasPerByte,
        $newOptimismExtension
    );

    return test::set::equal(
        $expectedPriceFeedFeelib,
        $newPriceFeedFeelib
    );
}

(int, slice) Serde::PriceFeedFeeLib::setNativePriceUsdAndOptimismExtension(cell $unused) impure {
    int nativePriceUsd = 47;
    cell $initPriceFeedFeelib = MOCK_DEFAULT_PRICE_FEED_STORAGE_OP();
    
    cell $newOptimismExtension = MOCK_CUSTOM_PRICE_FEED_STORAGE_OP()
        .cl::get<cellRef>(PriceFeedFeelib::optimismExtension);

    cell $expectedPriceFeedFeelib = $initPriceFeedFeelib
        .cl::set(PriceFeedFeelib::nativePriceUsd, nativePriceUsd)
        .cl::set(PriceFeedFeelib::optimismExtension, $newOptimismExtension);

    cell $newPriceFeedFeelib = PriceFeedFeelib::setNativePriceUsdAndOptimismExtension(
        $initPriceFeedFeelib,
        nativePriceUsd,
        $newOptimismExtension
    );

    return test::set::equal(
        $expectedPriceFeedFeelib,
        $newPriceFeedFeelib
    );
}

(int, slice) Serde::PriceFeedFeeLib::setArbitrumExtension(cell $unused) impure {
    cell $initPriceFeedFeelib = MOCK_DEFAULT_PRICE_FEED_STORAGE_ARB();
    cell $newArbitrumExtension = MOCK_CUSTOM_PRICE_FEED_STORAGE_ARB()
        .cl::get<cellRef>(PriceFeedFeelib::arbitrumExtension);

    cell $expectedPriceFeedFeelib = $initPriceFeedFeelib
        .cl::set(PriceFeedFeelib::arbitrumExtension, $newArbitrumExtension);
    cell $newPriceFeedFeelib = PriceFeedFeelib::setArbitrumExtension($initPriceFeedFeelib, $newArbitrumExtension);
    return test::set::equal(
        $expectedPriceFeedFeelib, 
        $newPriceFeedFeelib
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([Serde::PriceFeedFeeLib::getNativePriceUsd, "Serde::PriceFeedFeeLib::getNativePriceUsd"])
        .tpush([Serde::PriceFeedFeeLib::getFirstThreeFields, "Serde::PriceFeedFeeLib::getFirstThreeFields"])
        .tpush([Serde::PriceFeedFeelib::getArbitrumExtension, "Serde::PriceFeedFeelib::getArbitrumExtension"])
        .tpush([Serde::PriceFeedFeelib::getOptimismExtension, "Serde::PriceFeedFeelib::getOptimismExtension"])
        .tpush([Serde::PriceFeedFeelib::deserializeInts, "Serde::PriceFeedFeelib::deserializeInts"])
        .tpush([Serde::PriceFeedFeeLib::deserialize, "Serde::PriceFeedFeeLib::deserialize"])
        .tpush([Serde::PriceFeedFeeLib::setFirstThreeFields, "Serde::PriceFeedFeeLib::setFirstThreeFields"])
        .tpush([Serde::PriceFeedFeeLib::setNativePriceUsd, "Serde::PriceFeedFeeLib::setNativePriceUsd"])
        .tpush([Serde::PriceFeedFeeLib::setPricesAndOptimismExtension, "Serde::PriceFeedFeeLib::setPricesAndOptimismExtension"])
        .tpush([Serde::PriceFeedFeeLib::setNativePriceUsdAndOptimismExtension, "Serde::PriceFeedFeeLib::setNativePriceUsdAndOptimismExtension"])
        .tpush([Serde::PriceFeedFeeLib::setArbitrumExtension, "Serde::PriceFeedFeeLib::setArbitrumExtension"])
    ;
}
