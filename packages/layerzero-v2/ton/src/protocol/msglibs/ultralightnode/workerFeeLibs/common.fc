#include "priceFeedFeeLib/storage.fc";

const int TON::NativeDecimalsRate = 1000000000; ;; TONcoin is 9-decimal

int _applyPremiumAndFloor(int feeInNanoTON, int multiplierBps, int floorMarginUSD, int nativePriceUSD) impure inline {
    int feeWithMultiplier = (feeInNanoTON * multiplierBps) / 10000;

    if (max(floorMarginUSD, nativePriceUSD) <= 0) {
        return feeWithMultiplier;
    }

    int feeWithMargin = ((floorMarginUSD * TON::NativeDecimalsRate) / nativePriceUSD) + feeInNanoTON;

    return max(feeWithMargin, feeWithMultiplier);
}

int _remoteToNanoton(int remoteAmount, int priceRatio) impure inline {
    return (remoteAmount * priceRatio) / PRICE_RATIO_DENOMINATOR;
}

int _applyPremiumToValue(int valueInNanoTON, int multiplierBps) impure inline {
    if (valueInNanoTON > 0) {
        return (valueInNanoTON * multiplierBps) / 10000;
    }
    return 0;
}