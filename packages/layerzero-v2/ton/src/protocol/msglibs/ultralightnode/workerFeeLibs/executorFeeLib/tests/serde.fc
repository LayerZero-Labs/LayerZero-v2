#include "../../../../../../../tests/baseSerdeTest.fc";
#include "../../../../../../../tests/mocks.fc";
#include "../../../../../../funC++/classlib.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Pricefeed Feelib Serde"; }

;;; ===============================TESTS=========================================

;; ExecutorFeeLib has 1 getter
(int, slice) Serde::ExecutorFeelib:::deserializeStorage(cell $unused) impure {
    cell $executorFeeLib = ExecutorFeelib::New(100000, 1, 2, 3, 4);
    
    (
        int lzReceiveBaseGas,
        int multiplierBps,
        int floorMarginUSD,
        int nativeCap,
        int lzComposeBaseGas
    ) = ExecutorFeelib::deserializeStorage($executorFeeLib);

    return test::multiget::equal(
        $executorFeeLib,
        unsafeTuple([
            ExecutorFeelib::lzReceiveBaseGas,
            ExecutorFeelib::multiplierBps,
            ExecutorFeelib::floorMarginUSD,
            ExecutorFeelib::nativeCap,
            ExecutorFeelib::lzComposeBaseGas
        ]),
        unsafeTuple([
            lzReceiveBaseGas,
            multiplierBps,
            floorMarginUSD,
            nativeCap,
            lzComposeBaseGas
        ])
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([Serde::ExecutorFeelib:::deserializeStorage, "Serde::ExecutorFeelib:::deserializeStorage"])
    ;
}
