#include "../../../../../funC++/classlib.fc";

const int PriceFeedFeelib::NAME = "PFFeelib"u;

const int PRICE_RATIO_DENOMINATOR = 1000 * 1000 * 1000 * 1000 * 1000 * 1000 * 100;

;; Bytecodes
const int PriceFeedFeelib::priceRatio = 0;
const int PriceFeedFeelib::gasPriceInRemoteUnit = 1;
const int PriceFeedFeelib::gasPerByte = 2;
const int PriceFeedFeelib::nativePriceUsd = 3;
const int PriceFeedFeelib::arbitrumExtension = 4;
const int PriceFeedFeelib::optimismExtension = 5;

;; @owner LayerZero admin EOA
cell PriceFeedFeelib::New(
    int priceRatio,
    int gasPriceInRemoteUnit,
    int gasPerByte,
    int nativePriceUsd,
    cell arbitrumExtension,
    cell optimismExtension
) impure method_id {
    return cl::declare(
        PriceFeedFeelib::NAME,
        unsafeTuple([
            [cl::t::coins, priceRatio],                ;; PriceFeedFeelib::priceRatio
            [cl::t::uint64, gasPriceInRemoteUnit],     ;; PriceFeedFeelib::gasPriceInRemoteUnit
            [cl::t::uint32, gasPerByte],               ;; PriceFeedFeelib::gasPerByte
            [cl::t::coins, nativePriceUsd],            ;; PriceFeedFeelib::nativePriceUsd
            [cl::t::objRef, arbitrumExtension],        ;; PriceFeedFeelib::arbitrumExtension
            [cl::t::objRef, optimismExtension]         ;; PriceFeedFeelib::optimismExtension
        ])
    );
}

const int PriceFeedFeelib::_priceRatioOffset = _HEADER_WIDTH;
const int PriceFeedFeelib::_gasPriceInRemoteUnitOffset = PriceFeedFeelib::_priceRatioOffset + 128;
const int PriceFeedFeelib::_gasPerByteOffset = PriceFeedFeelib::_gasPriceInRemoteUnitOffset + 64;
const int PriceFeedFeelib::_nativePriceUsdOffset = PriceFeedFeelib::_gasPerByteOffset + 32;


;; ============================== Object Getters =========================================

;; nativePriceUsd
int PriceFeedFeelib::getNativePriceUsd(cell $self) impure inline {
    return $self.cellPreloadCoinsAt(PriceFeedFeelib::_nativePriceUsdOffset);
}

;; ============================== Object Multi-Getters =========================================

;; (priceRatio, gasPriceInRemoteUnit, gasPerByte)
(int, int, int) PriceFeedFeelib::utils::getFirstThreeFields(cell $self) impure inline {
    ;; slice selfSlice = $self.begin_parse().skip_bits(_HEADER_WIDTH);
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadCoinsAt(PriceFeedFeelib::_priceRatioOffset),
        selfSlice.preloadUint64At(PriceFeedFeelib::_gasPriceInRemoteUnitOffset),
        selfSlice.preloadUint32At(PriceFeedFeelib::_gasPerByteOffset)
    );
}

cell PriceFeedFeelib::getArbitrumExtension(cell $self) impure inline {
    return $self.cellPreloadRefAt(0);
}

cell PriceFeedFeelib::getOptimismExtension(cell $self) impure inline {
    return $self.cellPreloadRefAt(1);
}

;; (priceRatio, gasPriceInRemoteUnit, gasPerByte, nativePriceUsd)
(int, int, int, int) PriceFeedFeelib::deserializeInts(cell $storage) impure inline {
    slice selfSlice = $storage.begin_parse();
    return (
        selfSlice.preloadCoinsAt(PriceFeedFeelib::_priceRatioOffset),
        selfSlice.preloadUint64At(PriceFeedFeelib::_gasPriceInRemoteUnitOffset),
        selfSlice.preloadUint32At(PriceFeedFeelib::_gasPerByteOffset),
        selfSlice.preloadCoinsAt(PriceFeedFeelib::_nativePriceUsdOffset)
    );
}

;; (priceRatio, gasPriceInRemoteUnit, gasPerByte, nativePriceUsd, arbitrumExtension, optimismExtension)
(int, int, int, int, cell, cell) PriceFeedFeelib::deserialize(cell $storage) impure inline {
    slice selfSlice = $storage.begin_parse();
    return (
        selfSlice.preloadCoinsAt(PriceFeedFeelib::_priceRatioOffset),
        selfSlice.preloadUint64At(PriceFeedFeelib::_gasPriceInRemoteUnitOffset),
        selfSlice.preloadUint32At(PriceFeedFeelib::_gasPerByteOffset),
        selfSlice.preloadCoinsAt(PriceFeedFeelib::_nativePriceUsdOffset),
        selfSlice.preloadRefAt(0),
        selfSlice.preloadRefAt(1)
    );
}

;; ============================== Object Setters =========================================

;; (priceRatio, gasPriceInRemoteUnit, gasPerByte)
cell PriceFeedFeelib::setFirstThreeFields(
    cell $self, 
    int priceRatio, 
    int gasPriceInRemoteUnit, 
    int gasPerByte
) impure inline {
    slice selfSlice = $self.begin_parse();
    return begin_cell()
        .store_slice(selfSlice.scutfirst(_HEADER_WIDTH, 2)) ;; header + refs
        .store_uint128(priceRatio)                          ;; new priceRatio
        .store_uint64(gasPriceInRemoteUnit)                 ;; new gasPriceInRemoteUnit
        .store_uint32(gasPerByte)                           ;; new gasPerByte
        .store_slice(selfSlice.scutlast(128, 0))            ;; last 128 bits = old nativePriceUsd
        .end_cell();
}

cell PriceFeedFeelib::setNativePriceUsd(cell $self, int nativePriceUsd) impure inline {
    slice selfSlice = $self.begin_parse();
    return begin_cell()
        .store_slice(selfSlice.scutfirst(PriceFeedFeelib::_nativePriceUsdOffset, 2)) ;; everything up to nativePriceUsd
        .store_uint128(nativePriceUsd) ;; new nativePriceUsd
        .end_cell();
}

cell PriceFeedFeelib::setPricesAndOptimismExtension(
    cell $self, 
    int priceRatio, 
    int gasPriceInRemoteUnit, 
    int gasPerByte,
    cell $optimismExtension
) impure inline {
    slice selfSlice = $self.begin_parse();
    return begin_cell()
        .store_slice(selfSlice.scutfirst(_HEADER_WIDTH, 1)) ;; header + old arbitrumExtension
        .store_uint128(priceRatio)                          ;; new priceRatio
        .store_uint64(gasPriceInRemoteUnit)                 ;; new gasPriceInRemoteUnit
        .store_uint32(gasPerByte)                           ;; new gasPerByte
        .store_slice(selfSlice.scutlast(128, 0))            ;; last 128 bits = old nativePriceUsd
        .store_ref($optimismExtension)                     ;; new optimismExtension
        .end_cell();
}

cell PriceFeedFeelib::setNativePriceUsdAndOptimismExtension(
    cell $self, 
    int nativePriceUsd,
    cell $optimismExtension
) impure inline {
    slice selfSlice = $self.begin_parse();
    return begin_cell()
        .store_slice(selfSlice.scutfirst(PriceFeedFeelib::_nativePriceUsdOffset, 1))  ;; bits up to nativePriceUsd + old arbitrumExtension
        .store_uint128(nativePriceUsd)                       ;; new nativePriceUsd
        .store_ref($optimismExtension)                       ;; new optimismExtension
        .end_cell();
}


cell PriceFeedFeelib::setArbitrumExtension(cell $self, cell $arbitrumExtension) impure inline {
    slice selfSlice = $self.begin_parse();
    return begin_cell()
        .store_slice(selfSlice.sskipfirst(0, 2))           ;; same bits, no refs
        .store_ref($arbitrumExtension)                     ;; new arbitrumExtension
        .store_ref(selfSlice.preloadRefAt(1))              ;; same optimismExtension
        .end_cell();
}