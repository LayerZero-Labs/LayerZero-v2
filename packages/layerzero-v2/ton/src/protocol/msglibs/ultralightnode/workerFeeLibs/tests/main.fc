#include "../../../../../../tests/testMain.fc";
#include "../../../../../funC++/classlib.fc";
#include "../ulnSendWorkerV1.fc";
#include "../../feeLibUtils.fc";
#include "../../../../../funC++/stdlib.fc";
#include "../../../../../funC++/utils.fc";
#include "../../../../../../tests/mocks.fc";

slice _testName() { return "UlnSendWorkerFactory"; }

cell baseTest::prepare(tuple args) impure {
    return cl::nullObject();
}

;;; ==============================  CONSTS  =============================

const int GAS_CONSUMED_MARGIN_BPS = 100;

const int QUOTE_CRC16 = 107686;                      ;; CRC16XModem of 'ulnWorker::quote'
const int SIMPLE_QUOTE_CRC16 = 74619;                ;; CRC16XModem of 'ulnWorker::simpleQuote'
const int TOO_MANY_INPUTS_CRC16 = 73838;             ;; CRC16XModem of 'ulnWorker::tooManyInputs'
const int TOO_FEW_INPUTS_CRC16 = 102787;             ;; CRC16XModem of 'ulnWorker::tooFewInputs'
const int SXITY_FOUR_OUTPUTS_CRC16 = 101406;         ;; CRC16XModem of 'ulnWorker::sixtyFourOutputs'

const int PUT_16_ITEMS_BEFORE_OOG_CRC16 = 114832;    ;; CRC16XModem of 'ulnWorker::put16ItemsBeforeOOG'
const int PUT_32_ITEMS_BEFORE_OOG_CRC16 = 72523;     ;; CRC16XModem of 'ulnWorker::put32ItemsBeforeOOG'
const int PUT_64_ITEMS_BEFORE_OOG_CRC16 = 124374;    ;; CRC16XModem of 'ulnWorker::put64ItemsBeforeOOG'

const int FIBONACCI_FOR_OOG_CRC16 = 94357;           ;; CRC16XModem of 'ulnWorker::fibonacci'

const int NESTED_RUN_VM_CRC16 = 108721;              ;; CRC16XModem of 'nestedRunVM'

;; this is an actual "magic number", which is the added gas usage of overheads for handling RUNVM i/o
const int OOG_GAS_OVERHEAD = 626;
const int NESTED_GAS_OVERHEAD = 550;
const int MIN_EXTRA_LIMIT_TO_HANDLE_NESTED_OOG = 1354;

;;; ==============================  HELPERS  ============================

() printCodeDict() impure {
    cell codeDict = my_code().begin_parse().preload_first_ref();
    int count = 0;
    int exists = -1;
    int key = -1;
    do {
        (key, slice val, exists) = udict_get_next?(codeDict, 19, key);
        count += 1;
    } until (exists == 0);
    ~strdump("code dict length");
    ~dump(count);
}

(int, int) getExitCode_gasConsumed(tuple retStack) {
    return (
        retStack.int_at(retStack.tlen() - 2),
        retStack.int_at(retStack.tlen() - 1)
    );
}

tuple nestedRunVm(tuple inputs) impure method_id {
    tuple innerInputs = inputs.tuple_at(0);
    int methodIdCRC = inputs.int_at(1);
    int nOutputs = inputs.int_at(2);
    slice code = inputs.slice_at(3);
    int gasLimit = inputs.int_at(4);

    return safePackedInputsRunVm(innerInputs, methodIdCRC, nOutputs, code, gasLimit);
}

;;; ==============================  TESTS  =============================

;; These tests are meant to demonstrate the behavior of RUNVM, specifically
;; the wrapper we've written around it. We do the demonstration by running tests
;; that shows a list of promises that the logic of RUNVM fulfills.

;; Promise 1: RUNVM actually runs the target function. If everything goes well,
;;            returns [output, 0, gasConsumed]
;;            output: the output of the target function,
;;            exitCode: 0,
;;            gasConsumed: the gas consumed by the target function.

(int, slice) callWorker::success::basic(cell $args) impure {
    tuple inputs = unsafeTuple([
        cl::nullObject(), 
        cl::nullObject(),
        MOCK_LZ_SEND_WITH_ID(10)
    ]);

    int initGas = get_gas_consumed();
    tuple retStack = safePackedInputsRunVm(
        inputs,
        QUOTE_CRC16, ;; CRC16XModem of 'quotePacked'
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple ret = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
        (exitCode == 0) 
        & (gasConsumed < DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        & (totalGasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
    );
}

;; Promise 2: If the target function throws an error,
;;            returns [0, exitCode, gasConsumed]
;;            where exitCode will be the one thrown by the target function, 
;;            and the gasConsumed will be <= limit + overhead.

(int, slice) callWorker::fail::throw(cell $args) impure {
    tuple inputs = unsafeTuple([
        cl::nullObject(), 
        cl::nullObject(), 
        MOCK_LZ_SEND_WITH_ID(111) ;; magic number that makes 'quote' throw
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        QUOTE_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
        ;; note-erfan: when there's no actual return value as it throws, the output seems to default to 0.
        (output == 0) 
        & (exitCode == 1000) ;; hardcoded in the worker
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        & (totalGasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
    );
}

;; Promise 3: If the target functions tries to use more gas than the limit passed to RUNVM parameters,
;;            returns [gasConsumed, -14, gasConsumed]
;;            where gasConsumed will be <= limit + overhead.
;;            also, if there are other variables pushed to the stack before running out of gas,
;;            they will be discarded silently.

(int, slice) callWorker::fail::16ItemsBeforeOOG(cell $args) impure {
    tuple inputs = unsafeTuple([0, 1, 2]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        PUT_16_ITEMS_BEFORE_OOG_CRC16,
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    ;; note-erfan: I think in this case the first item of the stack and the last one will both be the gas consumed
    return test::shouldBeTrue(
        (output == gasConsumed) 
        & (exitCode == -14) 
        ;; This line ensures the reported gas consumption from the VM is within a small margin of the gas limit
        & (gasConsumed < ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (totalGasConsumed == DEFAULT_WORKER_QUOTE_GAS_LIMIT + OOG_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::32ItemsBeforeOOG(cell $args) impure {
    tuple inputs = unsafeTuple([0, 1, 2]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        PUT_32_ITEMS_BEFORE_OOG_CRC16,
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);
    
    return test::shouldBeTrue(
        (output == gasConsumed) 
        & (exitCode == -14) 
        ;; This line ensures the reported gas consumption from the VM is within a small margin of the gas limit
        & (gasConsumed < ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (totalGasConsumed == DEFAULT_WORKER_QUOTE_GAS_LIMIT + OOG_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::64ItemsBeforeOOG(cell $args) impure {
    tuple inputs = unsafeTuple([0, 1, 2]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        PUT_64_ITEMS_BEFORE_OOG_CRC16,
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);
    
    return test::shouldBeTrue(
        (output == gasConsumed) 
        & (exitCode == -14) 
        ;; This line ensures the reported gas consumption from the VM is within a small margin of the gas limit
        & (gasConsumed < ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (totalGasConsumed == DEFAULT_WORKER_QUOTE_GAS_LIMIT + OOG_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::fibonacciForOOG(cell $args) impure {
    tuple inputs = unsafeTuple([20]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        FIBONACCI_FOR_OOG_CRC16,
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);
    
    return test::shouldBeTrue(
        (output == gasConsumed) 
        & (exitCode == -14) 
        ;; This line ensures the reported gas consumption from the VM is within a small margin of the gas limit
        & (gasConsumed < ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (totalGasConsumed == DEFAULT_WORKER_QUOTE_GAS_LIMIT + OOG_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::fibonacciForOOG_2xGasLimit(cell $args) impure {
    tuple inputs = unsafeTuple([22]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        FIBONACCI_FOR_OOG_CRC16,
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    ;; Assert the handler (1) ran out of gas and (2) the total gas used is equal to
    ;; the gas limit within some tolerance (for fixed overheads of the helper function etc.)
    return test::shouldBeTrue(
        (output == gasConsumed) 
        & (exitCode == -14) 
        & (gasConsumed < ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (totalGasConsumed == DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 + OOG_GAS_OVERHEAD)
    );
}

;; Promise 4: If the target function expects more inputs than provided,
;;            returns [0, 2, gasConsumed]
;;            where exitCode will be 2 (stack underflow), and the gasConsumed will be <= limit + overhead.

(int, slice) callWorker::fail::expectsMoreInputs(cell $args) impure {
    tuple inputs = unsafeTuple([0, 1, 2]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        TOO_MANY_INPUTS_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
       (output == 0) 
       & (exitCode == 2) ;; stack underflow
       & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
    );
}

;; Promise 5: If the target function expects less inputs than provided,
;;            returns [output, 0, gasConsumed]
;;            where exitCode will be 0, and the gasConsumed will be <= limit + overhead.
;;            the expected number of inputs will be taken from the stack and the rest will be ignored.

(int, slice) callWorker::success::expectsLessInputs(cell $args) impure {
    tuple inputs = unsafeTuple([0, 1, 2]);

    int initGas = get_gas_consumed();
    
    tuple retStack = safePackedInputsRunVm(
        inputs,
        TOO_FEW_INPUTS_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );
    
    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
       (output == 200) ;; hardcoded in the worker
       & (exitCode == 0)
       & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
    );
}

;; Promise 6: If the target function returns more outputs than expected, (pushed more things to the stack than expected)
;;            returns [output, 0, gasConsumed]
;;            where output is the expected output,
;;            exitCode is 0,
;;            gasConsumed does not depend on the number of outputs, and will be <= limit + overhead.

;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
;; - These two tests are actually one test, but we had to split them up because of the VM limitations.

(int, slice) callWorker::success::tooManyOutputs_ExactOutputs(cell $args) impure {
    tuple inputs = unsafeTuple([0, 1, 2]);

    int initGas = get_gas_consumed();

    ;; takes in all 64 outputs, doesn't drop anything.
    tuple retStack = safePackedInputsRunVm(
        inputs,
        SXITY_FOUR_OUTPUTS_CRC16, 
        64, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
        (exitCode == 0)
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        & (totalGasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        & (retStack.tlen() == 64 + 2) ;; 64 outputs + exit code + gas consumed
    );
}

(int, slice) callWorker::success::tooManyOutputs_LessOutputs(cell $args) impure {
    tuple inputs = unsafeTuple([0, 1, 2]);

    int initGas = get_gas_consumed();

    ;; takes in 32 outputs, drops 32 outputs that were pushed after that.
    tuple retStack = safePackedInputsRunVm(
        inputs,
        SXITY_FOUR_OUTPUTS_CRC16, 
        32, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
        (exitCode == 0)
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        ;; because we need to pack 32 less inputs in a tuple here, so it costs less gas
        & (totalGasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        & (retStack.tlen() == 32 + 2) ;; 32 outputs + exit code + gas consumed
    );
}
;; xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


;; Promise 7: Running a nested RUNVM does not break any of the promises we made about RUNVM.
;; if the target function in the worker bytecode returns more than the number of outputs specified,
;; the extra outputs are dropped silently and the gas consumed is not affected by the actual number of outputs

(int, slice) callWorker::success::nested_basic(cell $args) impure {
    tuple innerInputs = unsafeTuple([
        cl::nullObject(), 
        cl::nullObject(),
        MOCK_LZ_SEND_WITH_ID(10)
    ]);

    tuple inputs = unsafeTuple([
        innerInputs,
        QUOTE_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple nestedRetStack = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    (int nestedExitCode, int nestedGasConsumed) = getExitCode_gasConsumed(nestedRetStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == 0) 
        & (nestedExitCode == 0)

        ;; gas checks
        & (nestedGasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2) 
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::nested_throw(cell $args) impure {
    tuple innerInputs = unsafeTuple([
        cl::nullObject(), 
        cl::nullObject(),
        MOCK_LZ_SEND_WITH_ID(111)
    ]);

    tuple inputs = unsafeTuple([
        innerInputs,
        QUOTE_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple nestedRetStack = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    int nestedOutput = nestedRetStack.int_at(0);
    (int nestedExitCode, int nestedGasConsumed) = getExitCode_gasConsumed(nestedRetStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == 0)
        & (nestedExitCode == 1000) 

        ;; output checks
        & (nestedOutput == 0)

        ;; gas checks
        & (nestedGasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT)
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2)
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::nested_16ItemsBeforeOOG(cell $args) impure {
    tuple inputs = unsafeTuple([
        unsafeTuple([0, 1, 2]),
        PUT_16_ITEMS_BEFORE_OOG_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple nestedRetStack = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    int nestedOutput = nestedRetStack.int_at(0);
    (int nestedExitCode, int nestedGasConsumed) = getExitCode_gasConsumed(nestedRetStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == 0)
        & (nestedExitCode == -14)

        ;; output checks
        & (nestedOutput == nestedGasConsumed)

        ;; gas checks
        ;; the nested OOG gas uses more gas than the limit because it has some overhead.
        & (nestedGasConsumed <= ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2)
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::nested_32ItemsBeforeOOG(cell $args) impure {
    tuple inputs = unsafeTuple([
        unsafeTuple([0, 1, 2]),
        PUT_32_ITEMS_BEFORE_OOG_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple nestedRetStack = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    int nestedOutput = nestedRetStack.int_at(0);
    (int nestedExitCode, int nestedGasConsumed) = getExitCode_gasConsumed(nestedRetStack);

    return test::shouldBeTrue(
        ;; exit code checks 
        (exitCode == 0)
        & (nestedExitCode == -14)

        ;; output checks
        & (nestedOutput == nestedGasConsumed)

        ;; gas checks
        ;; the nested OOG gas uses more gas than the limit because it has some overhead.
        & (nestedGasConsumed <= ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2)
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::nested_64ItemsBeforeOOG(cell $args) impure {
    tuple inputs = unsafeTuple([
        unsafeTuple([0, 1, 2]),
        PUT_64_ITEMS_BEFORE_OOG_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple nestedRetStack = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    int nestedOutput = nestedRetStack.int_at(0);
    (int nestedExitCode, int nestedGasConsumed) = getExitCode_gasConsumed(nestedRetStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == 0)
        & (nestedExitCode == -14)

        ;; output checks
        & (nestedOutput == nestedGasConsumed)

        ;; gas checks
        ;; the nested OOG gas uses more gas than the limit because it has some overhead.
        & (nestedGasConsumed <= ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2)
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::nested_fibonacciForOOG(cell $args) impure {
    tuple inputs = unsafeTuple([
        unsafeTuple([20]),
        FIBONACCI_FOR_OOG_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple nestedRetStack = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    int nestedOutput = nestedRetStack.int_at(0);
    (int nestedExitCode, int nestedGasConsumed) = getExitCode_gasConsumed(nestedRetStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == 0)
        & (nestedExitCode == -14)

        ;; output checks
        & (nestedOutput == nestedGasConsumed)

        ;; gas checks
        ;; the nested OOG gas uses more gas than the limit because it has some overhead.
        & (nestedGasConsumed <= ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2)
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::nested_fibonacciForOOG_2xGasLimit(cell $args) impure {
    tuple inputs = unsafeTuple([
        unsafeTuple([22]),
        FIBONACCI_FOR_OOG_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT * 3 ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    tuple nestedRetStack = retStack.tuple_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    int nestedOutput = nestedRetStack.int_at(0);
    (int nestedExitCode, int nestedGasConsumed) = getExitCode_gasConsumed(nestedRetStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == 0)
        & (nestedExitCode == -14)

        ;; output checks
        & (nestedOutput == nestedGasConsumed)

        ;; gas checks
        ;; the nested OOG gas uses more gas than the limit because it has some overhead.
        & (nestedGasConsumed <= ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * 2 * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (gasConsumed <= DEFAULT_WORKER_QUOTE_GAS_LIMIT * 3)
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

;; Promise 8: If the child VM goes OOG, and the parent VM doesn't have enough gas limit
;; to handle it, the parent VM should just return its own OOG exit code and not revert.
(int, slice) callWorker::fail::OOG_inHandling_OOG_fibonacci(cell $args) impure {
    tuple inputs = unsafeTuple([
        unsafeTuple([20]),
        FIBONACCI_FOR_OOG_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT  ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == -14)

        ;; output checks
        & (output == gasConsumed)

        ;; gas checks
        & (gasConsumed < ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

(int, slice) callWorker::fail::OOG_inHandling_OOG_64Items(cell $args) impure {
    tuple inputs = unsafeTuple([
        unsafeTuple([0, 1, 2]),
        PUT_64_ITEMS_BEFORE_OOG_CRC16, 
        1, 
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT
    ]);

    int initGas = get_gas_consumed();

    tuple retStack = safePackedInputsRunVm(
        inputs,
        NESTED_RUN_VM_CRC16, 
        1, ;; nOutputs
        my_code().begin_parse(),
        DEFAULT_WORKER_QUOTE_GAS_LIMIT ;; gaslimit
    );

    int totalGasConsumed = get_gas_consumed() - initGas;

    int output = retStack.int_at(0);
    (int exitCode, int gasConsumed) = getExitCode_gasConsumed(retStack);

    return test::shouldBeTrue(
        ;; exit code checks
        (exitCode == -14)

        ;; output checks
        & (output == gasConsumed)

        ;; gas checks
        & (gasConsumed < ((DEFAULT_WORKER_QUOTE_GAS_LIMIT * (10000 + GAS_CONSUMED_MARGIN_BPS)) / 10000))
        & (totalGasConsumed - gasConsumed == NESTED_GAS_OVERHEAD)
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        ;; -- these are the normal RUNVM tests
        .tpush([callWorker::success::basic, "callWorker::success::basic"])
        .tpush([callWorker::fail::throw, "callWorker::fail::throw"])

        .tpush([callWorker::fail::16ItemsBeforeOOG, "callWorker::fail::16ItemsBeforeOOG"])
        .tpush([callWorker::fail::32ItemsBeforeOOG, "callWorker::fail::32ItemsBeforeOOG"])
        .tpush([callWorker::fail::64ItemsBeforeOOG, "callWorker::fail::64ItemsBeforeOOG"])

        .tpush([callWorker::fail::fibonacciForOOG, "callWorker::fail::fibonacciForOOG"])
        .tpush([callWorker::fail::fibonacciForOOG_2xGasLimit, "callWorker::fail::fibonacciForOOG_2xGasLimit"])

        .tpush([callWorker::fail::expectsMoreInputs, "callWorker::fail::expectsMoreInputs"])
        .tpush([callWorker::success::expectsLessInputs, "callWorker::success::expectsLessInputs"])

        .tpush([callWorker::success::tooManyOutputs_ExactOutputs, "callWorker::success::tooManyOutputs_ExactOutputs"])
        .tpush([callWorker::success::tooManyOutputs_LessOutputs, "callWorker::success::tooManyOutputs_LessOutputs"])

        ;; -- these are the nested RUNVM tests
        .tpush([callWorker::success::nested_basic, "callWorker::success::nested_basic"])
        .tpush([callWorker::fail::nested_throw, "callWorker::fail::nested_throw"])

        .tpush([callWorker::fail::nested_16ItemsBeforeOOG, "callWorker::fail::nested_16ItemsBeforeOOG"])
        .tpush([callWorker::fail::nested_32ItemsBeforeOOG, "callWorker::fail::nested_32ItemsBeforeOOG"])
        .tpush([callWorker::fail::nested_64ItemsBeforeOOG, "callWorker::fail::nested_64ItemsBeforeOOG"])

        .tpush([callWorker::fail::nested_fibonacciForOOG, "callWorker::fail::nested_fibonacciForOOG"])
        .tpush([callWorker::fail::nested_fibonacciForOOG_2xGasLimit, "callWorker::fail::nested_fibonacciForOOG_2xGasLimit"])

        .tpush([callWorker::fail::OOG_inHandling_OOG_fibonacci, "callWorker::fail::OOG_inHandling_OOG_fibonacci"])
        .tpush([callWorker::fail::OOG_inHandling_OOG_64Items, "callWorker::fail::OOG_inHandling_OOG_64Items"])
    ;
}
