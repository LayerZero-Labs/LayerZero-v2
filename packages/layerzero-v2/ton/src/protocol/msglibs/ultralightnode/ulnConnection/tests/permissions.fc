#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "../utils.fc";

#include "../../callbackOpcodes.fc";
#include "../../msgdata/Attestation.fc";
#include "../../msgdata/InitUlnConnection.fc";
#include "../../msgdata/UlnReceiveConfig.fc";
#include "../../msgdata/UlnSendConfig.fc";
#include "../../msgdata/UlnVerification.fc";

#include "../../../interface.fc";

#include "../../../../interfaces.fc";

#include "../../../../../classes/lz/Path.fc";
#include "../../../../../classes/msgdata/ChannelNonceInfo.fc";
#include "../../../../../classes/msgdata/ExtendedMd.fc";
#include "../../../../../classes/msgdata/MdAddress.fc";
#include "../../../../../classes/msgdata/MdObj.fc";
#include "../../../../../classes/msgdata/Nonce.fc";
#include "../../../../../funC++/actions/call.fc";
#include "../../../../../funC++/classlib.fc";
#include "../../../../../funC++/constants.fc";
#include "../../../../../funC++/stdlib.fc";
#include "../../../../../funC++/utils.fc";

#include "../../../../../../tests/baseContractTest.fc";
#include "../../../../../../tests/consts.fc";
#include "../../../../../../tests/mocks.fc";
#include "../../../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../../../tests/testMain.fc";

slice _testName() { return "UlnConnectionPermissions"; }

() _createInitializedStorage() impure {
    initialize(
        md::InitUlnConnection::New(
            UlnSendConfig::NewWithDefaults(),
            UlnReceiveConfig::NewWithDefaults(),
            ENDPOINT_ADDRESS,
            CHANNEL_ADDRESS
        )
    );
}

cell createContractStorage() impure {
    cell $path = lz::Path::New(SRC_EID, getContractAddress(), DST_EID, DST_OAPP);
    setContractStorage(
        UlnConnection::New(ULN_MANAGER_ADDRESS, $path, ULN_ADDRESS)
    );
    return getContractStorage();
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) checkPermissions::msglibConnectionSend::success::basic(cell $storage) impure {
    spoofCaller(CHANNEL_ADDRESS);
    return test::permissions::shouldPass(
        MsglibConnection::OP::MSGLIB_CONNECTION_SEND,
        MOCK_LZ_SEND_WITH_ID(1)
    );
}

(int, slice) checkPermissions::msglibConnectionSend::revert::notChannel(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        MsglibConnection::OP::MSGLIB_CONNECTION_SEND,
        MOCK_LZ_SEND_WITH_ID(1)
    );
}

(int, slice) checkPermissions::msglibConnectionCommitPacketCallback::success::basic(cell $storage) impure {
    spoofCaller(CHANNEL_ADDRESS);
    return test::permissions::shouldPass(
        MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
        md::ChannelNonceInfo::New(NONCE, NONCE)
    );
}

(int, slice) checkPermissions::msglibConnectionCommitPacketCallback::revert::notChannel(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldFail(
        MsglibConnection::OP::MSGLIB_CONNECTION_COMMIT_PACKET_CALLBACK,
        md::ChannelNonceInfo::New(NONCE, NONCE)
    );
}

(int, slice) checkPermissions::ulnConnectionVerify::success::basic(cell $storage) impure {
    spoofCaller(ULN_ADDRESS);
    return test::permissions::shouldPass(
        UlnConnection::OP::ULN_CONNECTION_VERIFY,
        md::MdAddress::New(
            MOCK_ULN_VERIFICATION(DEFAULT_CONFIRMATIONS),
            ULN_CONNECTION_ADDRESS
        )
    );
}

(int, slice) checkPermissions::ulnConnectionVerify::revert::notUln(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnConnection::OP::ULN_CONNECTION_VERIFY,
        md::MdAddress::New(
            MOCK_ULN_VERIFICATION(DEFAULT_CONFIRMATIONS),
            ULN_CONNECTION_ADDRESS
        )
    );
}

(int, slice) checkPermissions::ulnConnectionCommitPacket::success::basic(cell $storage) impure {
    spoofCaller(ULN_ADDRESS);
    return test::permissions::shouldPass(
        UlnConnection::OP::ULN_CONNECTION_COMMIT_PACKET,
        md::MdObj::New(
            MOCK_RECEIVE_PACKET(),
            MOCK_DEFAULT_ULN_RECEIVE_CONFIG()
        )
    );
}

(int, slice) checkPermissions::ulnConnectionCommitPacket::revert::onlyUln(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldFail(
        UlnConnection::OP::ULN_CONNECTION_COMMIT_PACKET,
        md::MdObj::New(
            MOCK_RECEIVE_PACKET(),
            MOCK_DEFAULT_ULN_RECEIVE_CONFIG()
        )
    );
}

(int, slice) checkPermissions::msglibConnectionQuote::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        MsglibConnection::OP::MSGLIB_CONNECTION_QUOTE,
        MOCK_LZ_SEND()
    );
}

(int, slice) checkPermissions::GarbageCollectAttestations::success::basic(cell $storage) impure {
    spoofCaller(ULN_ADDRESS);
    return test::permissions::shouldPass(
        UlnConnection::OP::GARBAGE_COLLECT_INVALID_ATTESTATIONS,
        md::MdObj::New(
            md::Nonce::New(NONCE),
            MOCK_DEFAULT_ULN_RECEIVE_CONFIG()
        )
    );
}

(int, slice) checkPermissions::GarbageCollectAttestations::revert::notUln(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnConnection::OP::GARBAGE_COLLECT_INVALID_ATTESTATIONS,
        md::MdObj::New(
            md::Nonce::New(NONCE),
            MOCK_DEFAULT_ULN_RECEIVE_CONFIG()
        )
    );
}

(int, slice) checkPermissions::MsglibConnectionSyncChannelState::success::basic(cell $storage) impure {
    spoofCaller(CHANNEL_ADDRESS);
    return test::permissions::shouldPass(
        MsglibConnection::OP::MSGLIB_CONNECTION_SYNC_CHANNEL_STATE,
        md::ChannelNonceInfo::New(NONCE, NONCE)
    );
}

(int, slice) checkPermissions::MsglibConnectionSyncChannelState::revert::notChannel(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        MsglibConnection::OP::MSGLIB_CONNECTION_SYNC_CHANNEL_STATE,
        md::ChannelNonceInfo::New(NONCE, NONCE)
    );
}

(int, slice) checkPermissions::setOAppUlnSendConfig::success::basic(cell $storage) impure {
    spoofCaller(ULN_MANAGER_ADDRESS);
    return test::permissions::shouldPass(
        UlnConnection::OP::SET_OAPP_ULN_SEND_CONFIG,
        MOCK_CUSTOM_ULN_SEND_CONFIG()
    );
}

(int, slice) checkPermissions::setOAppUlnSendConfig::revert::notUlnManager(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnConnection::OP::SET_OAPP_ULN_SEND_CONFIG,
        MOCK_CUSTOM_ULN_SEND_CONFIG()
    );
}

(int, slice) checkPermissions::setOAppUlnReceiveConfig::success::basic(cell $storage) impure {
    spoofCaller(ULN_MANAGER_ADDRESS);
    return test::permissions::shouldPass(
        UlnConnection::OP::SET_OAPP_ULN_RECEIVE_CONFIG,
        MOCK_DEFAULT_ULN_RECEIVE_CONFIG()
    );
}

(int, slice) checkPermissions::setOAppUlnReceiveConfig::revert::notUlnManager(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnConnection::OP::SET_OAPP_ULN_RECEIVE_CONFIG,
        MOCK_DEFAULT_ULN_RECEIVE_CONFIG()
    );
}

(int, slice) checkPermissions::garbageCollectExecutedNoncess::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        UlnConnection::OP::GARBAGE_COLLECT_EXECUTED_NONCES,
        cl::nullObject()
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([checkPermissions::msglibConnectionSend::success::basic, "checkPermissions::msglibConnectionSend::success::basic"])
        .tpush([checkPermissions::msglibConnectionSend::revert::notChannel, "checkPermissions::msglibConnectionSend::revert::notChannel"])
        .tpush([checkPermissions::msglibConnectionCommitPacketCallback::success::basic, "checkPermissions::msglibConnectionCommitPacketCallback::success::basic"])
        .tpush([checkPermissions::msglibConnectionCommitPacketCallback::revert::notChannel, "checkPermissions::msglibConnectionCommitPacketCallback::revert::notChannel"])
        .tpush([checkPermissions::ulnConnectionVerify::success::basic, "checkPermissions::ulnConnectionVerify::success::basic"])
        .tpush([checkPermissions::ulnConnectionVerify::revert::notUln, "checkPermissions::ulnConnectionVerify::revert::notUln"])
        .tpush([checkPermissions::ulnConnectionCommitPacket::success::basic, "checkPermissions::ulnConnectionCommitPacket::success::basic"])
        .tpush([checkPermissions::ulnConnectionCommitPacket::revert::onlyUln, "checkPermissions::ulnConnectionCommitPacket::revert::onlyUln"])
        .tpush([checkPermissions::msglibConnectionQuote::success::basic, "checkPermissions::msglibConnectionQuote::success::basic"])
        .tpush([checkPermissions::GarbageCollectAttestations::success::basic, "checkPermissions::GarbageCollectAttestations::success::basic"])
        .tpush([checkPermissions::GarbageCollectAttestations::revert::notUln, "checkPermissions::GarbageCollectAttestations::revert::notUln"])
        .tpush([checkPermissions::MsglibConnectionSyncChannelState::success::basic, "checkPermissions::MsglibConnectionSyncChannelState::success::basic"])
        .tpush([checkPermissions::MsglibConnectionSyncChannelState::revert::notChannel, "checkPermissions::MsglibConnectionSyncChannelState::revert::notChannel"])
        .tpush([checkPermissions::setOAppUlnSendConfig::success::basic, "checkPermissions::setOAppUlnSendConfig::success::basic"])
        .tpush([checkPermissions::setOAppUlnSendConfig::revert::notUlnManager, "checkPermissions::setOAppUlnSendConfig::revert::notUlnManager"])
        .tpush([checkPermissions::setOAppUlnReceiveConfig::success::basic, "checkPermissions::setOAppUlnReceiveConfig::success::basic"])
        .tpush([checkPermissions::setOAppUlnReceiveConfig::revert::notUlnManager, "checkPermissions::setOAppUlnReceiveConfig::revert::notUlnManager"])
        .tpush([checkPermissions::garbageCollectExecutedNoncess::success::basic, "checkPermissions::garbageCollectExecutedNoncess::success::basic"])
    ;
}