#include "../../../../../../tests/baseSerdeTest.fc";
#include "../../../../../../tests/mocks.fc";
#include "../../../../../funC++/classlib.fc";
#include "../../../../../../tests/consts.fc";
#include "../../../../../funC++/dataStructures/PipelinedOutOfOrder.fc";

;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "ULN Connection Serde"; }

;;; ===============================TESTS=========================================

;; UlnConnection: Has 9 getters,
;;                Has 3 multi-getter (deserializer)
;;                Has 2 setters
(int, slice) Serde::UlnConnection::getBaseStorage(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    );

    return test::getRef::equal(
        $ulnConnectionStorage,
        UlnConnection::getBaseStorage,
        UlnConnection::baseStorage
    );
}

(int, slice) Serde::UlnConnection::getChannelAddress(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    ).cl::set(UlnConnection::channelAddress, CHANNEL_ADDRESS);

    return test::getData::equal(
        $ulnConnectionStorage,
        UlnConnection::getChannelAddress,
        UlnConnection::channelAddress
    );
}

(int, slice) Serde::UlnConnection::getUlnAddress(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    );

    return test::getData::equal(
        $ulnConnectionStorage,
        UlnConnection::getUlnAddress,
        UlnConnection::ulnAddress
    );
}

(int, slice) Serde::UlnConnection::getCommitPOOO(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    ).cl::set(UlnConnection::commitPOOO, POOO::New().POOO::set(1));

    return test::getRef::equal(
        $ulnConnectionStorage,
        UlnConnection::getCommitPOOO,
        UlnConnection::commitPOOO
    );
}

(int, slice) Serde::UlnConnection::getSendInformation(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    )
        .cl::set(UlnConnection::UlnSendConfigOApp, MOCK_CUSTOM_ULN_SEND_CONFIG())
        .cl::set(UlnConnection::channelAddress, CHANNEL_ADDRESS);

    (
        int ulnAddress,
        int channelAddress,
        cell sendConfig
    ) = $ulnConnectionStorage.UlnConnection::getSendInformation();

    return test::multiget::equal(
        $ulnConnectionStorage,
        unsafeTuple([
            UlnConnection::ulnAddress,
            UlnConnection::channelAddress,
            UlnConnection::UlnSendConfigOApp
        ]),
        unsafeTuple([
            ulnAddress,
            channelAddress,
            sendConfig
        ])
    );
}

(int, slice) Serde::UlnConnection::getVerifyInformation(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    ).cl::set(UlnConnection::hashLookups, MOCK_SEND_PACKET());

    (
        int firstUnexecutedNonce,
        cell hashLookups,
        cell receiveConfig
    ) = $ulnConnectionStorage.UlnConnection::getVerifyInformation();

    return test::multiget::equal(
        $ulnConnectionStorage,
        unsafeTuple([
            UlnConnection::firstUnexecutedNonce,
            UlnConnection::hashLookups,
            UlnConnection::UlnReceiveConfigOApp
        ]),
        unsafeTuple([
            firstUnexecutedNonce,
            hashLookups,
            receiveConfig
        ])
    );
}

(int, slice) Serde::UlnConnection::getCommitPacketInformation(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    ).cl::set(UlnConnection::hashLookups, MOCK_SEND_PACKET())
     .cl::set(UlnConnection::UlnReceiveConfigOApp, MOCK_CUSTOM_ULN_SEND_CONFIG());

    (
        int endpointAddress,
        cell receiveConfig,
        cell hashLookups
    ) = $ulnConnectionStorage.UlnConnection::getCommitPacketInformation();

    return test::multiget::equal(
        $ulnConnectionStorage,
        unsafeTuple([
            UlnConnection::endpointAddress,
            UlnConnection::UlnReceiveConfigOApp,
            UlnConnection::hashLookups
        ]),
        unsafeTuple([
            endpointAddress,
            receiveConfig,
            hashLookups
        ])
    );
}

(int, slice) Serde::UlnConnection::setHashLookups(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    );

    cell $hashLookups = cl::dict256::New()
        .cl::dict256::setRef(NONCE, MOCK_ATTESTATION(DEFAULT_CONFIRMATIONS));

    return test::set::equal(
        $ulnConnectionStorage.cl::set(UlnConnection::hashLookups, $hashLookups),
        $ulnConnectionStorage.UlnConnection::setHashLookups($hashLookups)
    );
}

(int, slice) Serde::UlnConnection::updateCommittmentInfo(cell $unused) impure {
    cell $ulnConnectionStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    );

    int committedNonce = 1;
    int firstUnexecutedNonce = 1;
    cell $commitPOOO = POOO::New().POOO::set(1);

    return test::build::equal(
        $ulnConnectionStorage.UlnConnection::updateCommittmentInfo(
            committedNonce,
            firstUnexecutedNonce,
            $commitPOOO
        ),
        $ulnConnectionStorage
            .cl::set(UlnConnection::hashLookups, $ulnConnectionStorage.cl::get<dict256>(UlnConnection::hashLookups).cl::dict256::delete(committedNonce))
            .cl::set(UlnConnection::commitPOOO, $commitPOOO)
            .cl::set(UlnConnection::firstUnexecutedNonce, firstUnexecutedNonce)
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([Serde::UlnConnection::getBaseStorage, "Serde::UlnConnection::getBaseStorage"])
        .tpush([Serde::UlnConnection::getChannelAddress, "Serde::UlnConnection::getChannelAddress"])
        .tpush([Serde::UlnConnection::getUlnAddress, "Serde::UlnConnection::getUlnAddress"])
        .tpush([Serde::UlnConnection::getCommitPOOO, "Serde::UlnConnection::getCommitPOOO"])
        .tpush([Serde::UlnConnection::getSendInformation, "Serde::UlnConnection::getSendInformation"])
        .tpush([Serde::UlnConnection::getVerifyInformation, "Serde::UlnConnection::getVerifyInformation"])
        .tpush([Serde::UlnConnection::getCommitPacketInformation, "Serde::UlnConnection::getCommitPacketInformation"])
        .tpush([Serde::UlnConnection::updateCommittmentInfo, "Serde::UlnConnection::updateCommittmentInfo"])
        .tpush([Serde::UlnConnection::setHashLookups, "Serde::UlnConnection::setHashLookups"])
    ;
}
