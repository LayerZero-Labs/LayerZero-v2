;; 1) If RUNVM successful and M (number of returnable elements is set) it returns M elements. If M not set - returns all.
;; 2) if RUNVM successful but there is not enough elements on stack (M) it is considered as exception in child VM with exit_code=-3 exit_arg=0.
;; 3) if RUNVM fails with exception - only one element is returned - exit arg (not to be mistaken with exit_code)
;; 4) in case of OOG, exit_code = -14 and exit_arg is amount of gas

;; RunVM inputs: x_1 ... x_n n code [r] [c4] [c7] [g_l] [g_m] - x'_1 
;; RunVm outputs: x'_m exitcode [data'] [c4'] [c5] [g_c]

;; the inputs have to be packed in a tuple
;; and the number of outputs is set by the nOutputs
tuple safePackedInputsRunVm(
    tuple inputs,
    int methodIdCRC,
    int nOutputs,
    slice code,
    int gasLimit
) impure method_id asm """
    // STACK: left -> right: bottom -> top //
    // Setup                 // STACK [ inputs, methodIdCRC, nOutputs, code,  gasLimit ] ; len(callerStack) = 5
    //                       // STACK [ ..., inputs, methodIdCRC, nOutputs, code, nOutputs, gasLimit ]
    DEPTH 5 PUSHINT SUB      // STACK [ ..., inputs, methodIdCRC, nOutputs, code, gasLimit, len(callerStack) ]
    3 PUSHINT SETGLOBVAR     // STACK [ ..., inputs, methodIdCRC, nOutputs, code, gasLimit ]
    // Globvars[3] = len(...)

    // Arrange the stack for RUNVM
    // nArgs is actually numberOfInputs + 1
    2 PUSHINT                 // STACK [ ..., inputs, methodIdCRC, nOutputs, code, gasLimit, nArgs ]
    s1 XCHG0                  // STACK [ ..., inputs, methodIdCRC, nOutputs, code, nArgs, gasLimit ]
    s1 s3 XCHG                // STACK [ ..., inputs, methodIdCRC, nArgs, code, nOutputs, gasLimit ]

    // Run the given methodId in a sandbox child VM with flag 256 + 8 + 1
    // +1 : set c3 to code
    // +8: take gas limit g_l from stack, return consumed gas g_c
    // +256: pop integer r, return exactly r values from the top of the stack (only if exitcode=0 or 1; if not enough then exitcode=stack_underflow)
    // here, r := nOutputs

    265 RUNVM
                            // STACK [ ..., childStack]
                            // childStack is capped at nOutputs

    // Cleanup the return values
    // 1. Figure out the length of the childStack
    DEPTH                   // STACK [ ..., childStack, len(...) + len(childStack) ]
    3 PUSHINT GETGLOBVAR    // STACK [ ..., childStack, len(...) + len(childStack), len(...) ]
    // calculate len(childStack) = len(currentStack) - len(...)
    SUB ABS                 // STACK [ ..., childStack, len(childStack) ]

    // 2. Turn the entire child stack into a tuple
    // Tuplevar takes x1, ..., xn and n, and turns it into a tuple (x1, ..., xn)
    // wouldn't know how many elements to take without the n
    TUPLEVAR                // STACK [ ..., tuple[*childStack] ]
""";