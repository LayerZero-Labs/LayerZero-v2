#include "../../../../../../tests/consts.fc";
#include "../../../../../../tests/mocks.fc";

#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "../../msgdata/TreasuryFeeBps.fc";
#include "../../msgdata/UlnWorkerFeelibInfo.fc";

#include "../../../../../classes/msgdata/Deploy.fc";

#include "../../../../../../tests/baseContractTest.fc";
#include "../../../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../../../tests/testMain.fc";
#include "../../../../interfaces.fc";
#include "../../../../../funC++/baseInterface.fc";
#include "../../../../../funC++/classlib.fc";
#include "../../../../../funC++/constants.fc";
#include "../../../../../funC++/stdlib.fc";
#include "../../../../../funC++/txnContext.fc";
#include "../../../../../funC++/utils.fc";
#include "../../../../../classes/msgdata/AddMsglib.fc";
#include "../../../../../classes/msgdata/MdAddress.fc";
#include "../../../../../classes/msgdata/MdEid.fc";
#include "../../../../../classes/msgdata/MdObj.fc";
#include "../../../../../classes/msgdata/SetAddress.fc";
#include "../../../../../funC++/actions/deploy.fc";

slice _testName() { return "ulnManagerPermissions"; }

() _createInitializedStorage() impure {
    initialize(
        md::InitUlnManager::New(
            MOCK_ENDPOINT_CODE(),
            MOCK_CHANNEL_CODE()
        )
    );
}

cell createContractStorage() impure {
    setContractStorage(
        UlnManager::New(
            getCaller(),
            MOCK_ULN_CODE(),
            MOCK_ULN_CONNECTION_CODE(),
            CONTROLLER_ADDRESS,
            SRC_EID
        )
    );
    return getContractStorage();
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) checkPermissions::deployUln::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::DEPLOY_ULN,
        md::Deploy::New(INITIAL_DEPOSIT, DST_EID, NULLADDRESS)
    );
}

(int, slice) checkPermissions::deployUln::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::DEPLOY_ULN,
        md::Deploy::New(INITIAL_DEPOSIT, DST_EID, NULLADDRESS)
    );
}

(int, slice) checkPermissions::setDefaultUlnReceiveConfig::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG, 
        md::MdEid::New(
            MOCK_DEFAULT_ULN_RECEIVE_CONFIG(),
            DST_EID
        )
    );
}

(int, slice) checkPermissions::setDefaultUlnReceiveConfig::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG, 
        md::MdEid::New(
            MOCK_DEFAULT_ULN_RECEIVE_CONFIG(),
            DST_EID
        )
    );
}

(int, slice) checkPermissions::setDefaultUlnSendConfig::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::SET_DEFAULT_ULN_SEND_CONFIG, 
        md::MdEid::New(
            MOCK_DEFAULT_ULN_SEND_CONFIG(),
            DST_EID
        )
    );
}

(int, slice) checkPermissions::setDefaultUlnSendConfig::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::SET_DEFAULT_ULN_SEND_CONFIG,
        md::MdEid::New(
            MOCK_DEFAULT_ULN_SEND_CONFIG(),
            DST_EID
        )
    );
}

(int, slice) checkPermissions::registerWorkerFeelibBytecode::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::REGISTER_WORKER_FEELIB_BYTECODE,
        md::UlnWorkerFeelibBytecode::New(my_code())
    );
}

(int, slice) checkPermissions::registerWorkerFeelibBytecode::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::REGISTER_WORKER_FEELIB_BYTECODE,
        md::UlnWorkerFeelibBytecode::New(my_code())
    );
}

(int, slice) checkPermissions::claimTreasuryFees::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::CLAIM_TREASURY_FEES,
        md::CoinsAmount::New(1)
    );
}

(int, slice) checkPermissions::claimTreasuryFees::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::CLAIM_TREASURY_FEES,
        md::CoinsAmount::New(1)
    );
}

(int, slice) checkPermissions::setAdminWorker::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::SET_ADMIN_WORKERS,
        md::MdAddress::New(
            md::Bool::New(true),
            DEFAULT_EXECUTOR
        )
    );
}

(int, slice) checkPermissions::setAdminWorker::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::SET_ADMIN_WORKERS,
        md::MdAddress::New(
            md::Bool::New(true),
            DEFAULT_EXECUTOR
        )
    );
}

(int, slice) checkPermissions::getMsglibInfo::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        MsglibManager::OP::GET_MSGLIB_INFO,
        md::AddMsglib::New(ULN_MANAGER_ADDRESS, DST_EID)
    );
}

(int, slice) checkPermissions::deployConnection::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        MsglibManager::OP::DEPLOY_CONNECTION,
        md::Deploy::New(INITIAL_DEPOSIT, DST_EID, DST_OAPP)
    );
}

(int, slice) checkPermissions::SetOAppUlnReceiveConfig::success::basic(cell $storage) impure {
    spoofCaller(SRC_OAPP);
    return test::permissions::shouldPass(
        MsglibManager::OP::SET_OAPP_MSGLIB_RECEIVE_CONFIG,
        md::MdObj::New(MOCK_DEFAULT_ULN_RECEIVE_CONFIG(), MOCK_SEND_PATH())
    );
}

(int, slice) checkPermissions::SetOAppUlnReceiveConfig::revert::wrongSrcOApp(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldFail(
        MsglibManager::OP::SET_OAPP_MSGLIB_RECEIVE_CONFIG,
        md::MdObj::New(MOCK_DEFAULT_ULN_RECEIVE_CONFIG(), MOCK_SEND_PATH())
    );
}

(int, slice) checkPermissions::SetOAppUlnSendConfig::success::basic(cell $storage) impure {
    spoofCaller(SRC_OAPP);
    return test::permissions::shouldPass(
        MsglibManager::OP::SET_OAPP_MSGLIB_SEND_CONFIG,
        md::MdObj::New(MOCK_DEFAULT_ULN_SEND_CONFIG(), MOCK_SEND_PATH())
    );
}

(int, slice) checkPermissions::SetOAppUlnSendConfig::revert::wrongSrcOApp(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldFail(
        MsglibManager::OP::SET_OAPP_MSGLIB_SEND_CONFIG,
        md::MdObj::New(MOCK_DEFAULT_ULN_SEND_CONFIG(), MOCK_SEND_PATH())
    );
}

(int, slice) checkPermissions::setTreasuryFee::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::SET_ULN_TREASURY_FEE_BPS,
        md::MdEid::New(md::TreasuryFeeBps::New(TREASURY_FEE_BPS), DST_EID)
    );
}

(int, slice) checkPermissions::setTreasuryFee::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::SET_ULN_TREASURY_FEE_BPS,
        md::MdEid::New(md::TreasuryFeeBps::New(TREASURY_FEE_BPS), DST_EID)
    );
}

(int, slice) checkPermissions::claimOwnership::success(cell $storage) impure {
    int tentativeOwnerAddress = NULLADDRESS;
    spoofCaller(tentativeOwnerAddress);
    return test::permissions::shouldPass(
        UlnManager::OP::CLAIM_OWNERSHIP,
        empty_cell()
    );
}

(int, slice) checkPermissions::claimOwnership::revert::notTentativeOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::CLAIM_OWNERSHIP,
        empty_cell()
    );
}

(int, slice) checkPermissions::transferOwnership::success(cell $storage) impure {
    return test::permissions::shouldPass(
        UlnManager::OP::TRANSFER_OWNERSHIP,
        md::SetAddress::New(TENTATIVE_OWNER_ADDRESS)
    );
}

(int, slice) checkPermissions::transferOwnership::revert::notOwner(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        UlnManager::OP::TRANSFER_OWNERSHIP,
        md::SetAddress::New(TENTATIVE_OWNER_ADDRESS)
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([checkPermissions::deployUln::success::basic, "checkPermissions::deployUln::success::basic"])
        .tpush([checkPermissions::deployUln::revert::notOwner, "checkPermissions::deployUln::revert::notOwner"])
        .tpush([checkPermissions::setDefaultUlnReceiveConfig::success::basic, "checkPermissions::setDefaultUlnReceiveConfig::success::basic"])
        .tpush([checkPermissions::setDefaultUlnReceiveConfig::revert::notOwner, "checkPermissions::setDefaultUlnReceiveConfig::revert::notOwner"])
        .tpush([checkPermissions::setDefaultUlnSendConfig::success::basic, "checkPermissions::setDefaultUlnSendConfig::success::basic"])
        .tpush([checkPermissions::setDefaultUlnSendConfig::revert::notOwner, "checkPermissions::setDefaultUlnSendConfig::revert::notOwner"])
        .tpush([checkPermissions::registerWorkerFeelibBytecode::success::basic, "checkPermissions::registerWorkerFeelibBytecode::success::basic"])
        .tpush([checkPermissions::registerWorkerFeelibBytecode::revert::notOwner, "checkPermissions::registerWorkerFeelibBytecode::revert::notOwner"])
        .tpush([checkPermissions::claimTreasuryFees::success::basic, "checkPermissions::claimTreasuryFees::success::basic"])
        .tpush([checkPermissions::claimTreasuryFees::revert::notOwner, "checkPermissions::claimTreasuryFees::revert::notOwner"])
        .tpush([checkPermissions::setAdminWorker::success::basic, "checkPermissions::setAdminWorker::success::basic"])
        .tpush([checkPermissions::setAdminWorker::revert::notOwner, "checkPermissions::setAdminWorker::revert::notOwner"])
        .tpush([checkPermissions::getMsglibInfo::success::basic, "checkPermissions::getMsglibInfo::success::basic"])
        .tpush([checkPermissions::deployConnection::success::basic, "checkPermissions::deployConnection::success::basic"])
        .tpush([checkPermissions::SetOAppUlnReceiveConfig::success::basic, "checkPermissions::SetOAppUlnReceiveConfig::success::basic"])
        .tpush([checkPermissions::SetOAppUlnReceiveConfig::revert::wrongSrcOApp, "checkPermissions::SetOAppUlnReceiveConfig::revert::wrongSrcOApp"])
        .tpush([checkPermissions::SetOAppUlnSendConfig::success::basic, "checkPermissions::SetOAppUlnSendConfig::success::basic"])
        .tpush([checkPermissions::SetOAppUlnSendConfig::revert::wrongSrcOApp, "checkPermissions::SetOAppUlnSendConfig::revert::wrongSrcOApp"])
        .tpush([checkPermissions::setTreasuryFee::success::basic, "checkPermissions::setTreasuryFee::success::basic"])
        .tpush([checkPermissions::setTreasuryFee::revert::notOwner, "checkPermissions::setTreasuryFee::revert::notOwner"])
        .tpush([checkPermissions::claimOwnership::success, "checkPermissions::claimOwnership::success"])
        .tpush([checkPermissions::claimOwnership::revert::notTentativeOwner, "checkPermissions::claimOwnership::revert::notTentativeOwner"])
        .tpush([checkPermissions::transferOwnership::success, "checkPermissions::transferOwnership::success"])
        .tpush([checkPermissions::transferOwnership::revert::notOwner, "checkPermissions::transferOwnership::revert::notOwner"])
    ;
}   
