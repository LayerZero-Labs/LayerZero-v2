#include "../../../core/abstract/protocolHandler.fc";
#include "../../../interfaces.fc";

#include "../uln/interface.fc";
#include "../ulnConnection/interface.fc";

#include "../../../channel/storage.fc";
#include "../../../endpoint/storage.fc";
#include "../../../endpoint/interface.fc";

#include "../../../../funC++/classlib.fc";
#include "../../../../funC++/txnContext.fc";
#include "../../../../funC++/utils.fc";
#include "../../../../classes/lz/Path.fc";
#include "../../../../classes/lz/MsglibInfo.fc";
#include "../../../../classes/msgdata/CoinsAmount.fc";
#include "../../../../classes/msgdata/Deploy.fc";
#include "../../../../classes/msgdata/MdAddress.fc";
#include "../../../../classes/msgdata/AddMsglib.fc";
#include "../../../../classes/msgdata/MdEid.fc";
#include "../../../../classes/msgdata/MdObj.fc";
#include "../../../../classes/msgdata/Bool.fc";
#include "../../../../classes/msgdata/SetAddress.fc";

#include "../msgdata/UlnWorkerFeelibInfo.fc";
#include "../msgdata/InitUln.fc";
#include "../msgdata/InitUlnConnection.fc";
#include "../msgdata/InitUlnManager.fc";
#include "../msgdata/SetAdminWorkerAddresses.fc";
#include "../msgdata/TreasuryFeeBps.fc";
#include "../msgdata/UlnWorkerFeelibBytecode.fc";

#include "interface.fc";
#include "storage.fc";

;;; ================INTERFACE FUNCTIONS=====================

(cell, tuple) _initialize(cell $initUlnManager) impure inline {
    (cell $storage, tuple actions) = preamble();

    return (
        $storage
            .cl::set(
                UlnManager::endpointCode,
                $initUlnManager.cl::get<cellRef>(md::InitUlnManager::endpointCode)
            )
            .cl::set(
                UlnManager::channelCode,
                $initUlnManager.cl::get<cellRef>(md::InitUlnManager::channelCode)
            ),
        actions
    );
}

int _getEventSink() impure inline {
    return getContractAddress();
}

() _assertOAppPath(cell $mdObj) impure inline {
    cell $sanitizedMdObj = $mdObj.md::MdObj::sanitize();
    cell $path = $sanitizedMdObj.cl::get<objRef>(md::MdObj::obj);
    cell $sanitizedPath = lz::Path::sanitize($path);
    throw_unless(
        UlnManager::ERROR::invalidPath,
        getCaller() == $sanitizedPath.cl::get<address>(lz::Path::srcOApp)
    );
}

() assertTentativeOwner() impure inline {
    throw_unless(
        UlnManager::ERROR::onlyTentativeOwner,
        getCaller() == getContractStorage().cl::get<address>(UlnManager::tentativeOwner)
    );
}

;;; ================PERMISSION FUNCTIONS=====================

() _checkPermissions(int op, cell $md) impure inline {
    if (
        (op == UlnManager::OP::DEPLOY_ULN)
        | (op == UlnManager::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG)
        | (op == UlnManager::OP::SET_DEFAULT_ULN_SEND_CONFIG)
        | (op == UlnManager::OP::REGISTER_WORKER_FEELIB_BYTECODE)
        | (op == UlnManager::OP::CLAIM_TREASURY_FEES)
        | (op == UlnManager::OP::SET_ADMIN_WORKERS)
        | (op == UlnManager::OP::SET_ULN_TREASURY_FEE_BPS)
        | (op == UlnManager::OP::TRANSFER_OWNERSHIP)
    ) {
        ;; open to only owner
        return assertOwner();
    } elseif (
        (op == MsglibManager::OP::GET_MSGLIB_INFO)
        | (op == MsglibManager::OP::DEPLOY_CONNECTION)
        | (op == UlnManager::OP::ADD_ULN_WORKER)
    ) {
        ;; open and public calls
        return ();
    } elseif (
        (op == MsglibManager::OP::SET_OAPP_MSGLIB_RECEIVE_CONFIG)
        | (op == MsglibManager::OP::SET_OAPP_MSGLIB_SEND_CONFIG)
    ) {
        return _assertOAppPath($md);
    } elseif (op == UlnManager::OP::CLAIM_OWNERSHIP) {
        return assertTentativeOwner();
    } else {
        ;; we must put a check for all opcodes to make sure we don't
        ;; mistakenly miss an opcode's permissions
        throw(BaseInterface::ERROR::invalidOpcode);
    }
}

;;; ==========================HELPER FUNCTIONS=====================================

int _calculateUlnAddress(cell $storage, int dstEid) impure inline method_id {
    throw_if(UlnManager::ERROR::invalidEid, dstEid == 0);
    return computeContractAddress(
        Uln::New(
            getContractAddress(), 
            $storage.cl::get<uint32>(UlnManager::eid), 
            dstEid
        ),
        $storage.cl::get<cellRef>(UlnManager::ulnCode)
    );
}

int _calculateEndpointAddress(cell $storage, int dstEid) impure inline method_id {
    throw_if(UlnManager::ERROR::invalidEid, dstEid == 0);
    return computeContractAddress(
        Endpoint::New(
            $storage.cl::get<uint32>(UlnManager::eid),
            dstEid,
            $storage.cl::get<address>(UlnManager::controllerAddress)
        ),
        $storage.cl::get<cellRef>(UlnManager::endpointCode)
    );
}

int _calculateChannelAddress(cell $storage, cell $path) impure inline method_id {
    return computeContractAddress(
        Channel::New(
            $storage.cl::get<address>(UlnManager::controllerAddress),
            $path,
            _calculateEndpointAddress($storage, $path.cl::get<uint32>(lz::Path::dstEid))
        ),
        $storage.cl::get<cellRef>(UlnManager::channelCode)
    );
}

int _calculateUlnConnectionAddress(cell $storage, cell $path) impure inline method_id {
    return computeContractAddress(
        UlnConnection::New(
            getContractAddress(),
            $path,
            _calculateUlnAddress($storage, $path.cl::get<uint32>(lz::Path::dstEid))
        ),
        $storage.cl::get<cellRef>(UlnManager::ulnConnectionCode)
    );
}

;;; ==========================HANDLERS=====================================

;; @in_opcode UlnManager::OP::DEPLOY_ULN
;; @in_md Deploy
;; @permissions only-owner
;; @out_actions deploy the uln for this particular eid
tuple deployUln(cell $deploy) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedDeploy = $deploy.md::Deploy::NewWithExtraInfo::sanitize();

    int dstEid = $sanitizedDeploy.cl::get<uint32>(md::Deploy::dstEid);
    throw_if(UlnManager::ERROR::invalidEid, dstEid == 0);

    cell $initUln = $sanitizedDeploy
        .cl::get<objRef>(md::Deploy::extraInfo)
        .md::InitUln::sanitize()
        .cl::set(
            md::InitUln::connectionCode,
            $storage.cl::get<cellRef>(UlnManager::ulnConnectionCode)
        );

    actions~pushAction<deployAndCall>(
        $storage.cl::get<cellRef>(UlnManager::ulnCode),
        Uln::New(
            getContractAddress(),
            $storage.cl::get<uint32>(UlnManager::eid),
            dstEid
        ),
        $sanitizedDeploy.cl::get<coins>(md::Deploy::initialDeposit),
        BaseInterface::OP::INITIALIZE,
        $initUln,
        0
    );
    return actions;
}

;; @in_opcode MsglibManager::OP::DEPLOY_CONNECTION
;; @in_md md::Deploy
;; @permissions seeded by caller address
;; @out_actions deploy the connection for this particular oApp path
tuple deployUlnConnection(cell $deploy) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedDeploy = $deploy.md::Deploy::NewWithExtraInfo::sanitize();

    int dstEid = $sanitizedDeploy.cl::get<uint32>(md::Deploy::dstEid);

    throw_if(UlnManager::ERROR::invalidEid, dstEid == 0);

    cell $path = lz::Path::New(
        $storage.cl::get<uint32>(UlnManager::eid),
        getCaller(),
        dstEid,
        $sanitizedDeploy.cl::get<address>(md::Deploy::dstOApp)
    );

    cell $ulnConnection = UlnConnection::New(
        getContractAddress(),
        $path,
        _calculateUlnAddress($storage, dstEid)
    );

    cell $initUlnConnection = $sanitizedDeploy
            .cl::get<objRef>(md::Deploy::extraInfo)
            .md::InitUlnConnection::sanitize()
            .cl::set(md::InitUlnConnection::endpointAddress, _calculateEndpointAddress($storage, dstEid))
            .cl::set(md::InitUlnConnection::channelAddress, _calculateChannelAddress($storage, $path));

    actions~pushAction<deployAndCall>(
        $storage.cl::get<cellRef>(UlnManager::ulnConnectionCode),
        $ulnConnection,
        $sanitizedDeploy.cl::get<coins>(md::Deploy::initialDeposit),
        BaseInterface::OP::INITIALIZE,
        $initUlnConnection,
        0
    );

    return actions;
}

tuple getMsglibInfo(cell $addMsglib) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedAddMsglib = $addMsglib.md::AddMsglib::sanitize();

    int dstEid = $sanitizedAddMsglib.cl::get<uint32>(md::AddMsglib::dstEid);
    throw_if(UlnManager::ERROR::invalidEid, dstEid == 0);

    int ulnAddress = _calculateUlnAddress(
        $storage,
        dstEid
    );

    actions~pushAction<call>(
        getCaller(),
        Endpoint::OP::GET_MSGLIB_INFO_CALLBACK,
        lz::MsglibInfo::New(
            ulnAddress,
            $storage.cl::get<cellRef>(UlnManager::ulnConnectionCode),
            UlnConnection::New(
                getContractAddress(),
                lz::Path::endpointPath(
                    $storage.cl::get<uint32>(UlnManager::eid),
                    dstEid
                ),
                ulnAddress
            )
        )
    );

    return actions;
}

;; @in_opcode UlnManager::OP::SET_DEFAULT_ULN_SEND_CONFIG
tuple setDefaultUlnSendConfig(cell $mdEid) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedMdEid = $mdEid.md::MdEid::sanitize();
    
    cell $UlnSendConfig = $sanitizedMdEid.cl::get<objRef>(md::MdEid::md);

    actions~pushAction<call>(
        _calculateUlnAddress($storage, $sanitizedMdEid.cl::get<uint32>(md::MdEid::eid)),
        Uln::OP::SET_DEFAULT_ULN_SEND_CONFIG,
        $UlnSendConfig
    );

    return actions;
}

;; @in_opcode UlnManager::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG
tuple setDefaultUlnReceiveConfig(cell $mdEid) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedMdEid = $mdEid.md::MdEid::sanitize();
    
    cell $UlnReceiveConfig = $sanitizedMdEid.cl::get<objRef>(md::MdEid::md);

    actions~pushAction<call>(
        _calculateUlnAddress($storage, $sanitizedMdEid.cl::get<uint32>(md::MdEid::eid)),
        Uln::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG,
        $UlnReceiveConfig
    );

    return actions;
}

;; @in_opcode UlnManager::OP::SET_CONNECTION_ULN_CONFIG
tuple setOAppUlnReceiveConfig(cell $mdObj) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedMdObj = $mdObj.md::MdObj::sanitize();

    cell $sendPath = $sanitizedMdObj
        .cl::get<objRef>(md::MdObj::obj)
        .lz::Path::sanitize();

    actions~pushAction<call>(
        _calculateUlnConnectionAddress($storage, $sendPath),
        UlnConnection::OP::SET_OAPP_ULN_RECEIVE_CONFIG,
        $sanitizedMdObj.cl::get<objRef>(md::MdObj::md)
    );

    return actions;
}

;; @in_opcode UlnManager::OP::SET_CONNECTION_ULN_CONFIG
tuple setOAppUlnSendConfig(cell $mdObj) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedMdObj = $mdObj.md::MdObj::sanitize();
    
    cell $sendPath = $sanitizedMdObj
        .cl::get<objRef>(md::MdObj::obj)
        .lz::Path::sanitize();

    actions~pushAction<call>(
        _calculateUlnConnectionAddress($storage, $sendPath),
        UlnConnection::OP::SET_OAPP_ULN_SEND_CONFIG,
        $sanitizedMdObj.cl::get<objRef>(md::MdObj::md)
    );

    return actions;
}

;; @in_opcode UlnManager::OP::REGISTER_WORKER_FEELIB_BYTECODE
tuple registerWorkerFeelibBytecode(cell $ulnWorkerFeelibBytecode) impure inline method_id {
    (cell $storage, tuple actions) = preamble();

    cell $sanitizedUlnWorkerFeelibBytecode = $ulnWorkerFeelibBytecode
        .md::UlnWorkerFeelibBytecode::sanitize();

    cell bytecode = $sanitizedUlnWorkerFeelibBytecode
        .cl::get<cellRef>(md::UlnWorkerFeelibBytecode::bytecode);

    cell $newStorage = $storage
        .cl::nestedDict256::setRef(
            UlnManager::workerFeelibBytecodes,
            bytecode.cl::hash(),
            bytecode
        );

    (_, _, _, int success) = compute_data_size?(
        $newStorage.cl::get<dict256>(UlnManager::workerFeelibBytecodes),
        UlnManager::CONST::MAX_CUMULATIVE_BYTECODE_CELLS
    );

    throw_unless(UlnManager::ERROR::feelibBytecodesExceeded, success);

    setContractStorage($newStorage);

    return actions;
}

tuple addWorkerFeelibToUln(cell $UlnWorkerFeelibInfo) impure inline method_id {
    (cell $storage, tuple actions) = preamble();

    ;; invariant: guarantees that getCaller() == $UlnWorkerFeelibInfo.workerAddress
    cell $sanitizedUlnWorkerFeelibInfo = $UlnWorkerFeelibInfo
        .UlnWorkerFeelibInfo::sanitize()
        .cl::set(UlnWorkerFeelibInfo::workerAddress, getCaller());

    int bytecodeId = $sanitizedUlnWorkerFeelibInfo
        .cl::get<cellRef>(UlnWorkerFeelibInfo::workerFeelibBytecode)
        .cell_hash();

    (_, int bytecodeExists) = $storage
        .cl::nestedDict256::get<cellRef>(UlnManager::workerFeelibBytecodes, bytecodeId);

    throw_unless(UlnManager::ERROR::invalidWorkerInfo, bytecodeExists);

    ;; only admin workers can add to the admin workers list on the uln
    int useAdminSlot = $sanitizedUlnWorkerFeelibInfo.cl::get<bool>(UlnWorkerFeelibInfo::isAdmin);
    if (useAdminSlot) {
        throw_unless(
            UlnManager::ERROR::invalidWorkerInfo,
            AddressList::includes(
                getCaller(),
                $storage.cl::get<cellRef>(UlnManager::adminWorkers).begin_parse()
            )
        );
    }

    actions~pushAction<call>(
        _calculateUlnAddress(
            $storage,
            $sanitizedUlnWorkerFeelibInfo.cl::get<uint32>(UlnWorkerFeelibInfo::dstEid)
        ),
        Uln::OP::UPDATE_WORKER_FEELIB,
        $sanitizedUlnWorkerFeelibInfo
    );

    return actions;
}

tuple setAdminWorkers(cell $setAdminWorkerAddresses) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedSetAdminWorkerAddresses = $setAdminWorkerAddresses.md::SetAdminWorkerAddresses::sanitize();

    cell adminWorkers = $sanitizedSetAdminWorkerAddresses
        .cl::get<cellRef>(md::SetAdminWorkerAddresses::adminWorkers);

    throw_unless(
        UlnManager::ERROR::invalidAdminWorkerList,
        AddressList::isValid(adminWorkers, UlnManager::CONST::MAX_ADMIN_WORKERS)
    );

    setContractStorage(
        $storage.cl::set(UlnManager::adminWorkers, adminWorkers)
    );

    actions~pushAction<event>(
        UlnManager::event::ADMIN_WORKERS_SET,
        $sanitizedSetAdminWorkerAddresses
    );

    return actions;
}

tuple claimTreasuryFees(cell $coinsAmount) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedCoinsAmount = $coinsAmount.md::CoinsAmount::sanitize();

    int claimAmount = $sanitizedCoinsAmount.cl::get<coins>(md::CoinsAmount::amount);
    (int myStateCellCount, int myStateBitCount) = getContractStateSize(
        my_code(),
        getContractStorage()
    );

    int minimumStorageFee = get_storage_fee(
        BASECHAIN,
        UlnManager::CONST::minRentSeconds,
        myStateBitCount,
        myStateCellCount
    );

    ;; Ensure the owner cannot rug the contract by pulling out all the rent
    throw_if(
        UlnManager::ERROR::insufficientBalance,
        (getInitialContractBalance() - storage_fees() - claimAmount) < minimumStorageFee
    );

    actions~pushAction<payment>(getOrigin(), claimAmount, claimAmount);

    return actions;
}

tuple setUlnTreasuryFeeBps(cell $mdEid) impure inline method_id {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedMdEid = $mdEid.md::MdEid::sanitize();

    int ulnAddress = _calculateUlnAddress($storage, $sanitizedMdEid.cl::get<uint32>(md::MdEid::eid));
    cell $treasuryFeeBps = $sanitizedMdEid.cl::get<objRef>(md::MdEid::md);
    actions~pushAction<call>(
        ulnAddress,
        Uln::OP::SET_TREASURY_FEE_BPS,
        $treasuryFeeBps
    );
    return actions;
}

;; This will override an existing tentative owner
;; Becuase we assert that the 'claimOwnership' can't be done by the 'null' address, it means
;; if we want to burn the ownership, we will need to set it to a contract which only has ability to
;; claim, but nothing else. This effectively burns it.
tuple transferOwnership(cell $setAddress) impure inline {
    (cell $storage, tuple actions) = preamble();
    cell $sanitizedSetAddress = $setAddress.md::SetAddress::sanitize();

    setContractStorage(
        $storage.cl::set(
            UlnManager::tentativeOwner,
            $sanitizedSetAddress.cl::get<address>(md::SetAddress::address)
        )
    );

    actions~pushAction<event>(
        UlnManager::event::OWNER_SET_TENTATIVE,
        $sanitizedSetAddress
    );

    return actions;
}

tuple claimOwnership(cell $emptyMd) impure inline {
    (cell $storage, tuple actions) = preamble();

    ;; permissions check guarantees newOwner == $storage.tentativeOwner
    int newOwner = $storage.cl::get<address>(UlnManager::tentativeOwner);

    ;; this should be caught by the permission check, BUT let's be super safe about this
    throw_if(UlnManager::ERROR::nullTentativeOwner, newOwner == NULLADDRESS);

    ;; erase the tentative owner AND set that tentative owner to the actual owner
    setContractStorage(
        $storage
            .cl::set(UlnManager::tentativeOwner, NULLADDRESS)
            .cl::set(
                UlnManager::baseStorage,
                $storage
                    .cl::get<objRef>(UlnManager::baseStorage)
                    .cl::set(BaseStorage::owner, newOwner)
            )
    );

    actions~pushAction<event>(
        UlnManager::event::OWNER_SET,
        md::SetAddress::New(newOwner)
    );

    return actions;
}

(int, int, int) version() impure method_id {
    return (3, 0, 2);
}
