#include "../../../../../../tests/consts.fc";
#include "../../../../../../tests/mocks.fc";

#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";
#include "../../msgdata/UlnWorkerFeelibInfo.fc";

#include "../../../../../classes/msgdata/Deploy.fc";

#include "../../../../../../tests/testMain.fc";
#include "../../../../interfaces.fc";
#include "../../../../../funC++/baseInterface.fc";
#include "../../../../../funC++/classlib.fc";
#include "../../../../../funC++/constants.fc";
#include "../../../../../funC++/stdlib.fc";
#include "../../../../../funC++/txnContext.fc";
#include "../../../../../funC++/utils.fc";
#include "../../../../../funC++/actions/deploy.fc";

slice _testName() { return "ulnManagerUtil"; }

cell baseTest::prepare(tuple args) impure {
    int count = 0;
    cell myDict = cl::dict256::New();
    while (count < 256) {
        count += 1;
        myDict = myDict.cl::dict256::setRef(count, my_code());
    }
    return myDict;
}

(int, slice) calculateCellTreeSize(cell $input) impure {
    (int cells, _, _, int success) = compute_data_size?($input, UlnManager::CONST::MAX_CUMULATIVE_BYTECODE_CELLS);
    return test::shouldBeTrue(success != 0);
}

;; ============================== baseTest::getTests ==============================

tuple baseTest::getTests() impure {
    return unsafeTuple(
        empty_tuple().tpush([calculateCellTreeSize, "calculateCellTreeSize"])
    );
}
