#include "../handler.fc";
#include "../interface.fc";
#include "../../../../../../tests/consts.fc";
#include "../../../../../../tests/mocks.fc";

() _registerMockWorkers(tuple addresses, int friendAddress) impure {
    ;; Register each DVN worker
    int len = addresses.tlen();
    repeat(len) {
        int dvnAddress = addresses~tpop();

        ;; Register the DVN worker
        updateWorkerFeelib(
            MOCK_ULN_WORKER_FEELIB_INFO_WITH_FRIEND(dvnAddress, friendAddress, Uln::CONST::INITIAL_RENT_NANOS)
        );
    }
}

() _registerMockWorkersWithDvnFeeLib(tuple addresses, int friendAddress) impure {
    ;; Register each DVN worker
    int len = addresses.tlen();
    repeat(len) {
        int dvnAddress = addresses~tpop();

        ;; Register the DVN worker
        updateWorkerFeelib(
            MOCK_ULN_DVN_FEELIB_INFO_WITH_FRIEND(dvnAddress, friendAddress, Uln::CONST::INITIAL_RENT_NANOS)
        );
    }
}

() _registerMockWorkersWithExecutorFeeLib(tuple addresses, int friendAddress) impure {
    ;; Register each DVN worker
    int len = addresses.tlen();
    repeat(len) {
        int dvnAddress = addresses~tpop();

        ;; Register the DVN worker
        updateWorkerFeelib(
            MOCK_ULN_EXECUTOR_FEELIB_INFO_WITH_FRIEND(dvnAddress, friendAddress, Uln::CONST::INITIAL_RENT_NANOS)
        );
    }
}

;; Register:
;; - Default price feed
;; - Default required DVN workers
;; - Default optional DVN workers
;; - Default executor
() _registerDefaultUlnWorkers() impure {
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_DEFAULT_PRICE_FEED_STORAGE(),
            DEFAULT_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    _registerMockWorkers(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_DEFAULT_REQUIRED_DVN_ADDRESS(0)
        ),
        DEFAULT_PRICE_FEED_ADDRESS
    );

    _registerMockWorkers(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_DEFAULT_OPTIONAL_DVN_ADDRESS(0)
        ),
        DEFAULT_PRICE_FEED_ADDRESS
    );

    updateWorkerFeelib(
        MOCK_ULN_WORKER_FEELIB_INFO_WITH_FRIEND(
            DEFAULT_EXECUTOR,
            DEFAULT_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

;; Register:
;; - Custom price feed
;; - Custom required DVN workers
;; - Custom optional DVN workers
;; - Custom executor
() _registerCustomUlnWorkers() impure {
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_CUSTOM_PRICE_FEED_STORAGE_DEFAULT(),
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    _registerMockWorkers(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    _registerMockWorkers(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    updateWorkerFeelib(
        MOCK_ULN_EXECUTOR_FEELIB_INFO_WITH_FRIEND(
            CUSTOM_EXECUTOR,
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

() _registerCustomUlnWorkersAllUsingDefaultExecutorFeeLib() impure {
    ;; register price feed
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_CUSTOM_PRICE_FEED_STORAGE_DEFAULT(),
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    ;; register required DVN feelibs
    _registerMockWorkersWithExecutorFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register optional DVN feelibs
    _registerMockWorkersWithExecutorFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register executor feelib
    updateWorkerFeelib(
        MOCK_ULN_EXECUTOR_FEELIB_INFO_WITH_FRIEND(
            CUSTOM_EXECUTOR,
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

() _registerCustomUlnWorkersAllUsingArbExecutorFeeLib() impure {
    ;; register price feed
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_CUSTOM_PRICE_FEED_STORAGE_ARB(),
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    ;; register required DVN feelibs
    _registerMockWorkersWithExecutorFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register optional DVN feelibs
    _registerMockWorkersWithExecutorFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register executor feelib
    updateWorkerFeelib(
        MOCK_ULN_EXECUTOR_FEELIB_INFO_WITH_FRIEND(
            CUSTOM_EXECUTOR,
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

() _registerCustomUlnWorkersAllUsingOpExecutorFeeLib() impure {
    ;; register price feed
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_CUSTOM_PRICE_FEED_STORAGE_OP(),
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    ;; register required DVN feelibs
    _registerMockWorkersWithExecutorFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register optional DVN feelibs
    _registerMockWorkersWithExecutorFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register executor feelib
    updateWorkerFeelib(
        MOCK_ULN_EXECUTOR_FEELIB_INFO_WITH_FRIEND(
            CUSTOM_EXECUTOR,
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

() _registerCustomUlnWorkersAllUsingDefaultDvnFeeLib() impure {
    ;; register price feed
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_CUSTOM_PRICE_FEED_STORAGE_DEFAULT(),
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    ;; register required DVN feelibs
    _registerMockWorkersWithDvnFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register optional DVN feelibs
    _registerMockWorkersWithDvnFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register "executor feelib"
    updateWorkerFeelib(
        MOCK_ULN_DVN_FEELIB_INFO_WITH_FRIEND(
            CUSTOM_EXECUTOR,
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

() _registerCustomUlnWorkersAllUsingArbDvnFeeLib() impure {
    ;; register price feed
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_CUSTOM_PRICE_FEED_STORAGE_ARB(),
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    ;; register required DVN feelibs
    _registerMockWorkersWithDvnFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register optional DVN feelibs
    _registerMockWorkersWithDvnFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register "executor feelib"
    updateWorkerFeelib(
        MOCK_ULN_DVN_FEELIB_INFO_WITH_FRIEND(
            CUSTOM_EXECUTOR,
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

() _registerCustomUlnWorkersAllUsingOpDvnFeeLib() impure {
    ;; register price feed
    updateWorkerFeelib(
        MOCK_PRICE_FEED_WORKER_INFO(
            MOCK_CUSTOM_PRICE_FEED_STORAGE_OP(),
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );

    ;; register required DVN feelibs
    _registerMockWorkersWithDvnFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register optional DVN feelibs
    _registerMockWorkersWithDvnFeeLib(
        MOCK_SEND_DVN_LIST(
            2,
            MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0)
        ),
        CUSTOM_PRICE_FEED_ADDRESS
    );

    ;; register "executor feelib"
    updateWorkerFeelib(
        MOCK_ULN_DVN_FEELIB_INFO_WITH_FRIEND(
            CUSTOM_EXECUTOR,
            CUSTOM_PRICE_FEED_ADDRESS,
            Uln::CONST::INITIAL_RENT_NANOS
        )
    );
}

() _registerDefaultAndCustomUlnWorkers() impure {
    _registerDefaultUlnWorkers();
    _registerCustomUlnWorkers();
}