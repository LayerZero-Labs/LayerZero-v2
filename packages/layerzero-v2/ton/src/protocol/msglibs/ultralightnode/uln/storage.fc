#include "../msgdata/UlnReceiveConfig.fc";
#include "../msgdata/UlnSendConfig.fc";
#include "../../../core/baseStorage.fc";

const int Uln::MaxWorkerFeelibs = 1024;

const int Uln::NAME = "uln"u;

const int Uln::baseStorage = 0;
const int Uln::eid = 1;
const int Uln::dstEid = 2;
const int Uln::defaultUlnReceiveConfig = 3;
const int Uln::defaultUlnSendConfig = 4;

const int Uln::connectionCode = 5;

;; map of address -> object
const int Uln::workerFeelibInfos = 6;

const int Uln::treasuryFeeBps = 7;
const int Uln::remainingWorkerSlots = 8;
const int Uln::remainingAdminWorkerSlots = 9;

;; Note that the default receive and send config can be initialized in the constructor unlike
;; ulnConnection which must be done in initialize due to opt-in semantics
;; @owner ulnManager
cell Uln::New(int owner, int eid, int dstEid) impure method_id {
    return cl::declare(
        Uln::NAME,
        unsafeTuple([
            [cl::t::objRef, BaseStorage::New(owner)],              ;; Uln::baseStorage
            [cl::t::uint32, eid],                                  ;; Uln::eid
            [cl::t::uint32, dstEid],                               ;; Uln::dstEid
            [cl::t::objRef, UlnReceiveConfig::NewWithDefaults()],  ;; Uln::defaultUlnReceiveConfig
            [cl::t::objRef, UlnSendConfig::NewWithDefaults()],     ;; Uln::defaultUlnSendConfig
            [cl::t::cellRef, empty_cell()],                        ;; Uln::connectionCode
            [cl::t::dict256, cl::dict256::New()],                  ;; Uln::workerFeelibInfos
            [cl::t::uint16, 0],                                    ;; Uln::treasuryFeeBps
            [cl::t::uint16, 0],                                    ;; Uln::remainingWorkerSlots
            [cl::t::uint16, 0]                                     ;; Uln::remainingAdminWorkerSlots
        ])
    );
}

;; ============================== Object Getters ==============================

const int Uln::_eidOffset = _HEADER_WIDTH;
const int Uln::_dstEidOffset = Uln::_eidOffset + 32;
const int Uln::_treasuryFeeBpsOffset = Uln::_dstEidOffset + 32;
const int Uln::_remainingWorkerSlotsOffset = Uln::_treasuryFeeBpsOffset + 16;
const int Uln::_remainingAdminWorkerSlotsOffset = Uln::_remainingWorkerSlotsOffset + 16;
const int Uln::_sliceBits = Uln::_remainingAdminWorkerSlotsOffset + 16;

cell Uln::getDefaultUlnReceiveConfig(cell $self) impure inline {
    return $self.cellPreloadRefAt(1);
}

cell Uln::getConnectionCode(cell $self) impure inline {
    return $self.cellPreloadRefAt(2).cellPreloadRefAt(1);
}

cell Uln::getWorkerFeelibInfos(cell $self) impure inline {
    return $self.cellPreloadRefAt(2).cellPreloadRefAt(2);
}

;; ============================== Object Multi-Getters ==============================

;; (owner, defaultUlnSendConfig) 
cell Uln::getDefaultUlnSendConfig(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return selfSlice.preloadRefAt(2).cellPreloadRefAt(0); ;; defaultUlnSendConfig
}

;; (treasuryFeeBps, owner)
(int, int) Uln::getQuoteWorkersInformation(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadRefAt(0).BaseStorage::getOwner(),                   ;; baseStorage.Owner
        selfSlice.preloadUint16At(Uln::_treasuryFeeBpsOffset)               ;; treasuryFeeBps
    );
}

;; ============================== Object Setters ==============================

cell Uln::setWorkerFeelibInfos(cell $self, cell $workerFeelibInfos) impure inline {
    slice selfSlice = $self.begin_parse();

    slice ref2_slice = selfSlice.preloadRefSliceAt(2);
    cell new_ref2 = begin_cell()
        .store_slice(ref2_slice.scutfirst(0, 2))
        .store_ref($workerFeelibInfos)
        .end_cell();

    return begin_cell()
        .store_slice(selfSlice.scutfirst(Uln::_sliceBits, 2))
        .store_ref(new_ref2)
        .end_cell();
}

;; updates the worker feelib info for the given [worker address, new worker feelib info]
;; and returns the new storage
cell Uln::updateWorkerFeelibInfos(cell $self, int workerAddress, cell $workerFeelibInfo) impure inline {
    slice selfSlice = $self.begin_parse();

    slice ref2_slice = selfSlice.preloadRefSliceAt(2);
    cell $workerFeelibInfos = ref2_slice
        .preloadRefAt(2)
        .cl::dict256::setRef(workerAddress, $workerFeelibInfo);

    cell new_ref2 = begin_cell()
        .store_slice(ref2_slice.scutfirst(0, 2))
        .store_ref($workerFeelibInfos)
        .end_cell();

    return begin_cell()
        .store_slice(selfSlice.scutfirst(Uln::_sliceBits, 2))
        .store_ref(new_ref2)
        .end_cell();
}
