#include "testutil.fc";
#include "../handler.fc";
#include "../interface.fc";
#include "../../msgdata/UlnSend.fc";
#include "../../msgdata/UlnSendConfig.fc";
#include "../../msgdata/UlnWorkerFeelibEvents.fc";

#include "../../../../../../tests/consts.fc";
#include "../../../../../../tests/baseContractTest.fc";
#include "../../../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../../../tests/testMain.fc";
#include "../../../../interfaces.fc";
#include "../../../../../funC++/utils.fc";
#include "../../../../../../tests/mocks.fc";
#include "../../../../../classes/msgdata/MdAddress.fc";
#include "../../../../../classes/msgdata/MdObj.fc";
#include "../../../../../funC++/actions/utils.fc";

#include "../../../../channel/interface.fc";
#include "../../../../../funC++/actions/call.fc";

#include "../../workerFeeLibs/executorFeeLib/handler.fc";
#include "../../../../../funC++/classlib.fc";
#include "../../../../../funC++/constants.fc";
#include "../../../../../classes/lz/Packet.fc";
#include "../../../../../classes/msgdata/LzSend.fc";

#include "../../workerFeeLibs/priceFeedFeeLib/optimism/handler.fc";

slice _testName() { return "ulnSend"; }

() _createInitializedStorage() impure {
    initialize(
        md::InitUln::New(
            MOCK_ULN_CONNECTION_CODE(),
            TREASURY_FEE_BPS
        )
    );
}

cell createContractStorage() impure {
    setContractStorage(Uln::New(ULN_MANAGER_ADDRESS, SRC_EID, DST_EID));
    return getContractStorage();
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}

;;; ===============================TESTS=========================================

(int, slice) ulnSendWithExecFeeLib::success::basic(cell $storage) impure {
    _registerCustomUlnWorkersAllUsingOpExecutorFeeLib();

    tuple dvnPayees = unsafeTuple([
        [MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(1), CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE],
        [MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0), CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE],
        [MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(1), CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE],
        [MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0), CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE]
    ]);

    cell dvnPaidEvent = DvnFeesPaidEvent::New(
        MOCK_CUSTOM_REQUIRED_DVN_CELL(2, 0),
        MOCK_CUSTOM_OPTIONAL_DVN_CELL(2, 0),
        serializePayees(dvnPayees)
    );

    cell executorPaidEvent = ExecutorFeePaidEvent::New(CUSTOM_EXECUTOR, CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE);

    int totalWorkerFee = (CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE * 5);
    int treasuryFee = totalWorkerFee * TREASURY_FEE_BPS / 10000;

    tuple allPayees = dvnPayees
        .tpush([CUSTOM_EXECUTOR, CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE])
        .tpush([getOwner(), treasuryFee]);

    return test::handler::shouldPass(
        ulnSend,
        MOCK_ULN_SEND(),
        unsafeTuple([
            0,
            _newAction<call>(
                CHANNEL_ADDRESS,
                Channel::OP::MSGLIB_SEND_CALLBACK,
                md::MsglibSendCallback::New(
                    5 * CUSTOM_EXECUTOR_OP_FEELIB_NATIVE_FEE + treasuryFee,
                    0,
                    MOCK_LZ_SEND(),
                    BytesEncoder::build<PacketV1>(MOCK_NONCELESS_PACKET()).BytesEncoder::serialize(),
                    serializePayees(allPayees),
                    PacketV1::nonceOffsetBytes,
                    PacketV1::nonceBytes,
                    PacketV1::guidOffsetBytes,
                    PacketV1::guidBytes,
                    UlnEvents::New(
                        cl::nullObject(),
                        dvnPaidEvent,
                        executorPaidEvent
                    ),
                    Channel::NO_ERROR
                )
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

(int, slice) ulnSendWithExecFeeLib::revert::noLzReceiveValueToV1(cell $storage) impure {
    _registerCustomUlnWorkersAllUsingDefaultExecutorFeeLib();

    cell $mockV1Packet = MOCK_NONCELESS_PACKET()
        .cl::set(lz::Packet::path, MOCK_V1_SEND_PATH());

    cell $mockV1LzSend = md::LzSend::New(
        NATIVE_FEE,
        ZRO_FEE,
        MOCK_EXTRA_OPTIONS_V1(),
        MOCK_ENFORCED_OPTIONS_V1(),
        $mockV1Packet,
        MOCK_CALLBACK_DATA()
    )
        .cl::set(md::LzSend::sendRequestId, 0)
        .cl::set(md::LzSend::sendMsglibManager, SEND_MSGLIB_MANAGER_ADDRESS)
        .cl::set(md::LzSend::sendMsglib, SEND_MSGLIB_ADDRESS)
        .cl::set(md::LzSend::sendMsglibConnection, SEND_MSGLIB_CONNECTION_ADDRESS);

    cell $ulnSend = md::UlnSend::New(
        $mockV1LzSend,
        MOCK_CUSTOM_ULN_SEND_CONFIG(),
        UlnConnection::New(ULN_MANAGER_ADDRESS, MOCK_SEND_PATH(), ULN_ADDRESS),
        CHANNEL_ADDRESS
    );

    return test::handler::shouldPass(
        ulnSend,
        $ulnSend,
        unsafeTuple([
            0,
            _newAction<call>(
                CHANNEL_ADDRESS,
                Channel::OP::MSGLIB_SEND_CALLBACK,
                _failedMsglibSendCallback($mockV1LzSend)
            )
        ]),
        getContractStorage(),
        txnContext
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([ulnSendWithExecFeeLib::success::basic, "ulnSendWithExecFeeLib::success::basic"])
        .tpush([ulnSendWithExecFeeLib::revert::noLzReceiveValueToV1, "ulnSendWithExecFeeLib::revert::noLzReceiveValueToV1"])
    ;
}
