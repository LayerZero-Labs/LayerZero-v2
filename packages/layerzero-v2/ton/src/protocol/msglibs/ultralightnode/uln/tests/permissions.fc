#include "testutil.fc";
#include "../handler.fc";
#include "../interface.fc";
#include "../storage.fc";

#include "../../../../../../tests/consts.fc";
#include "../../../../../../tests/baseContractTest.fc";
#include "../../../../../../tests/protocolStorageTestUtils.fc";
#include "../../../../../../tests/testMain.fc";
#include "../../../../interfaces.fc";
#include "../../../../../funC++/classlib.fc";
#include "../../../../../funC++/constants.fc";
#include "../../../../../funC++/utils.fc";
#include "../../../../../../tests/mocks.fc";
#include "../../msgdata/Attestation.fc";
#include "../../msgdata/RentRefill.fc";
#include "../../msgdata/TreasuryFeeBps.fc";
#include "../../msgdata/UlnReceiveConfig.fc";
#include "../../../../../funC++/stdlib.fc";
#include "../../../../../classes/msgdata/MdAddress.fc";
#include "../../../../../classes/msgdata/MdObj.fc";
#include "../../../../../funC++/actions/utils.fc";

slice _testName() { return "ulnPermissions"; }

() _createInitializedStorage() impure {
    initialize(
        md::InitUln::New(
            MOCK_ULN_CONNECTION_CODE(),
            TREASURY_FEE_BPS
        )
    );
}

cell createContractStorage() impure {
    cell $obj = Uln::New(ULN_MANAGER_ADDRESS, SRC_EID, DST_EID);
    setContractStorage($obj);
    return $obj;
}

int _callCheckPermissions(int op, cell $md) impure {
    checkPermissions(op, $md);
    return 0;
}


;;; ===============================TESTS=========================================

(int, slice) checkPermissions::ulnSend::success::basic(cell $storage) impure {
    cell ulnConnectionInitStorage = UlnConnection::New(
        getOwner(),
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    );
    int ulnConnectionAddress = computeContractAddress(
        ulnConnectionInitStorage,
        MOCK_ULN_CONNECTION_CODE()
    );

    spoofCaller(ulnConnectionAddress);

    return test::permissions::shouldPass(
        Uln::OP::ULN_SEND,
        MOCK_ULN_SEND()
    );
}

(int, slice) checkPermissions::ulnSend::revert::wrongUlnManager(cell $storage) impure {
    cell $maliciousUlnConnectionInitStorage = UlnConnection::New(
        ATTACKER_ADDRESS,
        MOCK_SEND_PATH(),
        ULN_ADDRESS
    );
    int ulnConnectionAddress = computeContractAddress(
        $maliciousUlnConnectionInitStorage,
        MOCK_ULN_CONNECTION_CODE()
    );

    ;; the caller is a valid Uln connection but owned by a malicious attacker manager
    spoofCaller(ulnConnectionAddress);

    return test::permissions::shouldFail(
        Uln::OP::ULN_SEND,
        MOCK_ULN_SEND()
    );
}

(int, slice) checkPermissions::ulnSend::revert::notUlnChannel(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Uln::OP::ULN_SEND,
        MOCK_ULN_SEND()
    );
}

(int, slice) checkPermissions::ulnCommitVerification::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);

    return test::permissions::shouldPass(
        Uln::OP::ULN_COMMIT_PACKET,
        md::MdAddress::New(
            MOCK_RECEIVE_PACKET(),
            ULN_CONNECTION_ADDRESS
        )
    );
}

(int, slice) checkPermissions::ulnVerify::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);

    return test::permissions::shouldPass(
        Uln::OP::ULN_VERIFY,
        md::MdAddress::New(
            MOCK_ULN_VERIFICATION(DEFAULT_CONFIRMATIONS),
            ULN_CONNECTION_ADDRESS
        )
    );
}

(int, slice) checkPermissions::ulnQuote::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);

    return test::permissions::shouldPass(
        Uln::OP::ULN_QUOTE,
        MOCK_ULN_SEND()
    );
}

(int, slice) checkPermissions::deregisterWorkerFeelib::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::DEREGISTER_WORKER_FEELIB,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::collectWorkerRent::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::COLLECT_WORKER_RENT,
        md::SetAddress::New(ARBITRARY_ADDRESS)
    );
}

(int, slice) checkPermissions::setWorkerFeelibStorage::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::SET_WORKER_FEELIB_STORAGE,
        cl::nullObject()
    );
}

(int, slice) checkPermissions::setDefaultUlnReceiveConfig::success::basic(cell $storage) impure {
    spoofCaller(ULN_MANAGER_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG,
        UlnReceiveConfig::NewWithDefaults()
    );
}

(int, slice) checkPermissions::setDefaultUlnReceiveConfig::revert::notManager(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Uln::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG,
        UlnReceiveConfig::NewWithDefaults()
    );
}

(int, slice) checkPermissions::setDefaultUlnSendConfig::success::basic(cell $storage) impure {
    spoofCaller(ULN_MANAGER_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::SET_DEFAULT_ULN_SEND_CONFIG,
        UlnSendConfig::NewWithDefaults()
    );
}

(int, slice) checkPermissions::setDefaultUlnSendConfig::revert::notManager(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Uln::OP::SET_DEFAULT_ULN_SEND_CONFIG,
        UlnSendConfig::NewWithDefaults()
    );
}

(int, slice) checkPermissions::updateWorkerFeelib::success::basic(cell $storage) impure {
    spoofCaller(ULN_MANAGER_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::UPDATE_WORKER_FEELIB,
        MOCK_ULN_WORKER_FEELIB_INFO(ARBITRARY_ADDRESS, 0)
    );
}

(int, slice) checkPermissions::updateWorkerFeelib::revert::notUlnManager(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);  
    return test::permissions::shouldFail(
        Uln::OP::UPDATE_WORKER_FEELIB,
        MOCK_ULN_WORKER_FEELIB_INFO(ARBITRARY_ADDRESS, 0)
    );
}

(int, slice) checkPermissions::setTreasuryFeeBps::success::basic(cell $storage) impure {
    spoofCaller(ULN_MANAGER_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::SET_TREASURY_FEE_BPS,
        md::TreasuryFeeBps::New(TREASURY_FEE_BPS)
    );
}

(int, slice) checkPermissions::setTreasuryFeeBps::revert::notUlnManager(cell $storage) impure {
    spoofCaller(ATTACKER_ADDRESS);
    return test::permissions::shouldFail(
        Uln::OP::SET_TREASURY_FEE_BPS,
        md::TreasuryFeeBps::New(TREASURY_FEE_BPS)
    );
}

(int, slice) checkPermissions::refillWorkerRent::success::basic(cell $storage) impure {
    spoofCaller(ARBITRARY_ADDRESS);
    return test::permissions::shouldPass(
        Uln::OP::REFILL_WORKER_RENT,
        md::RentRefill::New(ARBITRARY_ADDRESS, RENT_NANOS)
    );
}

(int, slice) checkPermissions::garbageCollectInvalidAttestations::success::basic(cell $storage) impure {
    return test::permissions::shouldPass(
        Uln::OP::GC_ATTESTATIONS,
        md::MdAddress::New(MOCK_SEND_PATH(), DST_EID)
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([checkPermissions::ulnSend::success::basic, "checkPermissions::ulnSend::success::basic"])
        .tpush([checkPermissions::ulnSend::revert::wrongUlnManager, "checkPermissions::ulnSend::revert::wrongUlnManager"])
        .tpush([checkPermissions::ulnSend::revert::notUlnChannel, "checkPermissions::ulnSend::revert::notUlnChannel"])
        .tpush([checkPermissions::ulnVerify::success::basic, "checkPermissions::ulnVerify::success::basic"])
        .tpush([checkPermissions::ulnQuote::success::basic, "checkPermissions::ulnQuote::success::basic"])
        .tpush([checkPermissions::ulnCommitVerification::success::basic, "checkPermissions::ulnCommitVerification::success::basic"])
        .tpush([checkPermissions::deregisterWorkerFeelib::success::basic, "checkPermissions::deregisterWorkerFeelib::success::basic"])
        .tpush([checkPermissions::collectWorkerRent::success::basic, "checkPermissions::collectWorkerRent::success::basic"])
        .tpush([checkPermissions::setWorkerFeelibStorage::success::basic, "checkPermissions::setWorkerFeelibStorage::success::basic"])
        .tpush([checkPermissions::setDefaultUlnReceiveConfig::success::basic, "checkPermissions::setDefaultUlnReceiveConfig::success::basic"])
        .tpush([checkPermissions::setDefaultUlnReceiveConfig::revert::notManager, "checkPermissions::setDefaultUlnReceiveConfig::revert::notManager"])
        .tpush([checkPermissions::setDefaultUlnSendConfig::success::basic, "checkPermissions::setDefaultUlnSendConfig::success::basic"])
        .tpush([checkPermissions::setDefaultUlnSendConfig::revert::notManager, "checkPermissions::setDefaultUlnSendConfig::revert::notManager"])
        .tpush([checkPermissions::updateWorkerFeelib::success::basic, "checkPermissions::updateWorkerFeelib::success::basic"])
        .tpush([checkPermissions::updateWorkerFeelib::revert::notUlnManager, "checkPermissions::updateWorkerFeelib::revert::notUlnManager"])
        .tpush([checkPermissions::setTreasuryFeeBps::success::basic, "checkPermissions::setTreasuryFeeBps::success::basic"])
        .tpush([checkPermissions::setTreasuryFeeBps::revert::notUlnManager, "checkPermissions::setTreasuryFeeBps::revert::notUlnManager"])
        .tpush([checkPermissions::refillWorkerRent::success::basic, "checkPermissions::refillWorkerRent::success::basic"])
        .tpush([checkPermissions::garbageCollectInvalidAttestations::success::basic, "checkPermissions::garbageCollectInvalidAttestations::success::basic"])
    ;
}