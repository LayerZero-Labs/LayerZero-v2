#include "../../interface.fc"; ;; msglib interface
#include "../../../core/abstract/protocolMain.fc";

#include "handler.fc";
#include "interface.fc";

tuple _executeOpcode(int op, cell $md) impure {
    if (op == Uln::OP::ULN_SEND) {
        return ulnSend($md);
    } elseif (op == Uln::OP::ULN_COMMIT_PACKET) {
        return ulnCommitPacket($md);
    } elseif (op == Uln::OP::ULN_VERIFY) {
        return ulnVerify($md);
    } elseif (op == Uln::OP::ULN_QUOTE) {
        return ulnQuote($md);
    } elseif (op == Uln::OP::UPDATE_WORKER_FEELIB) {
        return updateWorkerFeelib($md);
    } elseif (op == Uln::OP::DEREGISTER_WORKER_FEELIB) {
        return deregisterWorkerFeelib($md);
    } elseif (op == Uln::OP::SET_WORKER_FEELIB_STORAGE) {
        return setWorkerFeelibStorage($md);
    } elseif (op == Uln::OP::COLLECT_WORKER_RENT) {
        return collectWorkerRent($md);
    } elseif (op == Uln::OP::GC_ATTESTATIONS) {
        return garbageCollectInvalidAttestations($md);
    } elseif (op == Uln::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG) {
        return setDefaultUlnReceiveConfig($md);
    } elseif (op == Uln::OP::SET_DEFAULT_ULN_SEND_CONFIG) {
        return setDefaultUlnSendConfig($md);
    } elseif (op == Uln::OP::SET_TREASURY_FEE_BPS) {
        return setTreasuryFeeBps($md);
    } elseif (op == Uln::OP::REFILL_WORKER_RENT) {
        return refillWorkerRent($md);
    }
    throw(BaseInterface::ERROR::invalidOpcode);
    return null();
}
