#include "storage.fc";

;; only-owner (manager)
const int Uln::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG = "Uln::OP::SET_DEFAULT_ULN_RECEIVE_CONFIG"c;
const int Uln::OP::SET_DEFAULT_ULN_SEND_CONFIG = "Uln::OP::SET_DEFAULT_ULN_SEND_CONFIG"c;

const int Uln::OP::SET_OAPP_ULN_RECEIVE_CONFIG = "Uln::OP::SET_OAPP_ULN_RECEIVE_CONFIG"c;
const int Uln::OP::SET_OAPP_ULN_SEND_CONFIG = "Uln::OP::SET_OAPP_ULN_SEND_CONFIG"c;

const int Uln::OP::UPDATE_WORKER_FEELIB = "Uln::OP::UPDATE_WORKER_FEELIB"c;
const int Uln::OP::REFILL_WORKER_RENT = "Uln::OP::REFILL_WORKER_RENT"c;

const int Uln::OP::SET_TREASURY_FEE_BPS = "Uln::OP::SET_TREASURY_FEE_BPS"c;

;; Remove a worker from this ULN
;; only the admin of the registered worker
const int Uln::OP::DEREGISTER_WORKER_FEELIB = "Uln::OP::DEREGISTER_WORKER_FEELIB"c;

const int Uln::OP::COLLECT_WORKER_RENT = "Uln::OP::COLLECT_WORKER_RENT"c;
const int Uln::OP::GC_ATTESTATIONS = "Uln::OP::GC_ATTESTATIONS"c;

;; Set a worker configuration
;; only-owner (manager)
const int Uln::OP::SET_WORKER_FEELIB_STORAGE = "Uln::OP::SET_WORKER_FEELIB_STORAGE"c;

const int Uln::OP::ULN_COMMIT_PACKET = "Uln::OP::ULN_COMMIT_PACKET"c;
const int Uln::OP::ULN_VERIFY = "Uln::OP::ULN_VERIFY"c;

const int Uln::OP::ULN_QUOTE = "Uln::OP::ULN_QUOTE"c;
const int Uln::OP::ULN_SEND = "Uln::OP::ULN_SEND"c;

const int Uln::OP::SET_WORKER_FEELIB_STORAGE_CALLBACK = "Uln::OP::SET_WORKER_FEELIB_STORAGE_CALLBACK"c;

const int Uln::CONST::ADMIN_WORKER_SLOTS = 200;

const int Uln::ERROR::notUlnConnection = 224;
const int Uln::ERROR::insufficientRent = 225;
const int Uln::ERROR::nonexistentWorker = 226;
const int Uln::ERROR::invalidTimestamp = 227;
const int Uln::ERROR::invalidWorkerStorage = 228;
const int Uln::ERROR::invalidTreasuryFeeBps = 229;
const int UlnWorker::state::active = 1;

;; this will overflow 256-bit number after 10^64 years
const int Uln::CONST::RENT_NANOS_PER_SECOND = 100 * 1000;
const int Uln::CONST::INITIAL_RENT_NANOS = 3600 * 24 * 30 * Uln::CONST::RENT_NANOS_PER_SECOND;

const int Uln::event::ULN_WORKER_REGISTERED = "Uln::event::ULN_WRKR_REGISTRD"u;
const int Uln::event::ULN_WORKER_SLOTS_FULL = "Uln::event::ULN_WRKR_SLOTS_FULL"u;
const int Uln::event::ULN_WORKER_DEREGISTERED = "Uln::event::ULN_WRKR_DEREGISTRD"u;
const int Uln::event::ULN_WORKER_EVICTED = "Uln::event::ULN_WORKER_EVICTED"u;
const int Uln::event::ULN_COLLECT_WORKER_RENT = "Uln::event::ULN_COLLECT_WRKR_RNT"u;
const int Uln::event::ULN_WORKER_STORAGE_SET = "Uln::event::ULN_WRKR_STRG_SET"u;
const int Uln::event::ULN_WORKER_RENT_REFILLED = "Uln::event::ULN_WRKR_RNT_REFILL"u;

const int Uln::event::ULN_DEFAULT_SEND_CONFIG_SET = "Uln::event::ULN_DFLT_SND_CFG_SET"u;
const int Uln::event::ULN_DEFAULT_RECEIVE_CONFIG_SET = "Uln::event::ULN_DFLT_REC_CFG_SET"u;
const int Uln::event::ULN_TREASURY_FEE_BPS_SET = "Uln::event::ULN_TRSR_FEE_BPS_SET"u;

;; This error code represents a byte flag in a return value, not an actual error.
const int Uln::ErrorCode::WORKER_QUOTE_FAILED = "Uln::ErrorCode::WORKER_QUOTE_FAILED"c & 0xff;

const int Uln::WorkerFeelibInfo::MaxCells = 12;