#include "../../../../funC++/classlib.fc";

;; required storage name
const int md::UlnSend::NAME = "UlnSend"u;

;; field names
const int md::UlnSend::lzSend = 0;
const int md::UlnSend::customUlnSendConfig = 1;
const int md::UlnSend::connectionInitialStorage = 2;
const int md::UlnSend::forwardingAddress = 3;

cell md::UlnSend::New(
    cell $lzSend,
    cell $customUlnSendConfig,
    cell $connectionInitialStorage,
    int forwardingAddress
) impure inline method_id {
    return cl::declare(
        md::UlnSend::NAME,
        unsafeTuple([
            [cl::t::objRef, $lzSend],                   ;; md::UlnSend::lzSend
            [cl::t::objRef, $customUlnSendConfig],      ;; md::UlnSend::customUlnSendConfig
            [cl::t::objRef, $connectionInitialStorage], ;; md::UlnSend::connectionInitialStorage
            [cl::t::address, forwardingAddress]         ;; md::UlnSend::forwardingAddress
        ])
    );
}

;; ==================================== Object Builders =============================

const int md::UlnSend::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 4);
const int md::UlnSend::_headerFillerBits = _HEADER_WIDTH - md::UlnSend::_headerInfoBits;
const int md::UlnSend::_headerInfo = 113547385374824943747209776028946924923;

cell md::UlnSend::build(
    cell $lzSend,
    cell $customUlnSendConfig,
    cell $connectionInitialStorage,
    int forwardingAddress
) impure inline method_id {
    return begin_cell()
        .store_uint(md::UlnSend::_headerInfo, md::UlnSend::_headerInfoBits)   ;; header info
        .store_ones(md::UlnSend::_headerFillerBits)                           ;; header filler
        .store_uint256(forwardingAddress)                                     ;; numerical field
        .store_ref($lzSend)                                                   ;; refs[0]
        .store_ref($customUlnSendConfig)                                      ;; refs[1]
        .store_ref(
            begin_cell()
                .store_ref($connectionInitialStorage)                         ;; refs[2]
                .end_cell()
        )
        .end_cell();
}


;; ==================================== Object Getters =============================

const int md::UlnSend::_forwardingAddressOffset = _HEADER_WIDTH;

cell md::UlnSend::getConnectionInitialStorage(cell $self) impure inline {
    return $self.cellPreloadRefAt(2).cellPreloadRefAt(0);
}

int md::UlnSend::getForwardingAddress(cell $self) impure inline {
    return $self.cellPreloadAddressAt(md::UlnSend::_forwardingAddressOffset);
}

;; ==================================== Object Multi-Getters =============================

(cell, cell) md::UlnSend::getLzSendAndCustomUlnSendConfig(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice~load_ref(),
        selfSlice~load_ref()
    );
}

