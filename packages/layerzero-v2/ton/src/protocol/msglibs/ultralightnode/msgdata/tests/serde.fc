#include "../../../../../../tests/baseSerdeTest.fc";
#include "../../../../../../tests/mocks.fc";
#include "../../../../../funC++/classlib.fc";

#include "../UlnSend.fc";
#include "../DvnFeesPaidEvent.fc";
#include "../ExecutorFeePaidEvent.fc";
#include "../InitUlnConnection.fc";
#include "../InitUln.fc";
#include "../SetAdminWorkerAddresses.fc";
#include "../UlnEvents.fc";
#include "../UlnReceiveConfig.fc";
#include "../UlnVerification.fc";
#include "../UlnWorkerFeelibInfo.fc";
#include "../VerificationStatus.fc";
#include "../../../../../funC++/stdlib.fc";
#include "../../../../../funC++/testutils.fc";
;;; ===============================INTERFACE FUNCTIONS===========================

slice _testName() { return "Uln Msgdata Serde"; }

;;; ===============================TESTS=========================================

;; - Attestation: Has 1 multi-getter
(int, slice) Serde::lz::Attestation::deserialize(cell $unused) impure {
    cell $attestation = MOCK_ATTESTATION(12);

    (int hash, int confirmations) = lz::Attestation::deserialize($attestation);

    return test::multiget::equal(
        $attestation,
        unsafeTuple([lz::Attestation::hash, lz::Attestation::confirmations]),
        unsafeTuple([hash, confirmations])
    );
}

;; - DvnFeesPaidEvent: Has 1 builder
(int, slice) Serde::DvnFeesPaidEvent::build(cell $unused) impure {
    cell requiredDVNs = _buildSendDvnListCell(1, CUSTOM_REQUIRED_DVN0_ADDRESS, false);
    cell optionalDVNs = _buildSendDvnListCell(1, CUSTOM_OPTIONAL_DVN0_ADDRESS, false);
    cell serializedPayees = serializePayees(unsafeTuple([[WORKER_ADDRESS, NATIVE_FEE]]));

    return test::build::equal(
        DvnFeesPaidEvent::New(requiredDVNs, optionalDVNs, serializedPayees),
        DvnFeesPaidEvent::build(requiredDVNs, optionalDVNs, serializedPayees)
    );
}

;; - ExecutorFeePaidEvent: Has 1 builder
(int, slice) Serde::ExecutorFeePaidEvent::build(cell $unused) impure {
    return test::build::equal(
        ExecutorFeePaidEvent::New(EXECUTOR, MOCK_FEE),
        ExecutorFeePaidEvent::build(EXECUTOR, MOCK_FEE)
    );
}

;; - InitUln: Has 1 sanitize
(int, slice) Serde::InitUln::sanitize(cell $unused) impure {
    cell $initUln = md::InitUln::New(MOCK_ULN_CONNECTION_CODE(), TREASURY_FEE_BPS);

    cell $sanitizedInitUln = md::InitUln::sanitize(_dupWithGarbage($initUln));

    return test::build::equal($initUln, $sanitizedInitUln);
}

;; - InitUlnConnection: Has 1 sanitize
(int, slice) Serde::InitUlnConnection::sanitize(cell $unused) impure {
    cell $initUlnConnection = md::InitUlnConnection::New(
        MOCK_CUSTOM_ULN_SEND_CONFIG(),
        MOCK_CUSTOM_ULN_RECEIVE_CONFIG(1, 1, 1),
        ENDPOINT_ADDRESS,
        CHANNEL_ADDRESS
    );

    cell $sanitizedInitUlnConnection = md::InitUlnConnection::sanitize(
       _dupWithGarbage($initUlnConnection)
    );

    return test::build::equal(
        $initUlnConnection,
        $sanitizedInitUlnConnection
    );
}

;; - SetAdminWorkerAddresses: Has 1 sanitize
(int, slice) Serde::SetAdminWorkerAddresses::sanitize(cell $unused) impure {
    cell $setAdminWorkerAddresses = md::SetAdminWorkerAddresses::New(
        MOCK_ADMIN_WORKER_LIST()
    );

    cell $sanitizedSetAdminWorkerAddresses = md::SetAdminWorkerAddresses::sanitize(
        _dupWithGarbage($setAdminWorkerAddresses)
    );

    return test::build::equal(
        $setAdminWorkerAddresses,
        $sanitizedSetAdminWorkerAddresses
    );
}

;; - UlnEvents: Has 1 builder
(int, slice) Serde::md::UlnEvents::build(cell $unused) impure {
    tuple dvnPayees = unsafeTuple([
        [MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(1), CUSTOM_DVN_DEFAULT_FEELIB_NATIVE_FEE],
        [MOCK_CUSTOM_REQUIRED_DVN_ADDRESS(0), CUSTOM_DVN_DEFAULT_FEELIB_NATIVE_FEE],
        [MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(1), CUSTOM_DVN_DEFAULT_FEELIB_NATIVE_FEE],
        [MOCK_CUSTOM_OPTIONAL_DVN_ADDRESS(0), CUSTOM_DVN_DEFAULT_FEELIB_NATIVE_FEE]
    ]);

    cell dvnPaidEvent = DvnFeesPaidEvent::New(
        MOCK_CUSTOM_REQUIRED_DVN_CELL(2, 0),
        MOCK_CUSTOM_OPTIONAL_DVN_CELL(2, 0),
        serializePayees(dvnPayees)
    );

    cell executorPaidEvent = ExecutorFeePaidEvent::New(CUSTOM_EXECUTOR, CUSTOM_DVN_DEFAULT_FEELIB_NATIVE_FEE);

    return test::build::equal(
        UlnEvents::New(cl::nullObject(), dvnPaidEvent, executorPaidEvent),
        UlnEvents::build(cl::nullObject(), dvnPaidEvent, executorPaidEvent)
    );
}

;; - UlnReceiveConfig: Has 4 getters
;;                     Has 4 multi-getters
;;                     Has 1 sanitize
(int, slice) Serde::UlnReceiveConfig::getMinCommitPacketGas(cell $unused) impure {
    return test::getData::equal(
        MOCK_DEFAULT_ULN_RECEIVE_CONFIG(),
        UlnReceiveConfig::getMinCommitPacketGas,
        UlnReceiveConfig::minCommitPacketGas
    );
}

(int, slice) Serde::UlnReceiveConfig::getConfirmationsNull(cell $unused) impure {
    return test::getBool::equal(
        MOCK_DEFAULT_ULN_RECEIVE_CONFIG(),
        UlnReceiveConfig::getConfirmationsNull,
        UlnReceiveConfig::confirmationsNull
    );
}

(int, slice) Serde::UlnReceiveConfig::getConfirmations(cell $unused) impure {
    return test::getData::equal(
        MOCK_DEFAULT_ULN_RECEIVE_CONFIG(),
        UlnReceiveConfig::getConfirmations,
        UlnReceiveConfig::confirmations
    );
}

(int, slice) Serde::UlnReceiveConfig::getOptionalDVNThreshold(cell $unused) impure {
    return test::getData::equal(
        MOCK_DEFAULT_ULN_RECEIVE_CONFIG(),
        UlnReceiveConfig::getOptionalDVNThreshold,
        UlnReceiveConfig::optionalDVNThreshold
    );
}

(int, slice) Serde::UlnReceiveConfig::getRequiredDVNsAndNull(cell $unused) impure {
    cell $config = MOCK_DEFAULT_ULN_RECEIVE_CONFIG();

    (
        int optimizedNull, 
        cell optimizedDVNs
    ) = UlnReceiveConfig::getRequiredDVNsAndNull($config);

    return test::multiget::equal(
        $config,
        unsafeTuple([UlnReceiveConfig::requiredDVNsNull, UlnReceiveConfig::requiredDVNs]),
        unsafeTuple([optimizedNull, optimizedDVNs])
    );
}

(int, slice) Serde::UlnReceiveConfig::getOptionalDVNsAndNull(cell $unused) impure {
    cell $config = MOCK_DEFAULT_ULN_RECEIVE_CONFIG();

    (
        int optimizedNull, 
        cell optimizedDVNs
    ) = UlnReceiveConfig::getOptionalDVNsAndNull($config);

    return test::multiget::equal(
        $config,
        unsafeTuple([UlnReceiveConfig::optionalDVNsNull, UlnReceiveConfig::optionalDVNs]),
        unsafeTuple([optimizedNull, optimizedDVNs])
    );
}

(int, slice) Serde::UlnReceiveConfig::getRequiredAndOptionalDVNsAndNull(cell $unused) impure {
    cell $config = MOCK_DEFAULT_ULN_RECEIVE_CONFIG();

    (
        int optimizedRequiredNull, 
        cell optimizedRequiredDVNs, 
        int optimizedOptionalNull, 
        cell optimizedOptionalDVNs
    ) = UlnReceiveConfig::getRequiredAndOptionalDVNsAndNull($config);

    return test::multiget::equal(
        $config,
        unsafeTuple([UlnReceiveConfig::requiredDVNsNull, UlnReceiveConfig::requiredDVNs, UlnReceiveConfig::optionalDVNsNull, UlnReceiveConfig::optionalDVNs]),
        unsafeTuple([optimizedRequiredNull, optimizedRequiredDVNs, optimizedOptionalNull, optimizedOptionalDVNs])
    );
}

(int, slice) Serde::UlnReceiveConfig::getCommitInfo(cell $unused) impure {
    cell $config = MOCK_DEFAULT_ULN_RECEIVE_CONFIG();

    (
        int optimizedMinCommitPacketGasNull, 
        int optimizedMinCommitPacketGas, 
        int optimizedOptionalDVNsNull, 
        int optimizedOptionalDVNThreshold
    ) = UlnReceiveConfig::getCommitInfo($config);

    return test::multiget::equal(
        $config,
        unsafeTuple([
            UlnReceiveConfig::minCommitPacketGasNull,
            UlnReceiveConfig::minCommitPacketGas,
            UlnReceiveConfig::optionalDVNsNull,
            UlnReceiveConfig::optionalDVNThreshold
        ]),
        unsafeTuple([
            optimizedMinCommitPacketGasNull, 
            optimizedMinCommitPacketGas, 
            optimizedOptionalDVNsNull, 
            optimizedOptionalDVNThreshold
        ])
    );
}

(int, slice) Sedre::UlnReceiveConfig::sanitize(cell $unused) impure {
    cell $ulnReceiveConfig = MOCK_DEFAULT_ULN_RECEIVE_CONFIG();

    cell $sanitizedUlnReceiveConfig = UlnReceiveConfig::sanitize(
        _dupWithGarbage($ulnReceiveConfig)
    );

    return test::build::equal(
        $ulnReceiveConfig,
        $sanitizedUlnReceiveConfig
    );
}

;; - Uln Send: Has 1 builder
;;             Has 2 getters
;;             Has 1 multi-getter
(int, slice) Serde::md::UlnSend::build(cell $unused) impure {
    cell $lzSend = MOCK_LZ_SEND();
    cell $customUlnSendConfig = MOCK_CUSTOM_ULN_SEND_CONFIG();

    cell $connectionInitialStorage = UlnConnection::New(
        ULN_MANAGER_ADDRESS, 
        MOCK_SEND_PATH(), 
        ULN_ADDRESS
    );
    
    int forwardingAddress = CHANNEL_ADDRESS;

    return test::build::equal(
        md::UlnSend::New($lzSend, $customUlnSendConfig, $connectionInitialStorage, forwardingAddress),
        md::UlnSend::build($lzSend, $customUlnSendConfig, $connectionInitialStorage, forwardingAddress)
    );
}

(int, slice) Serde::md::UlnSend::getConnectionInitialStorage(cell $unused) impure {
    return test::getRef::equal(
        MOCK_ULN_SEND(),
        md::UlnSend::getConnectionInitialStorage,
        md::UlnSend::connectionInitialStorage
    );
}

(int, slice) Serde::md::UlnSend::getForwardingAddress(cell $unused) impure {
    return test::getData::equal(
        MOCK_ULN_SEND(),
        md::UlnSend::getForwardingAddress,
        md::UlnSend::forwardingAddress
    );
}

(int, slice) Serde::md::UlnSend::getLzSendAndCustomUlnSendConfig(cell $unused) impure {
    cell $ulnSend = MOCK_ULN_SEND();

    cell $expectedLzSend = $ulnSend.cl::get<cellRef>(md::UlnSend::lzSend);
    cell $expectedCustomUlnSendConfig = $ulnSend.cl::get<cellRef>(md::UlnSend::customUlnSendConfig);

    (
        cell $lzSend, 
        cell $customUlnSendConfig
    ) = md::UlnSend::getLzSendAndCustomUlnSendConfig($ulnSend);

    return test::multiget::equal(
        $ulnSend,
        unsafeTuple([md::UlnSend::lzSend, md::UlnSend::customUlnSendConfig]),
        unsafeTuple([$lzSend, $customUlnSendConfig])
    );
}

;; - Uln Send Config: Has 1 sanitize
(int, slice) Serde::UlnSendConfig::sanitize(cell $unused) impure {
    cell $ulnSendConfig = MOCK_CUSTOM_ULN_SEND_CONFIG();

    cell $sanitizedUlnSendConfig = UlnSendConfig::sanitize(
        _dupWithGarbage($ulnSendConfig)
    );

    return test::build::equal(
        $ulnSendConfig,
        $sanitizedUlnSendConfig
    );
}

;; - Uln Verification: Has 1 multi-getter
(int, slice) Serde::md::UlnVerification::deserialize(cell $unused) impure {
    cell $ulnVerification = md::UlnVerification::New(NONCE, PACKET_HASH, DEFAULT_CONFIRMATIONS);

    (
        int nonce,
        cell $attestation
    ) = md::UlnVerification::deserialize($ulnVerification);

    return test::multiget::equal(
        $ulnVerification,
        unsafeTuple([md::UlnVerification::nonce, md::UlnVerification::attestation]),
        unsafeTuple([nonce, $attestation])
    );
}

;; - Uln Worker Feelib Bytecode: Has 1 sanitize
(int, slice) Serde::UlnWorkerFeelibBytecode::sanitize(cell $unused) impure {
    cell $ulnWorkerFeelibBytecode = MOCK_DEFAULT_ULN_WORKER_FEELIB_BYTECODE_MD();

    cell $sanitizedUlnWorkerFeelibBytecode = md::UlnWorkerFeelibBytecode::sanitize(
        _dupWithGarbage($ulnWorkerFeelibBytecode)
    );

    return test::build::equal(
        $ulnWorkerFeelibBytecode,
        $sanitizedUlnWorkerFeelibBytecode
    );
}

;; - UlnWorkerFeelibInfo: Has 2 getters
;;                        Has 1 multi-getter
;;                        Has 2 setters
(int, slice) Serde::UlnWorkerFeelibInfo::getWorkerAddress(cell $unused) impure {
    return test::getData::equal(
        MOCK_ULN_WORKER_FEELIB_INFO(MOCK_DEFAULT_REQUIRED_DVN_ADDRESS(1), Uln::CONST::INITIAL_RENT_NANOS),
        UlnWorkerFeelibInfo::getWorkerAddress,
        UlnWorkerFeelibInfo::workerAddress
    );
}

(int, slice) Serde::UlnWorkerFeelibInfo::getWorkerFeeLibStorage(cell $unused) impure {
    return test::getRef::equal(
        MOCK_ULN_WORKER_FEELIB_INFO(MOCK_DEFAULT_REQUIRED_DVN_ADDRESS(1), Uln::CONST::INITIAL_RENT_NANOS),
        UlnWorkerFeelibInfo::getWorkerFeeLibStorage,
        UlnWorkerFeelibInfo::workerFeelibStorage
    );
}

(int, slice) Serde::UlnWorkerFeelibInfo::getQuoteWorkerInformation(cell $unused) impure {
    cell $ulnWorkerFeelibInfo = MOCK_ULN_WORKER_FEELIB_INFO(
        MOCK_DEFAULT_REQUIRED_DVN_ADDRESS(1), Uln::CONST::INITIAL_RENT_NANOS
    );

    (   
        int friendWorkerAddress,
        cell $workerFeelibStorage,
        cell $workerFeelibBytecode
    ) = UlnWorkerFeelibInfo::getQuoteWorkerInformation($ulnWorkerFeelibInfo);

    return test::multiget::equal(
        $ulnWorkerFeelibInfo,
        unsafeTuple([UlnWorkerFeelibInfo::friendWorkerAddress, UlnWorkerFeelibInfo::workerFeelibStorage, UlnWorkerFeelibInfo::workerFeelibBytecode]),
        unsafeTuple([friendWorkerAddress, $workerFeelibStorage, $workerFeelibBytecode])
    );
}

(int, slice) Serde::UlnWorkerFeelibInfo::setWorkerFeeLibBytecode(cell $unused) impure {
    cell $workerFeeLibInfo = MOCK_ULN_WORKER_FEELIB_INFO(
        MOCK_DEFAULT_REQUIRED_DVN_ADDRESS(0), 
        Uln::CONST::INITIAL_RENT_NANOS
    );

    cell $expectedWorkerFeeLibInfo = $workerFeeLibInfo.cl::set(
        UlnWorkerFeelibInfo::workerFeelibBytecode, 
        _getRandomCode(55)
    );
    cell $optimizedWorkerFeeLibInfo = UlnWorkerFeelibInfo::setWorkerFeeLibBytecode(
        $workerFeeLibInfo, 
        _getRandomCode(55)
    );

    return test::set::equal(
        $expectedWorkerFeeLibInfo,
        $optimizedWorkerFeeLibInfo
    );
}

(int, slice) Serde::UlnWorkerFeelibInfo::setWorkerFeeLibStorage(cell $unused) impure {
    cell $workerFeeLibInfo = MOCK_ULN_WORKER_FEELIB_INFO(
        MOCK_DEFAULT_REQUIRED_DVN_ADDRESS(0), 
        Uln::CONST::INITIAL_RENT_NANOS
    );

    cell $expectedWorkerFeeLibInfo = $workerFeeLibInfo.cl::set(
        UlnWorkerFeelibInfo::workerFeelibStorage, 
        _getRandomCode(65)
    );
    cell $optimizedWorkerFeeLibInfo = UlnWorkerFeelibInfo::setWorkerFeeLibStorage(
        $workerFeeLibInfo, 
        _getRandomCode(65)
    );

    return test::set::equal(
        $expectedWorkerFeeLibInfo,
        $optimizedWorkerFeeLibInfo
    );
}

(int, slice) Serde::UlnWorkerFeelibInfo::sanitize(cell $unused) impure {
    cell $ulnWorkerFeelibInfo = MOCK_ULN_WORKER_FEELIB_INFO(
        MOCK_DEFAULT_REQUIRED_DVN_ADDRESS(1), Uln::CONST::INITIAL_RENT_NANOS
    );

    cell $sanitizedUlnWorkerFeelibInfo = UlnWorkerFeelibInfo::sanitize(
        _dupWithGarbage($ulnWorkerFeelibInfo)
    );

    return test::build::equal(
        $ulnWorkerFeelibInfo,
        $sanitizedUlnWorkerFeelibInfo
    );
}

;; - Verification Status: Has 1 builder
(int, slice) Serde::md::VerificationStatus::build(cell $unused) impure {
    return test::build::equal(
        md::VerificationStatus::New(NONCE, UlnConnection::ULN_CONNECTION_VERIFY_SUCCEEDED),
        md::VerificationStatus::build(NONCE, UlnConnection::ULN_CONNECTION_VERIFY_SUCCEEDED)
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
    ;; - Attestation
        .tpush([Serde::lz::Attestation::deserialize, "Serde::lz::Attestation::deserialize"])
    ;; - Dvn Fees Paid Event
        .tpush([Serde::DvnFeesPaidEvent::build, "Serde::DvnFeesPaidEvent::build"])
    ;; - Executor Fee Paid Event
        .tpush([Serde::ExecutorFeePaidEvent::build, "Serde::ExecutorFeePaidEvent::build"])
    ;; - InitUlnConnection
        .tpush([Serde::InitUlnConnection::sanitize, "Serde::InitUlnConnection::sanitize"])
    ;; - InitUln
        .tpush([Serde::InitUln::sanitize, "Serde::InitUln::sanitize"])
    ;; - SetAdminWorkerAddresses
        .tpush([Serde::SetAdminWorkerAddresses::sanitize, "Serde::SetAdminWorkerAddresses::sanitize"])
    ;; - Uln Events
        .tpush([Serde::md::UlnEvents::build, "Serde::md::UlnEvents::build"])
    ;; - Uln Receive Config
        .tpush([Serde::UlnReceiveConfig::getMinCommitPacketGas, "Serde::UlnReceiveConfig::getMinCommitPacketGas"])
        .tpush([Serde::UlnReceiveConfig::getConfirmationsNull, "Serde::UlnReceiveConfig::getConfirmationsNull"])
        .tpush([Serde::UlnReceiveConfig::getConfirmations, "Serde::UlnReceiveConfig::getConfirmations"])
        .tpush([Serde::UlnReceiveConfig::getOptionalDVNThreshold, "Serde::UlnReceiveConfig::getOptionalDVNThreshold"])
        .tpush([Serde::UlnReceiveConfig::getRequiredDVNsAndNull, "Serde::UlnReceiveConfig::getRequiredDVNsAndNull"])
        .tpush([Serde::UlnReceiveConfig::getOptionalDVNsAndNull, "Serde::UlnReceiveConfig::getOptionalDVNsAndNull"])
        .tpush([Serde::UlnReceiveConfig::getRequiredAndOptionalDVNsAndNull, "Serde::UlnReceiveConfig::getRequiredAndOptionalDVNsAndNull"])
        .tpush([Serde::UlnReceiveConfig::getCommitInfo, "Serde::UlnReceiveConfig::getCommitInfo"])
        .tpush([Sedre::UlnReceiveConfig::sanitize, "Serde::UlnReceiveConfig::sanitize"])
    ;; - Uln Send
        .tpush([Serde::md::UlnSend::build, "Serde::md::UlnSend::build"])
        .tpush([Serde::md::UlnSend::getConnectionInitialStorage, "Serde::md::UlnSend::getConnectionInitialStorage"])
        .tpush([Serde::md::UlnSend::getForwardingAddress, "Serde::md::UlnSend::getForwardingAddress"])
        .tpush([Serde::md::UlnSend::getLzSendAndCustomUlnSendConfig, "Serde::md::UlnSend::getLzSendAndCustomUlnSendConfig"])
    ;; - Uln Send Config
        .tpush([Serde::UlnSendConfig::sanitize, "Serde::UlnSendConfig::sanitize"])
    ;; - Uln Verification
        .tpush([Serde::md::UlnVerification::deserialize, "Serde::md::UlnVerification::deserialize"])
    ;; - Uln Worker Feelib Bytecode
        .tpush([Serde::UlnWorkerFeelibBytecode::sanitize, "Serde::UlnWorkerFeelibBytecode::sanitize"])
    ;; - Uln Worker Feelib Info
        .tpush([Serde::UlnWorkerFeelibInfo::getWorkerAddress, "Serde::UlnWorkerFeelibInfo::getWorkerAddress"])
        .tpush([Serde::UlnWorkerFeelibInfo::getWorkerFeeLibStorage, "Serde::UlnWorkerFeelibInfo::getWorkerFeeLibStorage"])
        .tpush([Serde::UlnWorkerFeelibInfo::getQuoteWorkerInformation, "Serde::UlnWorkerFeelibInfo::getQuoteWorkerInformation"])
        .tpush([Serde::UlnWorkerFeelibInfo::setWorkerFeeLibBytecode, "Serde::UlnWorkerFeelibInfo::setWorkerFeeLibBytecode"])
        .tpush([Serde::UlnWorkerFeelibInfo::setWorkerFeeLibStorage, "Serde::UlnWorkerFeelibInfo::setWorkerFeeLibStorage"])
        .tpush([Serde::UlnWorkerFeelibInfo::sanitize, "Serde::UlnWorkerFeelibInfo::sanitize"])
    ;; - Verification Status
        .tpush([Serde::md::VerificationStatus::build, "Serde::md::VerificationStatus::build"])
    ;
}
