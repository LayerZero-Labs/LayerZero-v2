#include "../../../../funC++/classlib.fc";

;; required storage name
const int lz::Attestation::NAME = "Attest"u;

;; field names
const int lz::Attestation::hash = 0; ;; hash
const int lz::Attestation::confirmations = 1; ;; uint64

const int ULN_ATTESTATION_BITS = _HEADER_WIDTH + 256 + 64;
const int ULN_ATTESTATION_REFS = 0;
;; As long as the first 128 bits of the header match the below number,
;; the attestation is parseable by classlib
const int lz::Attestation::leading16Bytes = 0x417474657374815ED897BFFF;

cell lz::Attestation::New(int hash, int confirmations) impure inline method_id {
    return cl::declare(
        lz::Attestation::NAME,
        unsafeTuple([
            [cl::t::uint256, hash],         ;; lz::Attestation::hash
            [cl::t::uint64, confirmations]  ;; lz::Attestation::confirmations
        ])
    );
}

() lz::Attestation::validate(cell $self) impure inline method_id {
    ;; low-level destructuring for efficiency
    slice selfSlice = $self.begin_parse();
    (int bits, int refs) = selfSlice.slice_bits_refs();
    throw_unless(
        cl::ERROR::MALFORMED_OBJECT,
        (bits == ULN_ATTESTATION_BITS)
        & (refs == ULN_ATTESTATION_REFS)
        & (selfSlice~load_uint(128) == lz::Attestation::leading16Bytes)
    );
}

const int lz::Attestation::_hashOffset = _HEADER_WIDTH;
const int lz::Attestation::_confirmationsOffset = lz::Attestation::_hashOffset + 256;

;; (hash, confirmations)
(int, int) lz::Attestation::deserialize(cell $self) impure inline {
    slice selfSlice = $self.begin_parse();
    return (
        selfSlice.preloadUint256At(lz::Attestation::_hashOffset),
        selfSlice.preloadUint64At(lz::Attestation::_confirmationsOffset)
    );
}