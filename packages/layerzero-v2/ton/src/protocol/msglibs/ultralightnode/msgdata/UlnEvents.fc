#include "../../../../funC++/classlib.fc";

;; required storage name
const int UlnEvents::NAME = "UlnEvents"u;

const int UlnEvents::CONSTS::NULL_WORKER_ID = 0;

;; field names
const int UlnEvents::workerEvents = 0;
const int UlnEvents::dvnFeesPaidEvent = 1;
const int UlnEvents::executorFeePaidEvent = 2;

cell UlnEvents::New(
    cell workerEvents,
    cell dvnFeesPaidEvent,
    cell executorFeePaidEvent
) impure inline method_id {
    return cl::declare(
        UlnEvents::NAME,
        unsafeTuple([
            [cl::t::objRef, workerEvents],          ;; UlnEvents::workerEvents
            [cl::t::objRef, dvnFeesPaidEvent],      ;; UlnEvents::dvnFeesPaidEvent
            [cl::t::objRef, executorFeePaidEvent]   ;; UlnEvents::executorFeePaidEvent
        ])
    );
}

;; ========================= Object Builders =========================

const int UlnEvents::_headerInfoBits = _BASIC_HEADER_WIDTH + (_FIELD_INFO_WIDTH * 3);
const int UlnEvents::_headerFillerBits = _HEADER_WIDTH - UlnEvents::_headerInfoBits;
const int UlnEvents::_headerInfo = 28386846067720270005963581604331155452;

cell UlnEvents::build(cell workerEvents, cell dvnFeesPaidEvent, cell executorFeePaidEvent) impure inline {
    return begin_cell()
        .store_uint(UlnEvents::_headerInfo, UlnEvents::_headerInfoBits)  ;; header info
        .store_ones(UlnEvents::_headerFillerBits)                        ;; header filler
        .store_ref(workerEvents)                                         ;; refs[0]
        .store_ref(dvnFeesPaidEvent)                                     ;; refs[1]
        .store_ref(
            begin_cell()
                .store_ref(executorFeePaidEvent)                         ;; refs[2]
            .end_cell()                                                                      
        )
    .end_cell();
}