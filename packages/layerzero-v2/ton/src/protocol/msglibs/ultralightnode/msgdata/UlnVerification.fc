#include "Attestation.fc";

;; required storage name
const int md::UlnVerification::NAME = "UlnVerify"u;

;; field names
const int md::UlnVerification::nonce = 0; ;; hash
const int md::UlnVerification::attestation = 1; ;; uint64

cell md::UlnVerification::New(int nonce, int hash, int confirmations) impure inline method_id {
    return cl::declare(
        md::UlnVerification::NAME,
        unsafeTuple([
            [cl::t::uint64, nonce], ;; md::UlnVerification::nonce
            [cl::t::objRef, lz::Attestation::New(
                hash,
                confirmations
            )]                      ;; md::UlnVerification::attestation
        ])
    );
}

;; ==================================== Object Getters =============================
const int md::UlnVerification::_nonceOffset = _HEADER_WIDTH;

(int, cell) md::UlnVerification::deserialize(cell $self) impure inline {
    return (
        $self.cellPreloadUint64At(md::UlnVerification::_nonceOffset),
        $self.cellPreloadRefAt(0)
    );
}