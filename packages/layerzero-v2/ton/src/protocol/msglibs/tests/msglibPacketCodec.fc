#include "../BytesEncoder.fc";
#include "../BytesDecoder.fc";
#include "../../../../tests/testMain.fc";
#include "../../../../tests/mocks.fc";
#include "../../../classes/lz/Packet.fc";

slice _testName() { return "msglibBytesEncoder"; }

cell baseTest::prepare(tuple args) impure {
    return cl::nullObject();
}

() _dumpLinkedList(cell ll) impure {
    slice lls = ll.begin_parse();
    int idx = 0;
    while (lls.slice_refs_empty?() == false) {
        str::console::log<int>("Linked list idx: ", idx);
        ~strdump(lls);
        lls = lls.preload_first_ref().begin_parse();
        idx += 1;
    }
    str::console::log<int>("Linked list idx: ", idx);
    ~dump(lls);
}

(int, slice) BytesEncoder::basic(cell $args) impure {
    cell encodedPacket = BytesEncoder::New()
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::feed("hello, world!")
        .BytesEncoder::serialize();
    ;; _dumpLinkedList(encodedPacket);
    int condition = true;
    return test::shouldBeTrue(condition);
}

;; does a simple byte-aligned cell get encoded to itself?
(int, slice) BytesEncoder::IdempotentCell(cell $args) impure {
    cell data = MOCK_CHANNEL_CODE();
    cell encodedData = BytesEncoder::New()
                        .BytesEncoder::feed<cellRef>(data)
                        .BytesEncoder::serialize();
    
    return test::shouldBeTrue(
        data.cell_hash() == encodedData.cell_hash()
    );
}

(int, slice) BytesDecoder::SingleOption::success(cell $args) impure {
    int expectedOptionType = 5;
    int expectedOptionInt = 100;
    cell options = begin_cell()
                    ;; option 1 -- start
                    .store_uint8(123) ;; executor id
                    .store_uint16(1) ;; optionsize (bytes)
                    .store_uint8(expectedOptionType) ;; option type
                    .store_uint8(expectedOptionInt) ;; option bits
                    ;; option 1 -- end
                    .end_cell();

    (int optionType, cell nextOption, options) = BytesDecoder::nextOption(options);
    int optionInt = nextOption.begin_parse().preload_uint(8);

    return test::shouldBeTrue(
        (optionType == expectedOptionType) 
        & (expectedOptionInt == optionInt)
    );
}

(int, slice) BytesDecoder::TwoOptions::success(cell $args) impure {
    int expectedOptionType = 6;
    int expectedOptionInt = 101;
    cell options = begin_cell()
                    ;; option 1 -- start
                    .store_uint8(123) ;; executor id
                    .store_uint16(1) ;; optionsize (bytes)
                    .store_uint8(expectedOptionType - 1) ;; option type
                    .store_uint8(expectedOptionInt - 1) ;; option bits
                    ;; option 1 -- end
                    ;; option 2 -- start
                    .store_uint8(111) ;; executor id
                    .store_uint16(2) ;; optionsize (bytes)
                    .store_uint8(expectedOptionType) ;; option type
                    .store_uint16(expectedOptionInt) ;; option bits
                    ;; option 2 -- end
                    .end_cell();

    ;; skip option 1
    (_, _, options) = BytesDecoder::nextOption(options);
    (int optionType, cell nextOption, options) = BytesDecoder::nextOption(options);
    int optionInt = nextOption.begin_parse().preload_uint(16);

    return test::shouldBeTrue(
          (optionType == expectedOptionType) 
        & (optionInt == expectedOptionInt)
    );
}

(int, slice) BytesDecoder::SplitOption::success(cell $args) impure {
    int expectedOptionType = 6;
    int expectedOptionInt = 101;
    cell options = begin_cell()
                    ;; option 1 -- start
                    .store_uint8(123) ;; executor id
                    .store_uint16(2) ;; optionsize (bytes)
                    .store_uint8(expectedOptionType) ;; option type
                    ;; store option itself in the next cell
                    .store_ref(
                        begin_cell()
                        .store_uint16(expectedOptionInt) ;; option bits
                        .end_cell()
                    )
                    ;; option 1 -- end
                    .end_cell();

    (int optionType, cell nextOption, options) = BytesDecoder::nextOption(options);
    int optionInt = nextOption.begin_parse().preload_uint(16);

    return test::shouldBeTrue(
          (optionType == expectedOptionType) 
        & (optionInt == expectedOptionInt)
    );
}

(int, slice) EncoderDecoder::Packet::success(cell $args) impure {
    cell $path = MOCK_SEND_PATH();

    int guid = lz::Packet::calculateGuid($path, NONCE);
    cell $packet = lz::Packet::New(
        $path,
        MOCK_MESSAGE(),
        NONCE
    ).cl::set(lz::Packet::guid, guid);

    cell encodedPacket = BytesEncoder::build<PacketV1>($packet)
        .BytesEncoder::serialize();

    cell $decodedPacket = BytesDecoder::decode<PacketV1>(encodedPacket);

    return test::shouldBeTrue(
        $packet.cell_hash() == $decodedPacket.cell_hash()
    );
}

tuple baseTest::getTests() impure {
    return empty_tuple()
        .tpush([BytesEncoder::basic, "BytesEncoder::basic"])
        .tpush([BytesEncoder::IdempotentCell, "BytesEncoder::IdempotentCell"])
        .tpush([BytesDecoder::SingleOption::success, "BytesDecoder::SingleOption::success"])
        .tpush([BytesDecoder::TwoOptions::success, "BytesDecoder::TwoOptions::success"])
        .tpush([BytesDecoder::SplitOption::success, "BytesDecoder::SplitOption::success"])
        .tpush([EncoderDecoder::Packet::success, "EncoderDecoder::Packet::success"])
    ;
}
