#include "../../classes/lz/Packet.fc";

const int BytesDecoder::ERROR::invalidOptionSize = 1121;
const int BytesDecoder::ERROR::malformedOptions = 1122;
const int BytesDecoder::ERROR::malformedArray = 1123;

;; n_bytes should be <= 32
(slice, int) BytesDecoder::loadBytes(slice decoder, int nBytes) impure inline method_id {
    int sliceBits = decoder.slice_bits();
    if ((decoder.slice_refs() > 1) | (sliceBits % 8 != 0)) {
        throw(BytesDecoder::ERROR::malformedOptions);
    }
    int sliceBytes = sliceBits / 8;
    if (sliceBytes >= nBytes) {
        return decoder.load_uint(nBytes * 8);
    } else {
        (decoder, int valueHeader) = decoder.load_uint(sliceBits);
        int remainingBytes = nBytes - sliceBytes;
        (slice next_data, int valueTail) = BytesDecoder::loadBytes(
            decoder.preload_first_ref().begin_parse(),
            remainingBytes
        );
        slice fullData = begin_cell()
            .store_uint(valueHeader, sliceBits)
            .store_uint(valueTail, remainingBytes * 8)
            .as_slice();
        return (next_data, fullData.preload_uint(nBytes * 8));
    }
}

;; byte- and cell- align the data
cell BytesDecoder::compactRemainder(slice data) impure inline {
    int moduloBits = data.slice_bits(); ;; "misaligned" portion
    throw_unless(
        BytesDecoder::ERROR::malformedArray,
        (data.slice_refs() <= 1) & ((moduloBits % 8) == 0)
    );

    if (moduloBits == 0) {
        return empty_cell();
    }

    if (data.slice_refs() == 0) {
        return begin_cell().store_slice(data).end_cell();
    }

    tuple retData = empty_tuple();

    while (data.slice_refs() > 0) {
        slice nextData = data.preload_first_ref().begin_parse();
        int sliceBits = nextData.slice_bits();
        int remainingBits = ((sliceBits + moduloBits) <= 1016) ? sliceBits : (1016 - moduloBits);
        if (nextData.slice_refs() > 0) {
            throw_if(BytesDecoder::ERROR::malformedArray, nextData.slice_bits() != 1016);
        }
        throw_unless(
            BytesDecoder::ERROR::malformedArray,
            (nextData.slice_refs() <= 1) & (sliceBits > 0) & (sliceBits % 8 == 0)
        );
        retData~tpush(
            begin_cell()
                .store_slice(data.scutlast(moduloBits, 0))
                .store_slice(nextData.scutfirst(remainingBits, 0))
        );
        if ((nextData.slice_refs() == 0) & ((sliceBits - remainingBits) > 0)) {
            retData~tpush(
                begin_cell().store_slice(nextData.sskipfirst(remainingBits, 0))
            );
        }
        data = nextData;
    }
    int idx = retData.tlen() - 1;
    builder ret = retData.at(idx);
    while (idx > 0) {
        idx -= 1;
        ret = retData.at(idx).store_ref(ret.end_cell());
    }
    return ret.end_cell();
}

;; returns (optionType, option, optionsTail)
(int, cell, cell) BytesDecoder::nextOption(cell options) impure inline {
    slice parsingOptions = options.begin_parse();
    (parsingOptions, int executorId) = BytesDecoder::loadBytes(parsingOptions, 1);
    (parsingOptions, int optionSizeInBytes) = BytesDecoder::loadBytes(parsingOptions, 2);
    (parsingOptions, int optionType) = BytesDecoder::loadBytes(parsingOptions, 1);
    (parsingOptions, int option) = BytesDecoder::loadBytes(parsingOptions, optionSizeInBytes);
    return (
        optionType, 
        begin_cell().store_uint(option, optionSizeInBytes * 8).end_cell(),
        begin_cell().store_slice(parsingOptions).end_cell() ;; should retain the ref
    );
}

;; (gas, value)
(int, int) BytesDecoder::decode<LzReceiveOption>(cell option) impure inline {
    slice optionSlice = option.begin_parse();
    int optionSizeInBytes = optionSlice.slice_bits() / 8;
    if ((optionSizeInBytes != 16) & (optionSizeInBytes != 32)) {
        throw(BytesDecoder::ERROR::invalidOptionSize);
    }
    if (optionSizeInBytes == 256 / 8) {
        return (optionSlice~load_uint128(), optionSlice~load_uint128());
    }
    return (optionSlice~load_uint128(), 0);
}

;; (amount, receiver)
(int, int) BytesDecoder::decode<NativeDropOption>(cell option) impure inline {
    slice parsingOption = option.begin_parse();
    int optionBytes = parsingOption.slice_bits() * 8;
    throw_unless(BytesDecoder::ERROR::invalidOptionSize, optionBytes == (32 + 16));
    return (
        parsingOption~load_uint128(), ;; amount
        parsingOption~load_uint256() ;; receiver
    );
}

;; returns lz::Packet
cell BytesDecoder::decode<PacketV1>(cell encodedPacket) impure inline method_id {
    slice parsingPacket = encodedPacket.begin_parse();
    (parsingPacket, int packetVersion) = BytesDecoder::loadBytes(parsingPacket, 1);
    (parsingPacket, int nonce) = BytesDecoder::loadBytes(parsingPacket, 8);
    (parsingPacket, int srcEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int srcOApp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int dstEid) = BytesDecoder::loadBytes(parsingPacket, 4);
    (parsingPacket, int dstOApp) = BytesDecoder::loadBytes(parsingPacket, 32);
    (parsingPacket, int guid) = BytesDecoder::loadBytes(parsingPacket, 32);

    return lz::Packet::New(
        lz::Path::New(srcEid, srcOApp, dstEid, dstOApp),
        BytesDecoder::compactRemainder(parsingPacket),
        nonce
    ).cl::set(lz::Packet::guid, guid);
}